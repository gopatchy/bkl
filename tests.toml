###############################################################################
# Map Operations
###############################################################################

[mapDelete]
description = "Test map deletion with $delete directive"
eval = "a.b.yaml"
format = "yaml"
expected = '''
a: 1
c: 3
'''
files."a.yaml" = '''
a: 1
b: 2
'''
files."a.b.yaml" = '''
b: $delete
c: 3
'''

[mapDeleteNested]
description = "Test nested map deletion with $delete directive"
eval = "a.b.yaml"
format = "yaml"
expected = '''
x:
  a: 1
  c: 3
'''
files."a.yaml" = '''
x:
  a: 1
  b: 2
'''
files."a.b.yaml" = '''
x:
  b: $delete
  c: 3
'''

[mapReplace]
description = "Test map replacement with $replace directive"
eval = "a.b.yaml"
format = "json"
expected = '''
{"b":2}
'''
files."a.yaml" = '''
a: 1
'''
files."a.b.yaml" = '''
b: 2
$replace: true
'''

[mergeMap]
description = "Test map merging with $merge directive"
eval = "a.yaml"
format = "json"
expected = '''
{"foo":{"bar":{"a":1}},"zig":{"a":1,"b":2}}
'''
files."a.yaml" = '''
foo:
  bar:
    a: 1
zig:
  b: 2
  $merge: foo.bar
'''

[replaceMap]
description = "Test map replacement with $replace directive (path reference)"
eval = "a.yaml"
format = "json"
expected = '''
{"foo":{"bar":{"a":1}},"zig":{"a":1}}
'''
files."a.yaml" = '''
foo:
  bar:
    a: 1
zig:
  b: 2
  $replace: foo.bar
'''

###############################################################################
# List Operations
###############################################################################

[listMerge]
description = "Test default list merge behavior (concatenation)"
eval = "a.b.yaml"
format = "json"
expected = '''
[1,2]
'''
files."a.yaml" = '''
- 1
'''
files."a.b.yaml" = '''
- 2
'''

[listReplace]
description = "Test list replacement with $replace directive"
eval = "a.b.yaml"
format = "json"
expected = '''
[2]
'''
files."a.yaml" = '''
- 1
'''
files."a.b.yaml" = '''
- 2
- $replace
'''

[listDelete]
description = "Test list deletion with $delete directive"
eval = "a.b.yaml"
format = "json"
expected = '''
[{"x":1},{"x":3}]
'''
files."a.yaml" = '''
- x: 1
- x: 2
'''
files."a.b.yaml" = '''
- x: 3
- $delete:
    x: 2
'''

[listDeletePartialList]
description = "Test partial list deletion with nested structures"
eval = "a.b.yaml"
format = "json"
expected = '''
[{"x":[{"a":1}]},{"x":[{"d":4}]}]
'''
files."a.yaml" = '''
- x:
  - a: 1
- x:
  - b: 2
  - c: 3
'''
files."a.b.yaml" = '''
- x:
  - d: 4
- $delete:
    x:
      - b: 2
'''

###############################################################################
# Match Operations
###############################################################################

[matchMap]
description = "Test $match directive for selective document processing"
eval = "a.b.yaml"
format = "json"
expected = '''
{"a":1,"d":4}
{"b":2,"c":3}
'''
files."a.yaml" = '''
a: 1
---
b: 2
'''
files."a.b.yaml" = '''
$match:
  b: 2
c: 3
---
$match:
  a: 1
d: 4
'''

###############################################################################
# Parent and Inheritance
###############################################################################

[parentSet]
description = "Test $parent directive for explicit parent file reference"
eval = "a.b.yaml"
format = "yaml"
expected = '''
a: 1
b: 2
'''
files."a.b.yaml" = '''
$parent: c
a: 1
'''
files."c.yaml" = '''
b: 2
'''

###############################################################################
# Output Control
###############################################################################

[outputMulti]
description = "Test $output directive for selective output"
eval = "a.yaml"
format = "yaml"
expected = '''
a: 1
b: 2
---
c: 3
'''
files."a.yaml" = '''
foo:
  bar:
    $output: true
    a: 1
    b: 2
  zig:
    $output: true
    c: 3
'''

###############################################################################
# Special Characters and Escaping
###############################################################################

[literalDollar]
description = "Test literal dollar sign escaping ($$)"
eval = "a.yaml"
format = "json"
expected = '''
{"listKey":["$instance",{"nested":{"$key":"$value"}}],"mapKey":"$pod"}
'''
files."a.yaml" = '''
listKey:
  - $$instance
  - nested:
      $$key: $$value
mapKey: $$pod
'''

###############################################################################
# Format Support
###############################################################################

[jsonInput]
description = "Test JSON input format support"
eval = "a.b.json"
format = "json-pretty"
expected = '''
{
  "a": 1,
  "b": 2
}
'''
files."a.json" = '''
{
	"a": 1
}
'''
files."a.b.json" = '''
{
	"b": 2
}
'''

###############################################################################
# Examples and Documentation
###############################################################################

[example1]
description = "Example from documentation showing basic inheritance"
eval = "a.b.toml"
format = "json"
expected = '''
{"addr":"127.0.0.1","name":"myService","port":8081}
'''
files."a.yaml" = '''
name: myService
addr: 127.0.0.1
port: 8080
'''
files."a.b.toml" = '''
port = 8081
'''