###############################################################################
# Map Operations
###############################################################################

[mapDelete]
description = "Test map deletion with $delete directive"
eval = "a.b.yaml"
format = "yaml"
expected = '''
a: 1
c: 3
'''
files."a.yaml" = '''
a: 1
b: 2
'''
files."a.b.yaml" = '''
b: $delete
c: 3
'''

[mapDeleteNested]
description = "Test nested map deletion with $delete directive"
eval = "a.b.yaml"
format = "yaml"
expected = '''
x:
  a: 1
  c: 3
'''
files."a.yaml" = '''
x:
  a: 1
  b: 2
'''
files."a.b.yaml" = '''
x:
  b: $delete
  c: 3
'''

[mapReplace]
description = "Test map replacement with $replace directive"
eval = "a.b.yaml"
format = "json"
expected = '''
{"b":2}
'''
files."a.yaml" = '''
a: 1
'''
files."a.b.yaml" = '''
b: 2
$replace: true
'''

[mergeMap]
description = "Test map merging with $merge directive"
eval = "a.yaml"
format = "json"
expected = '''
{"foo":{"bar":{"a":1}},"zig":{"a":1,"b":2}}
'''
files."a.yaml" = '''
foo:
  bar:
    a: 1
zig:
  b: 2
  $merge: foo.bar
'''

[replaceMap]
description = "Test map replacement with $replace directive (path reference)"
eval = "a.yaml"
format = "json"
expected = '''
{"foo":{"bar":{"a":1}},"zig":{"a":1}}
'''
files."a.yaml" = '''
foo:
  bar:
    a: 1
zig:
  b: 2
  $replace: foo.bar
'''

###############################################################################
# List Operations
###############################################################################

[listMerge]
description = "Test default list merge behavior (concatenation)"
eval = "a.b.yaml"
format = "json"
expected = '''
[1,2]
'''
files."a.yaml" = '''
- 1
'''
files."a.b.yaml" = '''
- 2
'''

[listReplace]
description = "Test list replacement with $replace directive"
eval = "a.b.yaml"
format = "json"
expected = '''
[2]
'''
files."a.yaml" = '''
- 1
'''
files."a.b.yaml" = '''
- 2
- $replace
'''

[listDelete]
description = "Test list deletion with $delete directive"
eval = "a.b.yaml"
format = "json"
expected = '''
[{"x":1},{"x":3}]
'''
files."a.yaml" = '''
- x: 1
- x: 2
'''
files."a.b.yaml" = '''
- x: 3
- $delete:
    x: 2
'''

[listDeletePartialList]
description = "Test partial list deletion with nested structures"
eval = "a.b.yaml"
format = "json"
expected = '''
[{"x":[{"a":1}]},{"x":[{"d":4}]}]
'''
files."a.yaml" = '''
- x:
  - a: 1
- x:
  - b: 2
  - c: 3
'''
files."a.b.yaml" = '''
- x:
  - d: 4
- $delete:
    x:
      - b: 2
'''

###############################################################################
# Match Operations
###############################################################################

[matchMap]
description = "Test $match directive for selective document processing"
eval = "a.b.yaml"
format = "json"
expected = '''
{"a":1,"d":4}
{"b":2,"c":3}
'''
files."a.yaml" = '''
a: 1
---
b: 2
'''
files."a.b.yaml" = '''
$match:
  b: 2
c: 3
---
$match:
  a: 1
d: 4
'''

###############################################################################
# Parent and Inheritance
###############################################################################

[parentSet]
description = "Test $parent directive for explicit parent file reference"
eval = "a.b.yaml"
format = "yaml"
expected = '''
a: 1
b: 2
'''
files."a.b.yaml" = '''
$parent: c
a: 1
'''
files."c.yaml" = '''
b: 2
'''

###############################################################################
# Output Control
###############################################################################

[outputMulti]
description = "Test $output directive for selective output"
eval = "a.yaml"
format = "yaml"
expected = '''
a: 1
b: 2
---
c: 3
'''
files."a.yaml" = '''
foo:
  bar:
    $output: true
    a: 1
    b: 2
  zig:
    $output: true
    c: 3
'''

###############################################################################
# Special Characters and Escaping
###############################################################################

[literalDollar]
description = "Test literal dollar sign escaping ($$)"
eval = "a.yaml"
format = "json"
expected = '''
{"listKey":["$instance",{"nested":{"$key":"$value"}}],"mapKey":"$pod"}
'''
files."a.yaml" = '''
listKey:
  - $$instance
  - nested:
      $$key: $$value
mapKey: $$pod
'''

###############################################################################
# Format Support
###############################################################################

[jsonInput]
description = "Test JSON input format support"
eval = "a.b.json"
format = "json-pretty"
expected = '''
{
  "a": 1,
  "b": 2
}
'''
files."a.json" = '''
{
	"a": 1
}
'''
files."a.b.json" = '''
{
	"b": 2
}
'''

###############################################################################
# Examples and Documentation
###############################################################################

[example1]
description = "Example from documentation showing basic inheritance"
eval = "a.b.toml"
format = "json"
expected = '''
{"addr":"127.0.0.1","name":"myService","port":8081}
'''
files."a.yaml" = '''
name: myService
addr: 127.0.0.1
port: 8080
'''
files."a.b.toml" = '''
port = 8081
'''

###############################################################################
# Encode/Decode Operations
###############################################################################

[encodeBase64]
description = "Test base64 encoding with $encode directive"
eval = "a.yaml"
format = "yaml"
expected = '''
YQ==
'''
files."a.yaml" = '''
$value: a
$encode: base64
'''

[encodeJson]
description = "Test JSON encoding with $encode directive"
eval = "a.yaml"
format = "yaml"
expected = '''
|
  {"a":1,"b":2}
'''
files."a.yaml" = '''
a: 1
b: 2
$encode: json
'''

[decodeJson]
description = "Test JSON decoding with $decode directive"
eval = "a.yaml"
format = "yaml"
expected = '''
a:
  foo: bar
'''
files."a.yaml" = '''
a:
  $value: |
    {"foo":"bar"}
  $decode: json
'''

[encodeSha256]
description = "Test SHA-256 encoding with $encode directive"
eval = "a.yaml"
format = "yaml"
expected = '''
ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb
'''
files."a.yaml" = '''
$value: a
$encode: sha256
'''

[encodeFlatten]
description = "Test flatten encoding with $encode directive"
eval = "a.yaml"
format = "yaml"
expected = '''
- a
- b
- c
- d
- e
'''
files."a.yaml" = '''
- - a
  - b
- - c
  - d
- e
- $encode: flatten
'''

[encodeJoin]
description = "Test join encoding with $encode directive"
eval = "a.yaml"
format = "yaml"
expected = '''
a24b
'''
files."a.yaml" = '''
$value: [a, 24, b]
$encode: join
'''

###############################################################################
# Interpolation
###############################################################################

[interpSimple]
description = "Test basic string interpolation"
eval = "a.yaml"
format = "yaml"
expected = '''
a: 1
b: foo
c:
  d: zig
e: foo bar zig zag 1 2
'''
files."a.yaml" = '''
a: 1
b: foo
c:
  d: zig
e: $"{b} bar {c.d} zag {a} 2"
'''

[interpKey]
description = "Test interpolation in map keys"
eval = "a.yaml"
format = "yaml"
expected = '''
a: foo
foo0: bar
'''
files."a.yaml" = '''
a: foo
$"{a}0": bar
'''

[interpInterp]
description = "Test chained interpolation"
eval = "a.yaml"
format = "yaml"
expected = '''
a: foo
b: foo
c: foo
'''
files."a.yaml" = '''
a: foo
b: $"{a}"
c: $"{b}"
'''

###############################################################################
# Repeat Operations
###############################################################################

[repeatDocList]
description = "Test $repeat directive with list documents"
eval = "a.yaml"
format = "yaml"
expected = '''
- b: 2
- c: 0
---
- b: 2
- c: 1
'''
files."a.yaml" = '''
- $repeat: 2
- b: 2
- c: $repeat
'''

[repeatDocMap]
description = "Test $repeat directive with map documents"
eval = "a.yaml"
format = "yaml"
expected = '''
a:
  b: 2
  c: 0
---
a:
  b: 2
  c: 1
'''
files."a.yaml" = '''
$repeat: 2
a:
  b: 2
  c: $repeat
'''

[repeatListValues]
description = "Test $repeat directive with list of values"
eval = "a.yaml"
format = "yaml"
expected = '''
fruit: apple
---
fruit: banana
---
fruit: cherry
'''
files."a.yaml" = '''
$repeat: ["apple", "banana", "cherry"]
fruit: $repeat
'''

[repeatInsideList]
description = "Test $repeat directive expanding items within a list"
eval = "a.yaml"
format = "yaml"
expected = '''
a:
  - b: 0
  - b: 1
  - b: 2
  - b: 3
'''
files."a.yaml" = '''
a:
  - $repeat: 4
    b: $repeat
'''

[repeatInsideMap]
description = "Test $repeat with dynamic key generation in maps"
eval = "a.yaml"
format = "yaml"
expected = '''
a:
  b0:
    c: 0
  b1:
    c: 1
  b2:
    c: 2
  b3:
    c: 3
'''
files."a.yaml" = '''
a:
  $"b{$repeat}":
    $repeat: 4
    c: $repeat
'''

[repeatMap]
description = "Test multi-dimensional repeat with string interpolation"
eval = "a.yaml"
format = "yaml"
expected = '''
a: x=0 y=0 xc=2 yc=3
b: 2
c: 3
---
a: x=0 y=1 xc=2 yc=3
b: 2
c: 3
---
a: x=0 y=2 xc=2 yc=3
b: 2
c: 3
---
a: x=1 y=0 xc=2 yc=3
b: 2
c: 3
---
a: x=1 y=1 xc=2 yc=3
b: 2
c: 3
---
a: x=1 y=2 xc=2 yc=3
b: 2
c: 3
'''
files."a.yaml" = '''
$repeat:
  x: 2
  y: 3
a: $"x={$repeat:x} y={$repeat:y} xc={$repeat.x} yc={$repeat.y}"
b: $merge:$repeat.x
c: $merge:$repeat.y
'''

[repeatInsideMapValue]
description = "Test $repeat with simple values in map"
eval = "a.yaml"
format = "yaml"
expected = '''
a:
  b0: 2
  b1: 2
  b2: 2
  b3: 2
'''
files."a.yaml" = '''
a:
  $"b{$repeat}":
    $repeat: 4
    $value: 2
'''

[repeatListInsideList]
description = "Test $repeat with list creating multiple list items"
eval = "a.yaml"
format = "yaml"
expected = '''
fruits:
  - name: apple
  - name: banana
  - name: cherry
'''
files."a.yaml" = '''
fruits:
  - name: $repeat
    $repeat: ["apple", "banana", "cherry"]
'''

[repeatListInsideMap]
description = "Test $repeat with list creating multiple map entries"
eval = "a.yaml"
format = "yaml"
expected = '''
fruits:
  item-apple:
    name: apple
  item-banana:
    name: banana
  item-cherry:
    name: cherry
'''
files."a.yaml" = '''
fruits:
  $"item-{$repeat}":
    name: $repeat
    $repeat: ["apple", "banana", "cherry"]
'''

[repeatListMixedTypes]
description = "Test $repeat with mixed data types creating documents"
eval = "a.yaml"
format = "yaml"
expected = '''
type: Type is 42
value: 42
---
type: Type is hello
value: hello
---
type: Type is true
value: true
---
type: Type is 3.140000104904175
value: 3.140000104904175
'''
files."a.yaml" = '''
$repeat: [42, "hello", true, 3.14]
value: $repeat
type: $"Type is {$repeat}"
'''

[repeatMapInsideMap]
description = "Test $repeat with map creating cartesian product"
eval = "a.yaml"
format = "yaml"
expected = '''
servers:
  server-dev-0:
    env: dev
    id: 0
  server-dev-1:
    env: dev
    id: 1
  server-prod-0:
    env: prod
    id: 0
  server-prod-1:
    env: prod
    id: 1
'''
files."a.yaml" = '''
servers:
  $"server-{$repeat:env}-{$repeat:id}":
    env: $repeat:env
    id: $repeat:id
    $repeat: {env: ["dev", "prod"], id: 2}
'''

[repeatRangeFirstLast]
description = "Test $repeat with $first and $last range parameters"
eval = "a.yaml"
format = "yaml"
expected = '''
a: 5
---
a: 6
---
a: 7
---
a: 8
---
a: 9
---
a: 10
'''
files."a.yaml" = '''
$repeat:
  $first: 5
  $last: 10
a: $repeat
'''

[repeatRangeInsideMap]
description = "Test $repeat with range parameters inside map"
eval = "a.yaml"
format = "yaml"
expected = '''
ports:
  port-8080:
    number: 8080
  port-8081:
    number: 8081
  port-8082:
    number: 8082
'''
files."a.yaml" = '''
ports:
  $"port-{$repeat}":
    number: $repeat
    $repeat: {$first: 8080, $count: 3}
'''

[repeatRangeNested]
description = "Test nested $repeat with range parameters"
eval = "a.yaml"
format = "yaml"
expected = '''
result: a=0 b=10
---
result: a=0 b=12
---
result: a=0 b=14
---
result: a=1 b=10
---
result: a=1 b=12
---
result: a=1 b=14
'''
files."a.yaml" = '''
$repeat:
  a: 2
  b:
    $first: 10
    $step: 2
    $count: 3
result: $"a={$repeat:a} b={$repeat:b}"
'''

[repeatSubstValue]
description = "Test $repeat with $merge directive"
eval = "a.yaml"
format = "yaml"
expected = '''
a: 0
b: 2
---
a: 1
b: 2
'''
files."a.yaml" = '''
$repeat: 2
a: $repeat
b: $merge:$repeat
'''

[replaceCrossDoc]
description = "Test cross-document replacement with $replace"
eval = "a.yaml"
format = "yaml"
expected = '''
a: 1
b: 2
---
a: 1
b: 2
'''
files."a.yaml" = '''
a: 1
b: 2
---
c: 3
$replace:
  $match:
    a: 1
'''

[replaceCrossDocPath]
description = "Test cross-document replacement with path extraction"
eval = "a.yaml"
format = "yaml"
expected = '''
c: 3
'''
files."a.yaml" = '''
$output: false
a: 1
b:
  c: 3
---
d: 4
$replace:
  $match:
    a: 1
  $path: b
'''

[replaceCrossDocString]
description = "Test cross-document replacement with string output"
eval = "a.yaml"
format = "yaml"
expected = '''
foo
'''
files."a.yaml" = '''
a: 1
b: foo
$output: false
---
c: 3
$replace:
  $match:
    a: 1
  $path: b
'''

[replaceString]
description = "Test string replacement using $replace directive"
eval = "a.yaml"
format = "yaml"
expected = '''
foo: bar
zig:
  b: 2
  zag: bar
'''
files."a.yaml" = '''
foo: bar
zig:
  b: 2
  zag: $replace:foo
'''

[mergeCrossDocShortList]
description = "Test cross-document merging with lists"
eval = "a.yaml"
format = "yaml"
expected = '''
- 2
- 3
---
- 1
- 2
- 3
'''
files."a.yaml" = '''
- 2
- 3
---
- 1
- $merge: [[2]]
'''

[mergeCrossDocShortScalar]
description = "Test cross-document merging with scalar values"
eval = "a.yaml"
format = "yaml"
expected = '''
c: 3
d: 4
'''
files."a.yaml" = '''
$output: false
a: 1
b: 3
---
c:
  $merge: [{a: 1}, b]
d: 4
'''

[mergePathDot]
description = "Test merging with dot notation in path"
eval = "a.yaml"
format = "yaml"
expected = '''
d: 4
e: 3
'''
files."a.yaml" = '''
$output: false
a: 1
b:
  c.d:
    e: 3
---
d: 4
$merge:
  $match:
    a: 1
  $path: [b, c.d]
'''

[mergeScalarAsKey]
description = "Test merging using scalar value as key reference"
eval = "a.yaml"
format = "yaml"
expected = '''
foo: bar
zig: bar
'''
files."a.yaml" = '''
foo: bar
zig:
  $merge: foo
'''

[mergeStringDot]
description = "Test merging values when key contains dot"
eval = "a.yaml"
format = "yaml"
expected = '''
foo:
  c.d: bar
zig:
  b: 2
  zag: bar
'''
files."a.yaml" = '''
foo:
  c.d: bar
zig:
  b: 2
  zag: $merge:[foo,c.d]
'''

[mergeValueReference]
description = "Test using $merge within $value directive"
eval = "a.yaml"
format = "yaml"
expected = '''
a:
  b:
    c: 1
  d: "1"
'''
files."a.yaml" = '''
a:
  b:
    c: 1
  d:
    $value: ['$merge:a.b.c']
    $encode: join
'''

[interpRepeat]
description = "Test string interpolation with $repeat directive"
eval = "a.yaml"
format = "yaml"
expected = '''
a: foo-0
---
a: foo-1
'''
files."a.yaml" = '''
a: $"foo-{$repeat}"
$repeat: 2
'''

[parentNull]
description = "Test setting $parent to null to prevent inheritance"
eval = "a.b.yaml"
format = "yaml"
expected = '''
a: 1
'''
files."a.b.yaml" = '''
$parent: null
a: 1
'''

[matchEmptyMap]
description = "Test $match directive with empty map"
eval = "a.yaml"
format = "yaml"
expected = '''
a: {}
b: 2
'''
files."a.yaml" = '''
a: {}
---
$match:
  a: {}
b: 2
'''

[listDeletePartialMap]
description = "Test list deletion with partial map matching"
eval = "a.b.yaml"
format = "yaml"
expected = '''
- x: 1
- x: 3
'''
files."a.yaml" = '''
- x: 1
- x: 2
  z: 5
'''
files."a.b.yaml" = '''
- x: 3
- $delete:
    x: 2
'''

[listMatch]
description = "Test list matching and modification"
eval = "a.b.yaml"
format = "yaml"
expected = '''
- a: 1
- b: 10
'''
files."a.yaml" = '''
- a: 1
- b: 2
'''
files."a.b.yaml" = '''
- $match:
    b: 2
  b: 10
'''

[listMatchValue]
description = "Test list matching with value replacement"
eval = "a.b.yaml"
format = "yaml"
expected = '''
- 1
- 10
'''
files."a.yaml" = '''
- 1
- 2
'''
files."a.b.yaml" = '''
- $match: 2
  $value: 10
'''

[listReplaceTrue]
description = "Test list replacement with $replace: true"
eval = "a.b.yaml"
format = "yaml"
expected = '''
- 2
'''
files."a.yaml" = '''
- 1
'''
files."a.b.yaml" = '''
- 2
- $replace: true
'''

[mapMerge]
description = "Test simple map merging"
eval = "a.b.yaml"
format = "yaml"
expected = '''
a: 1
b: 2
'''
files."a.yaml" = '''
a: 1
'''
files."a.b.yaml" = '''
b: 2
'''

[matchInvert]
description = "Test $match with $invert directive"
eval = "a.b.yaml"
format = "yaml"
expected = '''
a: 1
c: 3
---
b: 2
'''
files."a.yaml" = '''
a: 1
---
b: 2
'''
files."a.b.yaml" = '''
$match:
  b: 2
  $invert: true
c: 3
'''

[matchListValue]
description = "Test $match in list with $value replacement"
eval = "a.b.yaml"
format = "yaml"
expected = '''
a:
  - b: 1
    d: 4
  - c: 2
'''
files."a.yaml" = '''
a:
  - b: 1
  - c: 2
'''
files."a.b.yaml" = '''
a:
  - $match:
      b: 1
    $value:
      d: 4
'''

[matchMultiDoc]
description = "Test $match applying to multiple documents"
eval = "a.b.yaml"
format = "yaml"
expected = '''
a: 1
b: 2
d: 4
---
a: 1
c: 3
d: 4
'''
files."a.yaml" = '''
a: 1
b: 2
---
a: 1
c: 3
'''
files."a.b.yaml" = '''
$match:
  a: 1
d: 4
'''

[matchPartial]
description = "Test $match with partial map matching"
eval = "a.b.yaml"
format = "yaml"
expected = '''
x:
  b: 1
  c: 2
  d: 3
'''
files."a.yaml" = '''
x:
  b: 1
  c: 2
'''
files."a.b.yaml" = '''
$match:
  x: {}
x:
  d: 3
'''

[mergeChainLayers]
description = "Test chained merge references across layers"
eval = "a.b.yaml"
format = "yaml"
expected = '''
a: 1
b: 1
c: 1
d: 1
'''
files."a.yaml" = '''
a: $required
b: $merge:a
d: $merge:c
'''
files."a.b.yaml" = '''
a: 1
c: $merge:b
'''

[mergeDeleteExisting]
description = "Test $delete directive behavior in merge"
eval = "a.b.yaml"
format = "yaml"
expected = '''
a: 1
b: 2
c: 3
'''
files."a.yaml" = '''
a: $delete
b: 2
'''
files."a.b.yaml" = '''
a: 1
c: 3
'''

[mergeListNil]
description = "Test null value overriding list"
eval = "a.b.yaml"
format = "yaml"
expected = '''
a: null
'''
files."a.yaml" = '''
a:
  - 1
  - 2
'''
files."a.b.yaml" = '''
a: null
'''

[mergeListString]
description = "Test string value overriding list"
eval = "a.b.yaml"
format = "yaml"
expected = '''
a: hello
'''
files."a.yaml" = '''
a:
  - 1
  - 2
'''
files."a.b.yaml" = '''
a: "hello"
'''

[mergeListWithNull]
description = "Test list merge preserving null values"
eval = "a.b.yaml"
format = "yaml"
expected = '''
x:
  - 1
  - null
  - 3
  - 4
  - null
'''
files."a.yaml" = '''
x:
  - 1
  - null
  - 3
'''
files."a.b.yaml" = '''
x:
  - 4
  - null
'''

[mergeMapNil]
description = "Test null value overriding map value"
eval = "a.b.yaml"
format = "yaml"
expected = '''
a: null
'''
files."a.yaml" = '''
a: 1
'''
files."a.b.yaml" = '''
a: null
'''

[replaceList]
description = "Test $replace directive replacing list contents"
eval = "a.yaml"
format = "yaml"
expected = '''
foo:
  bar:
    - a: 1
zig:
  - a: 1
'''
files."a.yaml" = '''
foo:
  bar:
    - a: 1
zig:
  - b: 2
  - $replace: foo.bar
'''

###############################################################################
# Type Handling and Format Tests
###############################################################################

[yamlTypes]
description = "Test YAML type handling and preservation"
eval = "a.yaml"
format = "yaml"
expected = '''
bool: true
float: 0.5
int: 42
"null": null
str: hello
timestamp: "2022-02-05T10:30:00.1Z"
'''
files."a.yaml" = '''
null: null
bool: true
str: hello
int: 42
float: 0.5
timestamp: 2022-02-05T10:30:00.1Z
'''

[jsonFloat]
description = "Test JSON float number handling"
eval = "a.json"
format = "json"
expected = '''
{"a":3.14,"b":12300000000}
'''
files."a.json" = '''
{"a": 3.14, "b": 1.23e10}
'''

[jsonlInput]
description = "Test JSONL input format"
eval = "a.jsonl"
format = "yaml"
expected = '''
a: 1
b: 2
---
c: 3
d: 4
'''
files."a.jsonl" = '''
{"a":1,"b":2}
{"c":3,"d":4}
'''

[jsonlOutput]
description = "Test JSONL output format"
eval = "a.yaml"
format = "jsonl"
expected = '''
{"a":1,"b":2}
{"c":3,"d":4}
'''
files."a.yaml" = '''
a: 1
b: 2
---
c: 3
d: 4
'''

###############################################################################
# More Output Control Tests
###############################################################################

[outputFalse]
description = "Test $output: false directive excludes content"
eval = "a.yaml"
format = "yaml"
expected = '''
c:
  d: 1
'''
files."a.yaml" = '''
a:
  $output: false
  b: 1
c:
  d: 1
'''

[outputFalseList]
description = "Test $output: false directive in list context"
eval = "a.yaml"
format = "yaml"
expected = '''
c:
  - d: 1
'''
files."a.yaml" = '''
a:
  - $output: false
  - b: 1
c:
  - d: 1
'''

[outputFalseRoot]
description = "Test $output: false directive at document root"
eval = "a.yaml"
format = "yaml"
expected = '''
a: 1
---
c: 3
'''
files."a.yaml" = '''
a: 1
---
b: 2
$output: false
---
c: 3
'''

[outputSingle]
description = "Test $output: true directive for single section"
eval = "a.yaml"
format = "yaml"
expected = '''
a: 1
b: 2
'''
files."a.yaml" = '''
foo:
  bar:
    $output: true
    a: 1
    b: 2
'''

[outputList]
description = "Test $output: true directive in list context"
eval = "a.yaml"
format = "yaml"
expected = '''
- a: 1
- b: 2
'''
files."a.yaml" = '''
foo:
  bar:
    - $output: true
    - a: 1
    - b: 2
'''

[outputMapInList]
description = "Test $output: true directive for map within list"
eval = "a.yaml"
format = "yaml"
expected = '''
c: 2
d: 3
'''
files."a.yaml" = '''
a:
  - b: 1
  - $output: true
    c: 2
    d: 3
'''

###############################################################################
# Merge Directive Tests
###############################################################################

[mergeChain]
description = "Test chained $merge operations"
eval = "a.yaml"
format = "yaml"
expected = '''
a: 1
b: 1
c: 4
d: 4
'''
files."a.yaml" = '''
a: 1
b: $merge:a
c: $merge:d
d: 4
'''

[mergeCrossDoc]
description = "Test $merge across YAML documents with $match"
eval = "a.yaml"
format = "yaml"
expected = '''
a: 1
b: 2
---
a: 1
b: 2
c: 3
'''
files."a.yaml" = '''
a: 1
b: 2
---
c: 3
$merge:
  $match:
    a: 1
'''

[mergeList]
description = "Test $merge with list values"
eval = "a.yaml"
format = "yaml"
expected = '''
foo:
  bar:
    - a: 1
zig:
  - b: 2
  - a: 1
'''
files."a.yaml" = '''
foo:
  bar:
    - a: 1
zig:
  - b: 2
  - $merge: foo.bar
'''

[mergeString]
description = "Test $merge with string values"
eval = "a.yaml"
format = "yaml"
expected = '''
foo: bar
zig:
  b: 2
  zag: bar
'''
files."a.yaml" = '''
foo: bar
zig:
  b: 2
  zag: $merge:foo
'''

[mergeCrossDocList]
description = "Test merging lists across documents with matching"
eval = "a.yaml"
format = "yaml"
expected = '''
- 2
- 3
---
- 1
- 2
- 3
'''
files."a.yaml" = '''
- 2
- 3
---
- 1
- $merge:
    $match:
      - 2
'''

[mergeCrossDocPath]
description = "Test merging with path selection across documents"
eval = "a.yaml"
format = "yaml"
expected = '''
c: 3
d: 4
'''
files."a.yaml" = '''
$output: false
a: 1
b:
  c: 3
---
d: 4
$merge:
  $match:
    a: 1
  $path: b
'''

[mergeCrossDocShort]
description = "Test short syntax for merge across documents"
eval = "a.yaml"
format = "yaml"
expected = '''
c: 3
d: 4
'''
files."a.yaml" = '''
$output: false
a: 1
b:
  c: 3
---
d: 4
$merge: [{a: 1}, b]
'''

[mergeListMulti]
description = "Test multiple merges within a list"
eval = "a.yaml"
format = "yaml"
expected = '''
foo:
  bar:
    - a: 1
  zag:
    - c: 3
zig:
  - b: 2
  - c: 3
  - a: 1
'''
files."a.yaml" = '''
foo:
  bar:
    - a: 1
  zag:
    - c: 3
zig:
  - b: 2
  - $merge: foo.zag
  - $merge: foo.bar
'''

[mergeNum]
description = "Test merging numeric values"
eval = "a.yaml"
format = "yaml"
expected = '''
foo: 1
zig:
  b: 2
  zag: 1
'''
files."a.yaml" = '''
foo: 1
zig:
  b: 2
  zag: $merge:foo
'''

[encodeTolist]
description = "Test tolist encoding with custom separator"
eval = "a.yaml"
format = "yaml"
expected = '''
- a=1
- b=2
- c
'''
files."a.yaml" = '''
a: 1
b: 2
c: ""
$encode: tolist:=
'''

[encodeValues]
description = "Test values encoding extracts map values"
eval = "a.yaml"
format = "yaml"
expected = '''
- 1
- 2
'''
files."a.yaml" = '''
a: 1
b: 2
$encode: values
'''

[encodePrefix]
description = "Test prefix encoding adds prefix to list items"
eval = "a.yaml"
format = "yaml"
expected = '''
- Xa
- X2
'''
files."a.yaml" = '''
- a
- 2
- $encode: prefix:X
'''

[encodeBase64Number]
description = "Test base64 encoding of numeric values"
eval = "a.yaml"
format = "yaml"
expected = '''
a: NDI=
'''
files."a.yaml" = '''
a:
  $value: 42 
  $encode: base64
'''

[encodeList]
description = "Test JSON encoding of list values"
eval = "a.yaml"
format = "yaml"
expected = '''
a: |
  [{"b":2},{"c":3}]
'''
files."a.yaml" = '''
a:
  - b: 2
  - c: 3
  - $encode: json
'''

[encodeMap]
description = "Test JSON encoding of map values"
eval = "a.yaml"
format = "yaml"
expected = '''
a: |
  {"b":2,"c":3}
'''
files."a.yaml" = '''
a:
  b: 2
  c: 3
  $encode: json
'''

[encodeJsonList]
description = "Test JSON encoding of list as multiline string"
eval = "a.yaml"
format = "yaml"
expected = '''
|
  [{"a":1},{"b":2}]
'''
files."a.yaml" = '''
- a: 1
- b: 2
- $encode: json
'''

[encodeFlags]
description = "Test flags encoding converts map to command-line flags"
eval = "a.yaml"
format = "yaml"
expected = '''
- --a=1
- --b=2
- --c
'''
files."a.yaml" = '''
a: 1
b: 2
c: ""
$encode: flags
'''

[encodeFlagsFlatten]
description = "Test flags encoding with flatten for mixed list content"
eval = "a.yaml"
format = "yaml"
expected = '''
- a
- b
- --c=3
- --d=4
- --e
- f
- g
'''
files."a.yaml" = '''
- - a
  - b
- c: 3
  d: 4
  e: ""
  $encode: flags
- f
- g
- $encode: flatten
'''

[encodeFlagsSublist]
description = "Test flags encoding with list values"
eval = "a.yaml"
format = "yaml"
expected = '''
- --a=1
- --b=2
- --b=c
- --b
'''
files."a.yaml" = '''
a: 1
b:
- 2
- c
- ""
$encode: flags
'''

[encodeMulti]
description = "Test multiple encoding directives (tolist and join)"
eval = "a.yaml"
format = "yaml"
expected = '''
a=1,b=2
'''
files."a.yaml" = '''
a: 1
b: 2
$encode: [tolist:=, "join:,"]
'''

[encodeSha256Number]
description = "Test SHA256 encoding of numeric values"
eval = "a.yaml"
format = "yaml"
expected = '''
a: 73475cb40a568e8da8a045ced110137e159f890ac4da883b6b17dc651b3a8049
'''
files."a.yaml" = '''
a:
  $value: 42
  $encode: sha256
'''

[encodeTolistLists]
description = "Test tolist encoding with list of maps"
eval = "a.yaml"
format = "yaml"
expected = '''
- a=1
- a=2
- b=3
'''
files."a.yaml" = '''
- a: 1
- a: 2
  b: 3
- $encode: tolist:=
'''

[encodeValue]
description = "Test JSON encoding of simple value"
eval = "a.yaml"
format = "yaml"
expected = '''
a: |
  "b"
'''
files."a.yaml" = '''
a:
  $value: b
  $encode: json
'''

[encodeValuesPrefix]
description = "Test values encoding with prefix field"
eval = "a.yaml"
format = "yaml"
expected = '''
- foo
- 1
- 2
'''
files."a.yaml" = '''
a: 1
b: 2
_prefix: foo
$encode: values
'''

[jsonInputStreamConcat]
description = "Test handling of concatenated JSON objects without newlines"
eval = "a.json"
format = "yaml"
expected = '''
a: 1
---
b: 2
'''
files."a.json" = '''
{"a": 1}{"b": 2}
'''

[jsonInputStreamNewline]
description = "Test handling of JSON objects separated by newlines (JSON Lines)"
eval = "a.json"
format = "yaml"
expected = '''
a: 1
---
b: 2
'''
files."a.json" = '''
{"a": 1}
{"b": 2}
'''

[jsonLargeInt]
description = "Test preservation of large integer values"
eval = "a.json"
format = "json"
expected = '''
{"a":9223372036854775807,"b":2147483648}
'''
files."a.json" = '''
{"a": 9223372036854775807, "b": 2147483648}
'''

[decodeValue]
description = "Test decode JSON with $value and $decode directives"
eval = "a.yaml"
format = "yaml"
expected = '''
a:
  b: 1
  c: 2
'''
files."a.yaml" = '''
a:
  $decode: json
  $value: '{"b": 1, "c": 2}'
'''

###############################################################################
# YAML and Miscellaneous Tests
###############################################################################

[yamlEmptyDoc]
description = "Test handling of empty YAML documents"
eval = "a.yaml"
format = "yaml"
expected = '''
foo: bar
---
---
- 1
'''
files."a.yaml" = '''
foo: bar
---
---
- 1
'''

[listWithNull]
description = "Test preservation of null values in lists"
eval = "a.yaml"
format = "yaml"
expected = '''
x:
  - a
  - null
  - c
  - null
  - e
'''
files."a.yaml" = '''
x: [a, null, c, null, e]
'''

[ordered]
description = "Test preservation of key order in YAML"
eval = "a.yaml"
format = "yaml"
expected = '''
b: 2
---
a: 1
'''
files."a.yaml" = '''
b: 2
---
a: 1
'''

[validateNonDirective]
description = "Test that variable-like strings are not treated as directives"
eval = "a.yaml"
format = "yaml"
expected = '''
a: $FOO
b: ${FOO}
c: $(FOO)
'''
files."a.yaml" = '''
a: $FOO
b: ${FOO}
c: $(FOO)
'''

[tomlInputStream]
description = "Test TOML input stream with standard delimiter"
eval = "a.toml"
format = "yaml"
expected = '''
a: 1
---
b: 2
'''
files."a.toml" = '''
a = 1
---
b = 2
'''

[tomlInputStreamHugo]
description = "Test TOML input stream with Hugo-style delimiter"
eval = "a.toml"
format = "yaml"
expected = '''
a: 1
---
b: 2
'''
files."a.toml" = '''
a = 1
+++
b = 2
'''

[outputTomlStream]
description = "Test YAML to TOML stream output conversion"
eval = "a.yaml"
format = "toml"
expected = '''
a = 1
---
b = 2
'''
files."a.yaml" = '''
a: 1
---
b: 2
'''

[outputAfterReplace]
description = "Test output control after replace operations"
eval = "a.yaml"
format = "yaml"
expected = '''
c: 2
'''
files."a.yaml" = '''
a:
  b: 2
  $output: false
c:
  $replace: a.b
'''

[outputTrueWithinFalse]
description = "Test nested output control (true within false)"
eval = "a.yaml"
format = "yaml"
expected = '''
b: 2
'''
files."a.yaml" = '''
$output: false
a:
  b: 2
  $output: true
'''