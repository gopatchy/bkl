###############################################################################
# Delete Operations ($delete)
###############################################################################

[listDeleteExtra]
description = "Test error when $delete has extra keys"
evaluate.errors = ["extra keys"]

[[listDeleteExtra.evaluate.inputs]]
filename = "a.yaml"
code = '''
- x: 1
- x: 2
'''

[[listDeleteExtra.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
- x: 3
- $delete:
    x: 2
  x: 4
'''

[mapDelete]
description = "Test map deletion with $delete directive"
evaluate.result.code = '''
a: 1
c: 3
'''

[[mapDelete.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
b: 2
'''

[[mapDelete.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
b: $delete
c: 3
'''

[mapDeleteNested]
description = "Test nested map deletion with $delete directive"
evaluate.result.code = '''
x:
  a: 1
  c: 3
'''

[[mapDeleteNested.evaluate.inputs]]
filename = "a.yaml"
code = '''
x:
  a: 1
  b: 2
'''

[[mapDeleteNested.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
x:
  b: $delete
  c: 3
'''

[listDelete]
description = "Test list deletion with $delete directive"

[listDelete.evaluate.result]
code = '''
[{"x":1},{"x":3}]
'''
languages = [[0, "json"]]

[[listDelete.evaluate.inputs]]
filename = "a.yaml"
code = '''
- x: 1
- x: 2
'''

[[listDelete.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
- x: 3
- $delete:
    x: 2
'''

[listDeletePartialList]
description = "Test partial list deletion with nested structures"

[listDeletePartialList.evaluate.result]
code = '''
[{"x":[{"a":1}]},{"x":[{"d":4}]}]
'''
languages = [[0, "json"]]

[[listDeletePartialList.evaluate.inputs]]
filename = "a.yaml"
code = '''
- x:
  - a: 1
- x:
  - b: 2
  - c: 3
'''

[[listDeletePartialList.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
- x:
  - d: 4
- $delete:
    x:
      - b: 2
'''

[listDeletePartialMap]
description = "Test list deletion with partial map matching"
evaluate.result.code = '''
- x: 1
- x: 3
'''

[[listDeletePartialMap.evaluate.inputs]]
filename = "a.yaml"
code = '''
- x: 1
- x: 2
  z: 5
'''

[[listDeletePartialMap.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
- x: 3
- $delete:
    x: 2
'''

[mergeDeleteExisting]
description = "Test $delete directive behavior in merge"
evaluate.result.code = '''
a: 1
b: 2
c: 3
'''

[[mergeDeleteExisting.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: $delete
b: 2
'''

[[mergeDeleteExisting.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
a: 1
c: 3
'''

###############################################################################
# Replace Operations ($replace)
###############################################################################

[listReplaceExtra]
description = "Test error when $replace has extra keys"
evaluate.errors = ["bool as reference: invalid type"]

[[listReplaceExtra.evaluate.inputs]]
filename = "a.yaml"
code = '''
- 1
'''

[[listReplaceExtra.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
- 2
- $replace: true
  a: 1
'''

[replaceCrossDocShortDot]
description = "Test error with invalid replace path reference"
evaluate.errors = ["reference not found"]

[[replaceCrossDocShortDot.evaluate.inputs]]
filename = "a.yaml"
code = '''
$output: false
a: 1
b:
  c:
    d: 4
---
e: 5
$replace: [{a: 1}, b.c]
'''

[mapReplace]
description = "Test map replacement with $replace directive"

[mapReplace.evaluate.result]
code = '''
{"b":2}
'''
languages = [[0, "json"]]

[[mapReplace.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
'''

[[mapReplace.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
b: 2
$replace: true
'''

[replaceMap]
description = "Test map replacement with $replace directive (path reference)"

[replaceMap.evaluate.result]
code = '''
{"foo":{"bar":{"a":1}},"zig":{"a":1}}
'''
languages = [[0, "json"]]

[[replaceMap.evaluate.inputs]]
filename = "a.yaml"
code = '''
foo:
  bar:
    a: 1
zig:
  b: 2
  $replace: foo.bar
'''

[listReplace]
description = "Test list replacement with $replace directive"

[listReplace.evaluate.result]
code = '''
[2]
'''
languages = [[0, "json"]]

[[listReplace.evaluate.inputs]]
filename = "a.yaml"
code = '''
- 1
'''

[[listReplace.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
- 2
- $replace
'''

[replaceCrossDoc]
description = "Test cross-document replacement with $replace"
evaluate.result.code = '''
a: 1
b: 2
---
a: 1
b: 2
'''

[[replaceCrossDoc.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
b: 2
---
c: 3
$replace:
  $match:
    a: 1
'''

[replaceCrossDocPath]
description = "Test cross-document replacement with path extraction"
evaluate.result.code = '''
c: 3
'''

[[replaceCrossDocPath.evaluate.inputs]]
filename = "a.yaml"
code = '''
$output: false
a: 1
b:
  c: 3
---
d: 4
$replace:
  $match:
    a: 1
  $path: b
'''

[replaceCrossDocString]
description = "Test cross-document replacement with string output"
evaluate.result.code = '''
foo
'''

[[replaceCrossDocString.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
b: foo
$output: false
---
c: 3
$replace:
  $match:
    a: 1
  $path: b
'''

[replaceString]
description = "Test string replacement using $replace directive"
evaluate.result.code = '''
foo: bar
zig:
  b: 2
  zag: bar
'''

[[replaceString.evaluate.inputs]]
filename = "a.yaml"
code = '''
foo: bar
zig:
  b: 2
  zag: $replace:foo
'''

[listReplaceTrue]
description = "Test list replacement with $replace: true"
evaluate.result.code = '''
- 2
'''

[[listReplaceTrue.evaluate.inputs]]
filename = "a.yaml"
code = '''
- 1
'''

[[listReplaceTrue.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
- 2
- $replace: true
'''

[replaceList]
description = "Test $replace directive replacing list contents"
evaluate.result.code = '''
foo:
  bar:
    - a: 1
zig:
  - a: 1
'''

[[replaceList.evaluate.inputs]]
filename = "a.yaml"
code = '''
foo:
  bar:
    - a: 1
zig:
  - b: 2
  - $replace: foo.bar
'''

###############################################################################
# Merge Operations ($merge)
###############################################################################

[mergeLoop]
description = "Test circular merge reference error"
evaluate.errors = ["circular reference"]

[[mergeLoop.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: $merge:b
b: $merge:a
'''

[mergeCrossDocShortDot]
description = "Test error with invalid merge path reference"
evaluate.errors = ["reference not found"]

[[mergeCrossDocShortDot.evaluate.inputs]]
filename = "a.yaml"
code = '''
$output: false
a: 1
b:
  c:
    d: 4
---
e: 5
$merge: [{a: 1}, b.c]
'''

[mergeDeleteMissingKey]
description = "Test error when deleting non-existent key"
evaluate.errors = ["useless override"]

[[mergeDeleteMissingKey.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
'''

[[mergeDeleteMissingKey.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
b: $delete
'''

[mergeMapDeleteUseless]
description = "Test error for useless delete operation"
evaluate.errors = ["useless override"]

[[mergeMapDeleteUseless.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
'''

[[mergeMapDeleteUseless.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
b: $delete
'''

[mergeMapUseless]
description = "Test error for redundant merge"
evaluate.errors = ["useless override"]

[[mergeMapUseless.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
'''

[[mergeMapUseless.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
a: 1
'''

[mergeMap]
description = "Test map merging with $merge directive"

[mergeMap.evaluate.result]
code = '''
{"foo":{"bar":{"a":1}},"zig":{"a":1,"b":2}}
'''
languages = [[0, "json"]]

[[mergeMap.evaluate.inputs]]
filename = "a.yaml"
code = '''
foo:
  bar:
    a: 1
zig:
  b: 2
  $merge: foo.bar
'''

[mergeCrossDocShortList]
description = "Test cross-document merging with lists"
evaluate.result.code = '''
- 2
- 3
---
- 1
- 2
- 3
'''

[[mergeCrossDocShortList.evaluate.inputs]]
filename = "a.yaml"
code = '''
- 2
- 3
---
- 1
- $merge: [[2]]
'''

[mergeCrossDocShortScalar]
description = "Test cross-document merging with scalar values"
evaluate.result.code = '''
c: 3
d: 4
'''

[[mergeCrossDocShortScalar.evaluate.inputs]]
filename = "a.yaml"
code = '''
$output: false
a: 1
b: 3
---
c:
  $merge: [{a: 1}, b]
d: 4
'''

[mergePathDot]
description = "Test merging with dot notation in path"
evaluate.result.code = '''
d: 4
e: 3
'''

[[mergePathDot.evaluate.inputs]]
filename = "a.yaml"
code = '''
$output: false
a: 1
b:
  c.d:
    e: 3
---
d: 4
$merge:
  $match:
    a: 1
  $path: [b, c.d]
'''

[mergeScalarAsKey]
description = "Test merging using scalar value as key reference"
evaluate.result.code = '''
foo: bar
zig: bar
'''

[[mergeScalarAsKey.evaluate.inputs]]
filename = "a.yaml"
code = '''
foo: bar
zig:
  $merge: foo
'''

[mergeStringDot]
description = "Test merging values when key contains dot"
evaluate.result.code = '''
foo:
  c.d: bar
zig:
  b: 2
  zag: bar
'''

[[mergeStringDot.evaluate.inputs]]
filename = "a.yaml"
code = '''
foo:
  c.d: bar
zig:
  b: 2
  zag: $merge:[foo,c.d]
'''

[mergeValueReference]
description = "Test using $merge within $value directive"
evaluate.result.code = '''
a:
  b:
    c: 1
  d: "1"
'''

[[mergeValueReference.evaluate.inputs]]
filename = "a.yaml"
code = '''
a:
  b:
    c: 1
  d:
    $value: ['$merge:a.b.c']
    $encode: join
'''

[mergeChainLayers]
description = "Test chained merge operations across layers"
evaluate.result.code = '''
a: 1
b: 2
c: 3
'''

[[mergeChainLayers.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
'''

[[mergeChainLayers.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
b: 2
'''

[[mergeChainLayers.evaluate.inputs]]
filename = "a.b.c.yaml"
code = '''
c: 3
'''

[mergeListNil]
description = "Test merging list with null value"
evaluate.result.code = '''
- 1
- 2
'''

[[mergeListNil.evaluate.inputs]]
filename = "a.yaml"
code = '''
~
'''

[[mergeListNil.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
- 1
- 2
'''

[mergeListString]
description = "Test merging string into list"
evaluate.result.code = '''
hello
'''

[[mergeListString.evaluate.inputs]]
filename = "a.yaml"
code = '''
- 1
- 2
'''

[[mergeListString.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
hello
'''

[mergeListWithNull]
description = "Test merging list containing null values"
evaluate.result.code = '''
- 1
- null
- 3
- 4
'''

[[mergeListWithNull.evaluate.inputs]]
filename = "a.yaml"
code = '''
- 1
- null
- 3
'''

[[mergeListWithNull.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
- 4
'''

[mergeMapNil]
description = "Test null value overriding map value"
evaluate.result.code = '''
a: null
'''

[[mergeMapNil.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
'''

[[mergeMapNil.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
a: null
'''

[mergeChain]
description = "Test chained $merge operations"
evaluate.result.code = '''
a: 1
b: 1
c: 4
d: 4
'''

[[mergeChain.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
b: $merge:a
c: $merge:d
d: 4
'''

[mergeCrossDoc]
description = "Test $merge across YAML documents with $match"
evaluate.result.code = '''
a: 1
b: 2
---
a: 1
b: 2
c: 3
'''

[[mergeCrossDoc.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
b: 2
---
c: 3
$merge:
  $match:
    a: 1
'''

[mergeCrossDocList]
description = "Test merging lists across documents with matching"
evaluate.result.code = '''
- 2
- 3
---
- 1
- 2
- 3
'''

[[mergeCrossDocList.evaluate.inputs]]
filename = "a.yaml"
code = '''
- 2
- 3
---
- 1
- $merge:
    $match:
      - 2
'''

[mergeCrossDocPath]
description = "Test merging with path selection across documents"
evaluate.result.code = '''
c: 3
d: 4
'''

[[mergeCrossDocPath.evaluate.inputs]]
filename = "a.yaml"
code = '''
$output: false
a: 1
b:
  c: 3
---
d: 4
$merge:
  $match:
    a: 1
  $path: b
'''

[mergeCrossDocShort]
description = "Test short syntax for merge across documents"
evaluate.result.code = '''
c: 3
d: 4
'''

[[mergeCrossDocShort.evaluate.inputs]]
filename = "a.yaml"
code = '''
$output: false
a: 1
b:
  c: 3
---
d: 4
$merge: [{a: 1}, b]
'''

[mergeList]
description = "Test $merge with list values"
evaluate.result.code = '''
foo:
  bar:
    - a: 1
zig:
  - b: 2
  - a: 1
'''

[[mergeList.evaluate.inputs]]
filename = "a.yaml"
code = '''
foo:
  bar:
    - a: 1
zig:
  - b: 2
  - $merge: foo.bar
'''

[mergeListMulti]
description = "Test multiple merges within a list"
evaluate.result.code = '''
foo:
  bar:
    - a: 1
  zag:
    - c: 3
zig:
  - b: 2
  - c: 3
  - a: 1
'''

[[mergeListMulti.evaluate.inputs]]
filename = "a.yaml"
code = '''
foo:
  bar:
    - a: 1
  zag:
    - c: 3
zig:
  - b: 2
  - $merge: foo.zag
  - $merge: foo.bar
'''

[mergeNum]
description = "Test merging numeric values"
evaluate.result.code = '''
foo: 1
zig:
  b: 2
  zag: 1
'''

[[mergeNum.evaluate.inputs]]
filename = "a.yaml"
code = '''
foo: 1
zig:
  b: 2
  zag: $merge:foo
'''

[mergeString]
description = "Test $merge with string values"
evaluate.result.code = '''
foo: bar
zig:
  b: 2
  zag: bar
'''

[[mergeString.evaluate.inputs]]
filename = "a.yaml"
code = '''
foo: bar
zig:
  b: 2
  zag: $merge:foo
'''

[mapMerge]
description = "Test simple map merging"
evaluate.result.code = '''
a: 1
b: 2
'''

[[mapMerge.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
'''

[[mapMerge.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
b: 2
'''

[mergeMapWithNil]
description = "Test merging null value into map"
evaluate.result.code = '''
x:
  a: 1
  b: 2
"y": null
z: null
'''

[[mergeMapWithNil.evaluate.inputs]]
filename = "a.yaml"
code = '''
x:
  a: 1
  b: 2
y: null
'''

[[mergeMapWithNil.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
z:
  $merge: y
  c: 3
'''

[mergeMapWithScalar]
description = "Test merging scalar value into map"
evaluate.result.code = '''
x:
  a: 1
  b: 2
"y": 10
z: 10
'''

[[mergeMapWithScalar.evaluate.inputs]]
filename = "a.yaml"
code = '''
x:
  a: 1
  b: 2
y: 10
'''

[[mergeMapWithScalar.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
z:
  $merge: y
  c: 3
'''

[mergeRace]
description = "Test merge with required fields resolution order"
evaluate.result.code = '''
a: 1
b: 1
c:
  a: 1
'''

[[mergeRace.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: $required
b: $merge:a
c:
  a: 1
'''

[[mergeRace.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
$merge: c
'''

[mergeStringIntoMapError]
description = "Test merging string value replaces map entirely"
evaluate.result.code = '''
a: string
'''

[[mergeStringIntoMapError.evaluate.inputs]]
filename = "a.yaml"
code = '''
a:
  b: 1
  c: 2
'''

[[mergeStringIntoMapError.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
a: "string"
'''

###############################################################################
# Match Operations ($match)
###############################################################################

[matchMulti]
description = "Test error with multiple matches in $replace"
evaluate.errors = ["multiple documents $match"]

[[matchMulti.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
b: 2
$output: false
---
a: 1
b: 3
$output: false
---
$replace:
  $match:
    a: 1
  $path: b
'''

[matchMap]
description = "Test $match directive for selective document processing"

[matchMap.evaluate.result]
code = '''
{"a":1,"d":4}
{"b":2,"c":3}
'''
languages = [[0, "jsonl"]]

[[matchMap.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
---
b: 2
'''

[[matchMap.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
$match:
  b: 2
c: 3
---
$match:
  a: 1
d: 4
'''

[matchEmptyMap]
description = "Test $match directive with empty map"
evaluate.result.code = '''
a: {}
b: 2
'''

[[matchEmptyMap.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: {}
---
$match:
  a: {}
b: 2
'''

[matchInvert]
description = "Test $match with $invert directive"
evaluate.result.code = '''
a: 1
c: 3
---
b: 2
'''

[[matchInvert.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
---
b: 2
'''

[[matchInvert.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
$match:
  b: 2
  $invert: true
c: 3
'''

[matchListValue]
description = "Test $match in list with $value replacement"
evaluate.result.code = '''
a:
  - b: 1
    d: 4
  - c: 2
'''

[[matchListValue.evaluate.inputs]]
filename = "a.yaml"
code = '''
a:
  - b: 1
  - c: 2
'''

[[matchListValue.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
a:
  - $match:
      b: 1
    $value:
      d: 4
'''

[matchMultiDoc]
description = "Test $match applying to multiple documents"
evaluate.result.code = '''
a: 1
b: 2
d: 4
---
a: 1
c: 3
d: 4
'''

[[matchMultiDoc.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
b: 2
---
a: 1
c: 3
'''

[[matchMultiDoc.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
$match:
  a: 1
d: 4
'''

[matchPartial]
description = "Test $match with partial map matching"
evaluate.result.code = '''
x:
  b: 1
  c: 2
  d: 3
'''

[[matchPartial.evaluate.inputs]]
filename = "a.yaml"
code = '''
x:
  b: 1
  c: 2
'''

[[matchPartial.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
$match:
  x: {}
x:
  d: 3
'''

[streamAdd]
description = "Test adding new document to stream"
evaluate.result.code = '''
a: 1
b: 2
---
c: 3
'''

[[streamAdd.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
b: 2
'''

[[streamAdd.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
$match: null
c: 3
'''

[streamMatchNull]
description = "Test stream with null matching"
evaluate.result.code = '''
a: 1
---
b: 2
---
c: 3
'''

[[streamMatchNull.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
---
b: 2
'''

[[streamMatchNull.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
$match: null
c: 3
'''

[matchesBasic]
description = "Test $matches directive with multiple patterns"
evaluate.result.code = '''
a: 1
c: 3
d: 4
---
b: 2
c: 3
d: 4
'''

[[matchesBasic.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
---
b: 2
'''

[[matchesBasic.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
$matches:
  - b: 2
  - a: 1
c: 3
d: 4
'''

[matchesSinglePattern]
description = "Test $matches with single pattern matching multiple docs"
evaluate.result.code = '''
a: 1
b: 2
d: 4
---
a: 1
c: 3
d: 4
'''

[[matchesSinglePattern.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
b: 2
---
a: 1
c: 3
'''

[[matchesSinglePattern.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
$matches:
  - a: 1
d: 4
'''

[matchesNoMatch]
description = "Test $matches error when pattern matches nothing"
evaluate.errors = ["no document/entry matched $match"]

[[matchesNoMatch.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
---
b: 2
'''

[[matchesNoMatch.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
$matches:
  - c: 3
d: 4
'''

[matchesListInList]
description = "Test $matches in list context"
evaluate.result.code = '''
items:
  - a: 1
    d: 4
  - b: 2
    d: 4
  - c: 3
'''

[[matchesListInList.evaluate.inputs]]
filename = "a.yaml"
code = '''
items:
  - a: 1
  - b: 2
  - c: 3
'''

[[matchesListInList.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
items:
  - $matches:
      - a: 1
      - b: 2
    d: 4
'''

[matchesWithReplace]
description = "Test $matches with $replace"
evaluate.result.code = '''
a: 1
x: replaced
---
b: 2
x: replaced
'''

[[matchesWithReplace.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
x: old
---
b: 2
x: old
'''

[[matchesWithReplace.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
$matches:
  - x: old
x: replaced
'''

[matchesPartialMap]
description = "Test $matches with partial map matching"
evaluate.result.code = '''
a:
  b: 1
  c: 2
e: new
---
d:
  b: 1
  c: 3
e: new
'''

[[matchesPartialMap.evaluate.inputs]]
filename = "a.yaml"
code = '''
a:
  b: 1
  c: 2
---
d:
  b: 1
  c: 3
'''

[[matchesPartialMap.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
$matches:
  - a: {}
  - d: {}
e: new
'''

[matchesInvalidType]
description = "Test $matches error with non-list value"
evaluate.errors = ["$matches must be a list"]

[[matchesInvalidType.evaluate.inputs]]
filename = "a.yaml"
code = '''
$matches: "not a list"
a: 1
'''

###############################################################################
# List Operations
###############################################################################

[listMerge]
description = "Test default list merge behavior (concatenation)"

[listMerge.evaluate.result]
code = '''
[1,2]
'''
languages = [[0, "json"]]

[[listMerge.evaluate.inputs]]
filename = "a.yaml"
code = '''
- 1
'''

[[listMerge.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
- 2
'''

[listMatch]
description = "Test list matching and modification"
evaluate.result.code = '''
- a: 1
- b: 10
'''

[[listMatch.evaluate.inputs]]
filename = "a.yaml"
code = '''
- a: 1
- b: 2
'''

[[listMatch.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
- $match:
    b: 2
  b: 10
'''

[listMatchValue]
description = "Test list matching with value replacement"
evaluate.result.code = '''
- 1
- 10
'''

[[listMatchValue.evaluate.inputs]]
filename = "a.yaml"
code = '''
- 1
- 2
'''

[[listMatchValue.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
- $match: 2
  $value: 10
'''

[listWithNull]
description = "Test preservation of null values in lists"
evaluate.result.code = '''
x:
  - a
  - null
  - c
  - null
  - e
'''

[[listWithNull.evaluate.inputs]]
filename = "a.yaml"
code = '''
x: [a, null, c, null, e]
'''

[listMatchValueMulti]
description = "Test list matching and replacement with multiple matches"
evaluate.result.code = '''
- 1
- 10
- 10
'''

[[listMatchValueMulti.evaluate.inputs]]
filename = "a.yaml"
code = '''
- 1
- 2
- 2
'''

[[listMatchValueMulti.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
- $match: 2
  $value: 10
'''

###############################################################################
# Encoding Operations ($encode)
###############################################################################

[encodeFlagsRequired]
description = "Test error when required field is missing in flags encoding"
evaluate.errors = ["required field not set"]

[[encodeFlagsRequired.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: $required
$encode: flags
'''

[encodeTolist]
description = "Test tolist encoding with custom separator"
evaluate.result.code = '''
- a=1
- b=2
- c
'''

[[encodeTolist.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
b: 2
c: ""
$encode: tolist:=
'''

[encodeValues]
description = "Test values encoding extracts map values"
evaluate.result.code = '''
- 1
- 2
'''

[[encodeValues.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
b: 2
$encode: values
'''

[encodeValuesWithName]
description = "Test values encoding with name parameter"
evaluate.result.code = '''
- k2: v2
  name: k1
- k4: v4
  name: k3
'''

[[encodeValuesWithName.evaluate.inputs]]
filename = "a.yaml"
code = '''
k1:
  k2: v2
k3:
  k4: v4
$encode: values:name
'''

[encodeValuesWithNameScalar]
description = "Test values encoding with name parameter for scalar values"
evaluate.errors = ["invalid type"]

[[encodeValuesWithNameScalar.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
b: 2
$encode: values:name
'''

[encodeValuesNestedPath]
description = "Test values encoding sets key at nested path"
evaluate.result.code = '''
- foo:
    bar: item1
  other: 1
- foo:
    bar: item2
  other: 2
'''

[[encodeValuesNestedPath.evaluate.inputs]]
filename = "a.yaml"
code = '''
item1:
  foo:
    bar: 1
  other: 1
item2:
  foo:
    bar: 2
  other: 2
$encode: values:foo.bar
'''

[encodeValuesNestedPathMissing]
description = "Test values encoding sets key at nested path creating intermediate maps"
evaluate.result.code = '''
- foo:
    bar: item1
- foo:
    bar: item2
  other: 2
'''

[[encodeValuesNestedPathMissing.evaluate.inputs]]
filename = "a.yaml"
code = '''
item1:
  foo:
    bar: 1
item2:
  other: 2
$encode: values:foo.bar
'''

[encodeValuesDeepNestedPath]
description = "Test values encoding sets key at deep nested path"
evaluate.result.code = '''
- a:
    b:
      c:
        d: item1
- a:
    b:
      c:
        d: item2
'''

[[encodeValuesDeepNestedPath.evaluate.inputs]]
filename = "a.yaml"
code = '''
item1:
  a:
    b:
      c:
        d: 1
item2:
  a:
    b:
      c:
        d: 2
$encode: values:a.b.c.d
'''

[encodePrefix]
description = "Test prefix encoding adds prefix to list items"
evaluate.result.code = '''
- Xa
- X2
'''

[[encodePrefix.evaluate.inputs]]
filename = "a.yaml"
code = '''
- a
- 2
- $encode: prefix:X
'''

[encodeBase64Number]
description = "Test base64 encoding of numeric values"
evaluate.result.code = '''
a: NDI=
'''

[[encodeBase64Number.evaluate.inputs]]
filename = "a.yaml"
code = '''
a:
  $value: 42 
  $encode: base64
'''

[encodeList]
description = "Test JSON encoding of list values"
evaluate.result.code = '''
a: |
  [{"b":2},{"c":3}]
'''

[[encodeList.evaluate.inputs]]
filename = "a.yaml"
code = '''
a:
  - b: 2
  - c: 3
  - $encode: json
'''

[encodeMap]
description = "Test JSON encoding of map values"
evaluate.result.code = '''
a: |
  {"b":2,"c":3}
'''

[[encodeMap.evaluate.inputs]]
filename = "a.yaml"
code = '''
a:
  b: 2
  c: 3
  $encode: json
'''

[encodeJsonList]
description = "Test JSON encoding of list as multiline string"
evaluate.result.code = '''
|
  [{"a":1},{"b":2}]
'''

[[encodeJsonList.evaluate.inputs]]
filename = "a.yaml"
code = '''
- a: 1
- b: 2
- $encode: json
'''

[encodeFlags]
description = "Test flags encoding converts map to command-line flags"
evaluate.result.code = '''
- --a=1
- --b=2
- --c
'''

[[encodeFlags.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
b: 2
c: ""
$encode: flags
'''

[encodeFlagsFlatten]
description = "Test flags encoding with flatten for mixed list content"
evaluate.result.code = '''
- a
- b
- --c=3
- --d=4
- --e
- f
- g
'''

[[encodeFlagsFlatten.evaluate.inputs]]
filename = "a.yaml"
code = '''
- - a
  - b
- c: 3
  d: 4
  e: ""
  $encode: flags
- f
- g
- $encode: flatten
'''

[encodeFlagsFlattenLayer]
description = "Test flags and flatten encoding across file inheritance layers"
evaluate.result.code = '''
- a
- --b=2
- --c=3
'''

[[encodeFlagsFlattenLayer.evaluate.inputs]]
filename = "a.yaml"
code = '''
- - a
- b: 2
  $encode: flags
- $encode: flatten
'''

[[encodeFlagsFlattenLayer.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
- $match: {}
  c: 3
'''

[encodeFlagsSublist]
description = "Test flags encoding with list values"
evaluate.result.code = '''
- --a=1
- --b=2
- --b=c
- --b
'''

[[encodeFlagsSublist.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
b:
- 2
- c
- ""
$encode: flags
'''

[encodeMulti]
description = "Test multiple encoding directives (tolist and join)"
evaluate.result.code = '''
a=1,b=2
'''

[[encodeMulti.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
b: 2
$encode: [tolist:=, "join:,"]
'''

[encodeSha256Number]
description = "Test SHA256 encoding of numeric values"
evaluate.result.code = '''
a: 73475cb40a568e8da8a045ced110137e159f890ac4da883b6b17dc651b3a8049
'''

[[encodeSha256Number.evaluate.inputs]]
filename = "a.yaml"
code = '''
a:
  $value: 42
  $encode: sha256
'''

[encodeTolistLists]
description = "Test tolist encoding with list of maps"
evaluate.result.code = '''
- a=1
- a=2
- b=3
'''

[[encodeTolistLists.evaluate.inputs]]
filename = "a.yaml"
code = '''
- a: 1
- a: 2
  b: 3
- $encode: tolist:=
'''

[encodeValue]
description = "Test JSON encoding of simple value"
evaluate.result.code = '''
a: |
  "b"
'''

[[encodeValue.evaluate.inputs]]
filename = "a.yaml"
code = '''
a:
  $value: b
  $encode: json
'''

[encodeValuesPrefix]
description = "Test values encoding with prefix field"
evaluate.result.code = '''
- foo
- 1
- 2
'''

[[encodeValuesPrefix.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
b: 2
_prefix: foo
$encode: values
'''

[encodeValuesNameValue]
description = "Test values encoding with name:value format"
evaluate.result.code = '''
- name: a
  value: 1
- name: b
  value: 2
'''

[[encodeValuesNameValue.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
b: 2
$encode: values:name:value
'''

[encodeValuesNameValueNested]
description = "Test values encoding with nested paths for name:value format"
evaluate.result.code = '''
- metadata:
    name: a
  spec:
    value: 1
- metadata:
    name: b
  spec:
    value: 2
'''

[[encodeValuesNameValueNested.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
b: 2
$encode: values:metadata.name:spec.value
'''

[encodeValuesOnlyValue]
description = "Encode values with only value key using double colon"
evaluate.result.code = '''
- containerPort: 8080
- containerPort: 8081
'''

[[encodeValuesOnlyValue.evaluate.inputs]]
filename = "test.yaml"
code = '''
api: 8080
web: 8081
$encode: values::containerPort
'''

[encodeBase64]
description = "Test base64 encoding with $encode directive"
evaluate.result.code = '''
YQ==
'''

[[encodeBase64.evaluate.inputs]]
filename = "a.yaml"
code = '''
$value: a
$encode: base64
'''

[encodeJson]
description = "Test JSON encoding with $encode directive"
evaluate.result.code = '''
|
  {"a":1,"b":2}
'''

[[encodeJson.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
b: 2
$encode: json
'''

[encodeProperties]
description = "Test properties encoding with $encode directive"
evaluate.result.code = '''
|
  a=1
  b=2
  nested.x=hello
  nested.y=world
'''

[[encodeProperties.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
b: 2
nested:
  x: hello
  y: world
$encode: properties
'''

[encodeSha256]
description = "Test SHA-256 encoding with $encode directive"
evaluate.result.code = '''
ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb
'''

[[encodeSha256.evaluate.inputs]]
filename = "a.yaml"
code = '''
$value: a
$encode: sha256
'''

[encodeFlatten]
description = "Test flatten encoding with $encode directive"
evaluate.result.code = '''
- a
- b
- c
- d
- e
'''

[[encodeFlatten.evaluate.inputs]]
filename = "a.yaml"
code = '''
- - a
  - b
- - c
  - d
- e
- $encode: flatten
'''

[encodeJoin]
description = "Test join encoding with $encode directive"
evaluate.result.code = '''
a24b
'''

[[encodeJoin.evaluate.inputs]]
filename = "a.yaml"
code = '''
$value: [a, 24, b]
$encode: join
'''

###############################################################################
# Decoding Operations ($decode)
###############################################################################

[decodeValue]
description = "Test decode JSON with $value and $decode directives"
evaluate.result.code = '''
a:
  b: 1
  c: 2
'''

[[decodeValue.evaluate.inputs]]
filename = "a.yaml"
code = '''
a:
  $decode: json
  $value: '{"b": 1, "c": 2}'
'''

[decodeJson]
description = "Test JSON decoding with $decode directive"
evaluate.result.code = '''
a:
  foo: bar
'''

[[decodeJson.evaluate.inputs]]
filename = "a.yaml"
code = '''
a:
  $value: |
    {"foo":"bar"}
  $decode: json
'''

[decodeProperties]
description = "Test properties decoding with $decode directive"
evaluate.result.code = '''
config:
  app:
    name: myapp
    version: "1.0"
  db:
    host: localhost
    port: "5432"
'''

[[decodeProperties.evaluate.inputs]]
filename = "a.yaml"
code = '''
config:
  $value: |
    app.name=myapp
    app.version=1.0
    db.host=localhost
    db.port=5432
  $decode: properties
'''

###############################################################################
# String Interpolation
###############################################################################

[interpSimple]
description = "Test basic string interpolation"
evaluate.result.code = '''
a: 1
b: foo
c:
  d: zig
e: foo bar zig zag 1 2
'''

[[interpSimple.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
b: foo
c:
  d: zig
e: $"{b} bar {c.d} zag {a} 2"
'''

[interpKey]
description = "Test interpolation in map keys"
evaluate.result.code = '''
a: foo
foo0: bar
'''

[[interpKey.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: foo
$"{a}0": bar
'''

[interpInterp]
description = "Test chained interpolation"
evaluate.result.code = '''
a: foo
b: foo
c: foo
'''

[[interpInterp.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: foo
b: $"{a}"
c: $"{b}"
'''

[interpRepeat]
description = "Test string interpolation with $repeat directive"
evaluate.result.code = '''
a: foo-0
---
a: foo-1
'''

[[interpRepeat.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: $"foo-{$repeat}"
$repeat: 2
'''

###############################################################################
# Repeat Operations ($repeat)
###############################################################################

[repeatDocList]
description = "Test $repeat directive with list documents"
evaluate.result.code = '''
- b: 2
- c: 0
---
- b: 2
- c: 1
'''

[[repeatDocList.evaluate.inputs]]
filename = "a.yaml"
code = '''
- $repeat: 2
- b: 2
- c: $repeat
'''

[repeatDocMap]
description = "Test $repeat directive with map documents"
evaluate.result.code = '''
a:
  b: 2
  c: 0
---
a:
  b: 2
  c: 1
'''

[[repeatDocMap.evaluate.inputs]]
filename = "a.yaml"
code = '''
$repeat: 2
a:
  b: 2
  c: $repeat
'''

[repeatListValues]
description = "Test $repeat directive with list of values"
evaluate.result.code = '''
fruit: apple
---
fruit: banana
---
fruit: cherry
'''

[[repeatListValues.evaluate.inputs]]
filename = "a.yaml"
code = '''
$repeat: ["apple", "banana", "cherry"]
fruit: $repeat
'''

[repeatInsideList]
description = "Test $repeat directive expanding items within a list"
evaluate.result.code = '''
a:
  - b: 0
  - b: 1
  - b: 2
  - b: 3
'''

[[repeatInsideList.evaluate.inputs]]
filename = "a.yaml"
code = '''
a:
  - $repeat: 4
    b: $repeat
'''

[repeatInsideMap]
description = "Test $repeat with dynamic key generation in maps"
evaluate.result.code = '''
a:
  b0:
    c: 0
  b1:
    c: 1
  b2:
    c: 2
  b3:
    c: 3
'''

[[repeatInsideMap.evaluate.inputs]]
filename = "a.yaml"
code = '''
a:
  $"b{$repeat}":
    $repeat: 4
    c: $repeat
'''

[repeatMap]
description = "Test multi-dimensional repeat with string interpolation"
evaluate.result.code = '''
a: x=0 y=0 xc=2 yc=3
b: 2
c: 3
---
a: x=0 y=1 xc=2 yc=3
b: 2
c: 3
---
a: x=0 y=2 xc=2 yc=3
b: 2
c: 3
---
a: x=1 y=0 xc=2 yc=3
b: 2
c: 3
---
a: x=1 y=1 xc=2 yc=3
b: 2
c: 3
---
a: x=1 y=2 xc=2 yc=3
b: 2
c: 3
'''

[[repeatMap.evaluate.inputs]]
filename = "a.yaml"
code = '''
$repeat:
  x: 2
  y: 3
a: $"x={$repeat:x} y={$repeat:y} xc={$repeat.x} yc={$repeat.y}"
b: $merge:$repeat.x
c: $merge:$repeat.y
'''

[repeatInsideMapValue]
description = "Test $repeat with simple values in map"
evaluate.result.code = '''
a:
  b0: 2
  b1: 2
  b2: 2
  b3: 2
'''

[[repeatInsideMapValue.evaluate.inputs]]
filename = "a.yaml"
code = '''
a:
  $"b{$repeat}":
    $repeat: 4
    $value: 2
'''

[repeatListInsideList]
description = "Test $repeat with list creating multiple list items"
evaluate.result.code = '''
fruits:
  - name: apple
  - name: banana
  - name: cherry
'''

[[repeatListInsideList.evaluate.inputs]]
filename = "a.yaml"
code = '''
fruits:
  - name: $repeat
    $repeat: ["apple", "banana", "cherry"]
'''

[repeatListInsideMap]
description = "Test $repeat with list creating multiple map entries"
evaluate.result.code = '''
fruits:
  item-apple:
    name: apple
  item-banana:
    name: banana
  item-cherry:
    name: cherry
'''

[[repeatListInsideMap.evaluate.inputs]]
filename = "a.yaml"
code = '''
fruits:
  $"item-{$repeat}":
    name: $repeat
    $repeat: ["apple", "banana", "cherry"]
'''

[repeatListMixedTypes]
description = "Test $repeat with mixed data types creating documents"
evaluate.result.code = '''
type: Type is 42
value: 42
---
type: Type is hello
value: hello
---
type: Type is true
value: true
---
type: Type is 3.14
value: 3.14
'''

[[repeatListMixedTypes.evaluate.inputs]]
filename = "a.yaml"
code = '''
$repeat: [42, "hello", true, 3.14]
value: $repeat
type: $"Type is {$repeat}"
'''

[repeatMapInsideMap]
description = "Test $repeat with map creating cartesian product"
evaluate.result.code = '''
servers:
  server-dev-0:
    env: dev
    id: 0
  server-dev-1:
    env: dev
    id: 1
  server-prod-0:
    env: prod
    id: 0
  server-prod-1:
    env: prod
    id: 1
'''

[[repeatMapInsideMap.evaluate.inputs]]
filename = "a.yaml"
code = '''
servers:
  $"server-{$repeat:env}-{$repeat:id}":
    env: $repeat:env
    id: $repeat:id
    $repeat: {env: ["dev", "prod"], id: 2}
'''

[repeatRangeFirstLast]
description = "Test $repeat with $first and $last range parameters"
evaluate.result.code = '''
a: 5
---
a: 6
---
a: 7
---
a: 8
---
a: 9
---
a: 10
'''

[[repeatRangeFirstLast.evaluate.inputs]]
filename = "a.yaml"
code = '''
$repeat:
  $first: 5
  $last: 10
a: $repeat
'''

[repeatRangeInsideMap]
description = "Test $repeat with range parameters inside map"
evaluate.result.code = '''
ports:
  port-8080:
    number: 8080
  port-8081:
    number: 8081
  port-8082:
    number: 8082
'''

[[repeatRangeInsideMap.evaluate.inputs]]
filename = "a.yaml"
code = '''
ports:
  $"port-{$repeat}":
    number: $repeat
    $repeat: {$first: 8080, $count: 3}
'''

[repeatRangeNested]
description = "Test nested $repeat with range parameters"
evaluate.result.code = '''
result: a=0 b=10
---
result: a=0 b=12
---
result: a=0 b=14
---
result: a=1 b=10
---
result: a=1 b=12
---
result: a=1 b=14
'''

[[repeatRangeNested.evaluate.inputs]]
filename = "a.yaml"
code = '''
$repeat:
  a: 2
  b:
    $first: 10
    $step: 2
    $count: 3
result: $"a={$repeat:a} b={$repeat:b}"
'''

[repeatSubstValue]
description = "Test $repeat with $merge directive"
evaluate.result.code = '''
a: 0
b: 2
---
a: 1
b: 2
'''

[[repeatSubstValue.evaluate.inputs]]
filename = "a.yaml"
code = '''
$repeat: 2
a: $repeat
b: $merge:$repeat
'''

[repeatMapLayer]
description = "Test $repeat directive overriding in child layer"
evaluate.result.code = '''
a: x=0
---
a: x=1
---
a: x=2
'''

[[repeatMapLayer.evaluate.inputs]]
filename = "a.yaml"
code = '''
$repeat:
  x: 2
a: $"x={$repeat:x}"
'''

[[repeatMapLayer.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
$repeat:
  x: 3
'''

[repeatOverride]
description = "Test $repeat values propagating through inheritance"
evaluate.result.code = '''
a: x=0 y=0 z=0
---
a: x=0 y=0 z=1
---
a: x=0 y=0 z=2
---
a: x=0 y=1 z=0
---
a: x=0 y=1 z=1
---
a: x=0 y=1 z=2
---
a: x=1 y=0 z=0
---
a: x=1 y=0 z=1
---
a: x=1 y=0 z=2
---
a: x=1 y=1 z=0
---
a: x=1 y=1 z=1
---
a: x=1 y=1 z=2
'''

[[repeatOverride.evaluate.inputs]]
filename = "a.yaml"
code = '''
$repeat:
  x: 2
  y: 2
  z: 2
a: $"x={$repeat:x} y={$repeat:y} z={$repeat:z}"
'''

[[repeatOverride.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
$repeat:
  z: 3
'''

[[repeatOverride.evaluate.inputs]]
filename = "a.b.c.yaml"
code = '''
# No content - relies on inheritance
'''

[repeatUpperLayer]
description = "Test $repeat in upper layer file"
evaluate.result.code = '''
a: base
b: x=0
---
a: base
b: x=1
---
a: base
b: x=2
'''

[[repeatUpperLayer.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: base
'''

[[repeatUpperLayer.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
$repeat:
  x: 3
b: $"x={$repeat:x}"
'''

# Repeat range parameter error cases
[repeatStepZero]
description = "Test $repeat with $step=0 error"
evaluate.errors = ["$step cannot be 0"]

[[repeatStepZero.evaluate.inputs]]
filename = "a.yaml"
code = '''
$repeat:
  $first: 1
  $last: 5
  $step: 0
x: $repeat
'''

[repeatCountNegative]
description = "Test $repeat with negative $count error"
evaluate.errors = ["must be positive"]

[[repeatCountNegative.evaluate.inputs]]
filename = "a.yaml"
code = '''
$repeat:
  $first: 1
  $count: -1
x: $repeat
'''

[repeatAllThreeParams]
description = "Test $repeat with all three params error"
evaluate.errors = ["cannot specify all of"]

[[repeatAllThreeParams.evaluate.inputs]]
filename = "a.yaml"
code = '''
$repeat:
  $first: 1
  $last: 5
  $count: 3
x: $repeat
'''

[repeatNotDivisible]
description = "Test $repeat with non-divisible range error"
evaluate.errors = ["must be divisible by"]

[[repeatNotDivisible.evaluate.inputs]]
filename = "a.yaml"
code = '''
$repeat:
  $first: 1
  $last: 11
  $step: 3
x: $repeat
'''

[repeatMissingParams]
description = "Test $repeat with only one parameter error"
evaluate.errors = ["must specify exactly 2"]

[[repeatMissingParams.evaluate.inputs]]
filename = "a.yaml"
code = '''
$repeat:
  $first: 1
x: $repeat
'''

[repeatSubst]
description = "Test $repeat with $match directive"
evaluate.result.code = '''
a: 1
b: 2
c:
  d: foo-0
'''

[[repeatSubst.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
b: 2
'''

[[repeatSubst.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
$match:
  a: 1
$repeat: 1
c:
  d: $"foo-{$repeat}"
'''

###############################################################################
# Output Control ($output)
###############################################################################

[outputMulti]
description = "Test $output directive for selective output"
evaluate.result.code = '''
a: 1
b: 2
---
c: 3
'''

[[outputMulti.evaluate.inputs]]
filename = "a.yaml"
code = '''
foo:
  bar:
    $output: true
    a: 1
    b: 2
  zig:
    $output: true
    c: 3
'''

[outputFalse]
description = "Test $output: false directive excludes content"
evaluate.result.code = '''
c:
  d: 1
'''

[[outputFalse.evaluate.inputs]]
filename = "a.yaml"
code = '''
a:
  $output: false
  b: 1
c:
  d: 1
'''

[outputFalseList]
description = "Test $output: false directive in list context"
evaluate.result.code = '''
c:
  - d: 1
'''

[[outputFalseList.evaluate.inputs]]
filename = "a.yaml"
code = '''
a:
  - $output: false
  - b: 1
c:
  - d: 1
'''

[outputFalseRoot]
description = "Test $output: false directive at document root"
evaluate.result.code = '''
a: 1
---
c: 3
'''

[[outputFalseRoot.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
---
b: 2
$output: false
---
c: 3
'''

[outputSingle]
description = "Test $output: true directive for single section"
evaluate.result.code = '''
a: 1
b: 2
'''

[[outputSingle.evaluate.inputs]]
filename = "a.yaml"
code = '''
foo:
  bar:
    $output: true
    a: 1
    b: 2
'''

[outputList]
description = "Test $output: true directive in list context"
evaluate.result.code = '''
- a: 1
- b: 2
'''

[[outputList.evaluate.inputs]]
filename = "a.yaml"
code = '''
foo:
  bar:
    - $output: true
    - a: 1
    - b: 2
'''

[outputMapInList]
description = "Test $output: true directive for map within list"
evaluate.result.code = '''
c: 2
d: 3
'''

[[outputMapInList.evaluate.inputs]]
filename = "a.yaml"
code = '''
a:
  - b: 1
  - $output: true
    c: 2
    d: 3
'''

[outputAfterReplace]
description = "Test output control after replace operations"
evaluate.result.code = '''
c: 2
'''

[[outputAfterReplace.evaluate.inputs]]
filename = "a.yaml"
code = '''
a:
  b: 2
  $output: false
c:
  $replace: a.b
'''

[outputTrueWithinFalse]
description = "Test nested output control (true within false)"
evaluate.result.code = '''
b: 2
'''

[[outputTrueWithinFalse.evaluate.inputs]]
filename = "a.yaml"
code = '''
$output: false
a:
  b: 2
  $output: true
'''

###############################################################################
# Parent and Inheritance ($parent)
###############################################################################

[parentCircular]
description = "Test circular parent reference error"
evaluate.errors = ["circular reference"]

[[parentCircular.evaluate.inputs]]
filename = "a.yaml"
code = '''
# Test that circular parent references are handled gracefully
# a.yaml → b.yaml → a.yaml (circular)

$parent: b
data: "from a.yaml"
'''

[[parentCircular.evaluate.inputs]]
filename = "b.yaml"
code = '''
# This creates a circular reference back to a.yaml
# b.yaml → a.yaml → b.yaml (circular)
$parent: a
data: "from b.yaml"
'''

[parentSet]
description = "Test $parent directive for explicit parent file reference"
evaluate.result.code = '''
a: 1
b: 2
'''

[[parentSet.evaluate.inputs]]
filename = "c.yaml"
code = '''
b: 2
'''

[[parentSet.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
$parent: c
a: 1
'''

[parentNull]
description = "Test setting $parent to null to prevent inheritance"
evaluate.result.code = '''
a: 1
'''

[[parentNull.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
$parent: null
a: 1
'''

[parentFalse]
description = "Test $parent: false disables inheritance"
evaluate.result.code = '''
a: 1
'''

[[parentFalse.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
$parent: false
a: 1
'''

[parentMulti]
description = "Test multiple documents with different parents"
evaluate.result.code = '''
a: 1
c: 3
---
b: 2
d: 4
'''

[[parentMulti.evaluate.inputs]]
filename = "c.yaml"
code = '''
c: 3
'''

[[parentMulti.evaluate.inputs]]
filename = "d.yaml"
code = '''
$match: null
d: 4
'''

[[parentMulti.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
$parent: c
$match:
  c: 3
a: 1
---
$parent: d
$match:
  d: 4
b: 2
'''

[parentMultiList]
description = "Test parent directive with list of parents"
evaluate.result.code = '''
a: 1
c: 3
---
b: 2
d: 4
'''

[[parentMultiList.evaluate.inputs]]
filename = "c.yaml"
code = '''
c: 3
'''

[[parentMultiList.evaluate.inputs]]
filename = "d.yaml"
code = '''
d: 4
'''

[[parentMultiList.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
$parent:
  - c
  - d
$match:
  c: 3
a: 1
---
$match:
  d: 4
b: 2
'''

[parentFalseToml]
description = "Test $parent: false in TOML format"
evaluate.result.code = '''
a = 1
'''

[[parentFalseToml.evaluate.inputs]]
filename = "a.toml"
code = '''
a = 2
b = 3
'''

[[parentFalseToml.evaluate.inputs]]
filename = "a.b.toml"
code = '''
"$parent" = false
a = 1
'''

###############################################################################
# Format Support and Type Handling
###############################################################################

[jsonInputStreamConcat]
description = "Test handling of concatenated JSON objects without newlines"

[jsonInputStreamConcat.evaluate.result]
code = '''
a: 1
---
b: 2
'''
languages = [[0, "yaml"]]

[[jsonInputStreamConcat.evaluate.inputs]]
filename = "a.json"
code = '''
{"a": 1}{"b": 2}
'''

[jsonInputStreamNewline]
description = "Test handling of JSON objects separated by newlines (JSON Lines)"

[jsonInputStreamNewline.evaluate.result]
code = '''
a: 1
---
b: 2
'''
languages = [[0, "yaml"]]

[[jsonInputStreamNewline.evaluate.inputs]]
filename = "a.json"
code = '''
{"a": 1}
{"b": 2}
'''

[jsonLargeInt]
description = "Test preservation of large integer values"
evaluate.result.code = '''
{"a":9223372036854775807,"b":2147483648}
'''

[[jsonLargeInt.evaluate.inputs]]
filename = "a.json"
code = '''
{"a": 9223372036854775807, "b": 2147483648}
'''

[tomlInputStream]
description = "Test TOML input stream with standard delimiter"

[tomlInputStream.evaluate.result]
code = '''
a: 1
---
b: 2
'''
languages = [[0, "yaml"]]

[[tomlInputStream.evaluate.inputs]]
filename = "a.toml"
code = '''
a = 1
---
b = 2
'''

[tomlInputStreamHugo]
description = "Test TOML input stream with Hugo-style delimiter"

[tomlInputStreamHugo.evaluate.result]
code = '''
a: 1
---
b: 2
'''
languages = [[0, "yaml"]]

[[tomlInputStreamHugo.evaluate.inputs]]
filename = "a.toml"
code = '''
a = 1
+++
b = 2
'''

[outputTomlStream]
description = "Test YAML to TOML stream output conversion"

[outputTomlStream.evaluate.result]
code = '''
a = 1
---
b = 2
'''
languages = [[0, "toml"]]

[[outputTomlStream.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
---
b: 2
'''

[jsonInput]
description = "Test JSON input format support"

[jsonInput.evaluate.result]
code = '''
{
  "a": 1,
  "b": 2
}
'''
languages = [[0, "json-pretty"]]

[[jsonInput.evaluate.inputs]]
filename = "a.json"
code = '''
{
	"a": 1
}
'''

[[jsonInput.evaluate.inputs]]
filename = "a.b.json"
code = '''
{
	"b": 2
}
'''

[yamlTypes]
description = "Test YAML type handling and preservation"
evaluate.result.code = '''
bool: true
float: 0.5
int: 42
"null": null
str: hello
timestamp: "2022-02-05T10:30:00.1Z"
'''

[[yamlTypes.evaluate.inputs]]
filename = "a.yaml"
code = '''
null: null
bool: true
str: hello
int: 42
float: 0.5
timestamp: 2022-02-05T10:30:00.1Z
'''

[jsonFloat]
description = "Test JSON float number handling"
evaluate.result.code = '''
{"a":3.14,"b":12300000000}
'''

[[jsonFloat.evaluate.inputs]]
filename = "a.json"
code = '''
{"a": 3.14, "b": 1.23e10}
'''

[jsonlInput]
description = "Test JSONL input format"

[jsonlInput.evaluate.result]
code = '''
a: 1
b: 2
---
c: 3
d: 4
'''
languages = [[0, "yaml"]]

[[jsonlInput.evaluate.inputs]]
filename = "a.jsonl"
code = '''
{"a":1,"b":2}
{"c":3,"d":4}
'''

[jsonlOutput]
description = "Test JSONL output format"

[jsonlOutput.evaluate.result]
code = '''
{"a":1,"b":2}
{"c":3,"d":4}
'''
languages = [[0, "jsonl"]]

[[jsonlOutput.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
b: 2
---
c: 3
d: 4
'''

[yamlEmptyDoc]
description = "Test handling of empty YAML documents"
evaluate.result.code = '''
foo: bar
---
---
- 1
'''

[[yamlEmptyDoc.evaluate.inputs]]
filename = "a.yaml"
code = '''
foo: bar
---
---
- 1
'''

[outputYaml]
description = "Test YAML output with mixed formats"
evaluate.result.code = '''
addr: 127.0.0.1
name: myService
port: 8081
'''

[[outputYaml.evaluate.inputs]]
filename = "a.yaml"
code = '''
name: myService
addr: 127.0.0.1
port: 8080
'''

[[outputYaml.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
port: 8081
'''

[outputToml]
description = "Test TOML output format"
evaluate.result.code = '''
addr = '127.0.0.1'
name = 'myService'
port = 8081
'''

[[outputToml.evaluate.inputs]]
filename = "a.yaml"
code = '''
name: myService
addr: 127.0.0.1
port: 8080
'''

[[outputToml.evaluate.inputs]]
filename = "a.b.toml"
code = '''
port = 8081
'''

[outputJsonPretty]
description = "Test JSON pretty output format"

[outputJsonPretty.evaluate.result]
code = '''
{
  "addr": "127.0.0.1",
  "name": "myService",
  "port": 8081
}
'''
languages = [[0, "json-pretty"]]

[[outputJsonPretty.evaluate.inputs]]
filename = "a.yaml"
code = '''
name: myService
addr: 127.0.0.1
port: 8080
'''

[[outputJsonPretty.evaluate.inputs]]
filename = "a.b.toml"
code = '''
port = 8081
'''

[formatUnknown]
description = "Test unknown format error"
evaluate.errors = ["unknown format", "Invalid value"]

[[formatUnknown.evaluate.inputs]]
filename = "a.xyz"
code = "x: 1"

###############################################################################
# Special Characters and Escaping
###############################################################################

[literalDollar]
description = "Test literal dollar sign escaping ($$)"

[literalDollar.evaluate.result]
code = '''
{"listKey":["$instance",{"nested":{"$key":"$value"}}],"mapKey":"$pod"}
'''
languages = [[0, "json"]]

[[literalDollar.evaluate.inputs]]
filename = "a.yaml"
code = '''
listKey:
  - $$instance
  - nested:
      $$key: $$value
mapKey: $$pod
'''

###############################################################################
# Required Fields ($required)
###############################################################################

[requiredError]
description = "Test error when required field is not set"
evaluate.errors = ["required field not set"]

[[requiredError.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
b: $required
'''

[yamlAnchorsRequiredError]
description = "Test required field error with YAML anchors"
evaluate.errors = ["required field not set"]

[[yamlAnchorsRequiredError.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: &anchor
  $required
b: *anchor
'''

[requiredList]
description = "Test $required field in list context"
evaluate.result.code = '''
- 1
'''

[[requiredList.evaluate.inputs]]
filename = "a.yaml"
code = '''
- $required
'''

[[requiredList.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
- 1
'''

###############################################################################
# Error Handling
###############################################################################

[valueExtra]
description = "Test error when $value has extra keys"
evaluate.errors = ["extra keys"]

[[valueExtra.evaluate.inputs]]
filename = "a.yaml"
code = '''
a:
  $value: "foo"
  b: 2
'''

[interpMissing]
description = "Test string interpolation with missing variable"
evaluate.errors = ["missing_variable: variable not found"]

[[interpMissing.evaluate.inputs]]
filename = "a.yaml"
code = '''
# Test for string interpolation with missing variable
# This should trigger a variable not found error

result: $"Hello {missing_variable} world"
'''

###############################################################################
# Examples and Edge Cases
###############################################################################

[example1]
description = "Example from documentation showing basic inheritance"

[example1.evaluate.result]
code = '''
{"addr":"127.0.0.1","name":"myService","port":8081}
'''
languages = [[0, "json"]]

[[example1.evaluate.inputs]]
filename = "a.yaml"
code = '''
name: myService
addr: 127.0.0.1
port: 8080
'''

[[example1.evaluate.inputs]]
filename = "a.b.toml"
code = '''
port = 8081
'''

[ordered]
description = "Test preservation of key order in YAML"
evaluate.result.code = '''
b: 2
---
a: 1
'''

[[ordered.evaluate.inputs]]
filename = "a.yaml"
code = '''
b: 2
---
a: 1
'''

[validateNonDirective]
description = "Test that variable-like strings are not treated as directives"
evaluate.result.code = '''
a: $FOO
b: ${FOO}
c: $(FOO)
'''

[[validateNonDirective.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: $FOO
b: ${FOO}
c: $(FOO)
'''

[yamlAnchors]
description = "Test YAML anchor and alias support"
evaluate.result.code = '''
a: 1
b: 2
c: 1
'''

[[yamlAnchors.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: &anchor
  1
b: *anchor
c: *anchor
'''

[[yamlAnchors.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
b: 2
'''

[yamlMerge]
description = "Test YAML merge key (<<) support"
evaluate.result.code = '''
- bar: 2
  foo: 1
  name: original
- bar: 2
  foo: 1
  isCopy: true
  name: copy
'''

[[yamlMerge.evaluate.inputs]]
filename = "a.yaml"
code = '''
- &anchor
  bar: 2
  foo: 1
  name: original
- name: copy
  <<: *anchor
'''

[[yamlMerge.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
- $match:
    name: copy
  isCopy: true
'''

[yamlMergeMultiple]
description = "Test YAML merge key with multiple sources"
evaluate.result.code = '''
- bar: 2
  foo: 1
  name: original
- baz: 3
  foo: 4
- bar: 2
  baz: 3
  foo: 4
  isCopy: true
  name: copy
'''

[[yamlMergeMultiple.evaluate.inputs]]
filename = "a.yaml"
code = '''
- &anchor
  bar: 2
  foo: 1
  name: original
- &otherAnchor
  baz: 3
  foo: 4
- name: copy
  <<:
    - *otherAnchor
    - *anchor
'''

[[yamlMergeMultiple.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
- $match:
    name: copy
  isCopy: true
'''

[requiredSet]
description = "Test $required field is set by child file"
evaluate.result.code = '''
a: 1
b: 2
c: 3
'''

[[requiredSet.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
b: $required
'''

[[requiredSet.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
b: 2
c: 3
'''

###############################################################################
# Root Path Restrictions
###############################################################################

[rootPathCur]
description = "Test root path restriction with current directory"
evaluate.result.code = '''
a: 1
b: 1
'''
evaluate.root = "."

[[rootPathCur.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
b: $merge:a
'''

[rootPathRoot]
description = "Test root path with root directory (no restriction)"
evaluate.result.code = '''
a: 1
b: 1
'''
evaluate.root = "/"

[[rootPathRoot.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
b: $merge:a
'''


[rootPathSub]
description = "Test root path with subdirectory"
evaluate.result.code = '''
a: 1
b: 1
'''
evaluate.root = "sub"

[[rootPathSub.evaluate.inputs]]
filename = "sub/a.yaml"
code = '''
a: 1
b: $merge:a
'''

[rootPathBreak]
description = "Test root path restriction prevents access outside root"
evaluate.errors = ["outside root path", "no such file or directory"]
evaluate.root = "sub"

[[rootPathBreak.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
b: $merge:a
'''

###############################################################################
# Environment Variables ($env)
###############################################################################

[envMapValue]
description = "Test environment variable in map value"
evaluate.result.code = '''
a: test
'''
evaluate.env = { FOO = "test" }

[[envMapValue.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: $env:FOO
'''

[envMapKey]
description = "Test environment variable in map key"
evaluate.result.code = '''
test: 1
'''
evaluate.env = { FOO = "test" }

[[envMapKey.evaluate.inputs]]
filename = "a.yaml"
code = '''
$env:FOO: 1
'''

[encodeBase64Env]
description = "Test base64 encoding with environment variable"
evaluate.result.code = '''
a: dGVzdA==
'''
evaluate.env = { FOO = "test" }

[[encodeBase64Env.evaluate.inputs]]
filename = "a.yaml"
code = '''
a:
  $value: $env:FOO
  $encode: base64
'''

[encodeJoinEnv]
description = "Test join encoding with environment variable in array"
evaluate.result.code = '''
a: a-test-b
'''
evaluate.env = { FOO = "test" }

[[encodeJoinEnv.evaluate.inputs]]
filename = "a.yaml"
code = '''
a:
  $value: [a-, $env:FOO, -b]
  $encode: join
'''

[envMissing]
description = "Test missing environment variable error"
evaluate.errors = ["$env:FOO: variable not found"]

[[envMissing.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: $env:FOO
'''
###############################################################################
# Diff Operations
###############################################################################

[diffList]
description = "Test diff of two lists"
diff.result.code = '''
- $match: {}
- c: 3
- $delete:
    b: 2
'''
diff.base.filename = "a.yaml"
diff.base.code = '''
- a: 1
- b: 2
'''
diff.target.filename = "b.yaml"
diff.target.code = '''
- a: 1
- c: 3
'''

[diffListReplace]
description = "Test diff of lists that requires $replace"
diff.result.code = '''
- $match: {}
- a: 1
- c: 3
- $replace: true
'''
diff.base.filename = "a.yaml"
diff.base.code = '''
- a
- b
'''
diff.target.filename = "b.yaml"
diff.target.code = '''
- a: 1
- c: 3
'''

[diffListSame]
description = "Test diff of identical lists"
diff.result.code = '''
$match: {}
'''
diff.base.filename = "a.yaml"
diff.base.code = '''
- a: 1
- b: 2
'''
diff.target.filename = "b.yaml"
diff.target.code = '''
- a: 1
- b: 2
'''

[diffMap]
description = "Test diff of two maps"
diff.base.filename = "a.yaml"
diff.base.code = '''
a: 1
b: 2
'''
diff.target.filename = "b.yaml"
diff.target.code = '''
a: 2
c: 3
'''

[diffMap.diff.result]
code = '''
{
  "$match": {},
  "a": 2,
  "b": "$delete",
  "c": 3
}
'''
languages = [[0, "json-pretty"]]

[diffMapSame]
description = "Test diff of identical maps"
diff.result.code = '''
$match: {}
'''
diff.base.filename = "a.yaml"
diff.base.code = '''
a: 1
b: 2
'''
diff.target.filename = "b.yaml"
diff.target.code = '''
a: 1
b: 2
'''

[diffMerge]
description = "Test diff with merge operation"
diff.result.code = '''
$match: {}
$merge: c.yaml
c: 3
d: 4
'''
diff.base.filename = "a.yaml"
diff.base.code = '''
a: 1
b: 2
'''
diff.target.filename = "b.yaml"
diff.target.code = '''
a: 1
b: 2
c: 3
d: 4
$merge: c.yaml
'''

[diffYamlJson]
description = "Test diff between YAML and JSON files"
diff.result.code = '''
$match: {}
c: 3
'''
diff.base.filename = "a.yaml"
diff.base.code = '''
a: 1
b: 2
'''
diff.target.filename = "b.json"
diff.target.code = '''
{
  "a": 1,
  "b": 2,
  "c": 3
}
'''

[diffMultipleDocsSource]
description = "Test diff with multiple documents in source file without selector"
diff.errors = ["selector"]
diff.base.filename = "a.yaml"
diff.base.code = '''
---
x: 1
---
y: 2
'''
diff.target.filename = "b.yaml"
diff.target.code = "x: 1"

[diffMultipleDocsDest]
description = "Test diff with multiple documents in destination file without selector"
diff.errors = ["selector \"\" matches multiple"]
diff.base.filename = "a.yaml"
diff.base.code = "x: 1"
diff.target.filename = "b.yaml"
diff.target.code = '''
---
x: 1
---
y: 2
'''

[diffDifferentTypes]
description = "Test diff with different types (string vs number)"
diff.result.code = '''
$match: {}
x: "1"
'''
diff.base.filename = "a.yaml"
diff.base.code = "x: 1"
diff.target.filename = "b.yaml"
diff.target.code = 'x: "1"'

# Additional diff coverage tests
[diffIdenticalValues]
description = "Test diff with identical values returns nil"
diff.result.code = "$match: {}"
diff.base.filename = "a.yaml"
diff.base.code = "x: 1"
diff.target.filename = "b.yaml"
diff.target.code = "x: 1"

[diffPrimitiveValues]
description = "Test diff with primitive values (not maps or lists)"
diff.result.code = "world"
diff.base.filename = "a.yaml"
diff.base.code = '"hello"'
diff.target.filename = "b.yaml"
diff.target.code = '"world"'

[diffListVsMap]
description = "Test diff with list vs map (different types)"
diff.result.code = '''
$match: {}
x: 1
'''
diff.base.filename = "a.yaml"
diff.base.code = '''
- a: 1
'''
diff.target.filename = "b.yaml"
diff.target.code = "x: 1"

[diffMapVsList]
description = "Test diff with map vs list (different types)"
diff.result.code = '''
- $match: {}
- a: 1
'''
diff.base.filename = "a.yaml"
diff.base.code = "x: 1"
diff.target.filename = "b.yaml"
diff.target.code = '''
- a: 1
'''

###############################################################################
# Intersect Operations
###############################################################################

[intersectList]
description = "Test intersect of two lists"
intersect.result.code = '''
- a: 1
'''

[[intersectList.intersect.inputs]]
filename = "a.yaml"
code = '''
- a: 1
- b: 2
- c: 3
'''

[[intersectList.intersect.inputs]]
filename = "b.yaml"
code = '''
- a: 1
- b: 10
- d: 4
'''

[intersectListRequired]
description = "Test intersect of lists with no common elements"
intersect.result.code = ""

[[intersectListRequired.intersect.inputs]]
filename = "a.yaml"
code = '''
- a: 1
'''

[[intersectListRequired.intersect.inputs]]
filename = "b.yaml"
code = '''
- b: 2
'''

[intersectMap]
description = "Test intersect of two maps"
intersect.result.code = '''
a: 1
'''

[[intersectMap.intersect.inputs]]
filename = "a.yaml"
code = '''
a: 1
b: 2
c: 3
'''

[[intersectMap.intersect.inputs]]
filename = "b.yaml"
code = '''
a: 1
b: 10
d: 4
'''

[intersectMapNull]
description = "Test intersect of maps with null values"
intersect.result.code = '''
a: null
'''

[[intersectMapNull.intersect.inputs]]
filename = "a.yaml"
code = '''
a: null
'''

[[intersectMapNull.intersect.inputs]]
filename = "b.yaml"
code = '''
a: null
'''

[intersectMultipleDocs]
description = "Test intersect with multiple documents in a file without selector"
intersect.errors = ["selector"]

[[intersectMultipleDocs.intersect.inputs]]
filename = "a.yaml"
code = '''
---
x: 1
---
y: 2
'''

[[intersectMultipleDocs.intersect.inputs]]
filename = "b.yaml"
code = "x: 1"

[intersectDifferentTypes]
description = "Test intersect with different types"
intersect.result.code = ""

[[intersectDifferentTypes.intersect.inputs]]
filename = "a.yaml"
code = "x: 1"

[[intersectDifferentTypes.intersect.inputs]]
filename = "b.yaml"
code = '"string value"'

# Additional intersect coverage tests
[intersectListVsMap]
description = "Test intersect with list vs map"
intersect.result.code = ""

[[intersectListVsMap.intersect.inputs]]
filename = "a.yaml"
code = '''
- a: 1
'''

[[intersectListVsMap.intersect.inputs]]
filename = "b.yaml"
code = "x: 1"

[intersectPrimitiveVsList]
description = "Test intersect with primitive vs list"
intersect.result.code = ""

[[intersectPrimitiveVsList.intersect.inputs]]
filename = "a.yaml"
code = '"hello"'

[[intersectPrimitiveVsList.intersect.inputs]]
filename = "b.yaml"
code = '''
- a: 1
'''

[intersectPrimitiveVsMap]
description = "Test intersect with primitive vs map"
intersect.result.code = ""

[[intersectPrimitiveVsMap.intersect.inputs]]
filename = "a.yaml"
code = '"hello"'

[[intersectPrimitiveVsMap.intersect.inputs]]
filename = "b.yaml"
code = "x: 1"

###############################################################################
# Required Operations
###############################################################################

[requiredToolList]
description = "Required tool filters list to show only $required items"
required.result.code = """
a:
  - $required
"""

[[requiredToolList.required.inputs]]
filename = "a.yaml"
code = """
a:
  - $required
b:
  - 2
"""

[requiredToolMap]
description = "Required tool filters map to show only $required items"
required.result.code = """
a:
  b: $required
"""

[[requiredToolMap.required.inputs]]
filename = "a.yaml"
code = """
a:
  b: $required
  c: 3
  d:
    e: 5
"""

[requiredMultipleDocs]
description = "Test required with multiple documents"
required.result.code = '''
a: $required
---
b: $required
'''

[[requiredMultipleDocs.required.inputs]]
filename = "a.yaml"
code = '''
---
a: $required
---
b: $required
'''

# Additional required coverage tests
[requiredInString]
description = "Test required string value is preserved"
required.result.code = "x: $required"

[[requiredInString.required.inputs]]
filename = "a.yaml"
code = "x: $required"

[requiredNonRequiredString]
description = "Test non-required string value is filtered out"
required.result.code = ""

[[requiredNonRequiredString.required.inputs]]
filename = "a.yaml"
code = "x: not-required"

###############################################################################
# Error Handling - Additional Coverage
###############################################################################

# File loading errors
[fileLoadInvalidFormat]
description = "Test loading file with invalid format"
evaluate.errors = ["unknown format"]

[[fileLoadInvalidFormat.evaluate.inputs]]
filename = "test.invalid"
code = "x: 1"


[unmarshalError]
description = "Test unmarshal error with invalid YAML"
evaluate.errors = ["did not find expected node content"]

[[unmarshalError.evaluate.inputs]]
filename = "bad.yaml"
code = "{ invalid yaml: ["

# Merge errors
[mergeListDeleteExtraKeys]
description = "Test merge list delete with extra keys error"
evaluate.errors = ["invalid directive"]

[[mergeListDeleteExtraKeys.evaluate.inputs]]
filename = "a.yaml"
code = '''
- $delete:
    x: 1
  extra: key
'''

[mergeListReplaceError]
description = "Test merge list replace with invalid boolean"
evaluate.errors = ["reference not found"]

[[mergeListReplaceError.evaluate.inputs]]
filename = "a.yaml"
code = '''
- $replace: "not a boolean"
'''

[mergeListMatchNotFound]
description = "Test merge list match not found"
evaluate.errors = ["not found"]

[[mergeListMatchNotFound.evaluate.inputs]]
filename = "a.yaml"
code = '''
base:
  - a: 1
updates:
  - $match:
      b: 2
    c: 3
result:
  $merge: [base, updates]
'''

# Decode errors
[decodeInvalidType]
description = "Test decode with invalid type"
evaluate.errors = ["invalid type"]

[[decodeInvalidType.evaluate.inputs]]
filename = "a.yaml"
code = '''
$decode: 123
'''

[decodeNotString]
description = "Test decode on non-map type"
evaluate.errors = ["invalid type"]

[[decodeNotString.evaluate.inputs]]
filename = "a.yaml"
code = '''
- $decode: base64
'''

[decodeMissingValue]
description = "Test decode missing $value"
evaluate.errors = ["missing $value"]

[[decodeMissingValue.evaluate.inputs]]
filename = "a.yaml"
code = '''
$decode: base64
other: field
'''

[decodeValueNotString]
description = "Test decode with non-string $value"
evaluate.errors = ["invalid type"]

[[decodeValueNotString.evaluate.inputs]]
filename = "a.yaml"
code = '''
$decode: base64
$value: 123
'''

[decodeExtraKeys]
description = "Test decode with extra keys"
evaluate.errors = ["extra keys"]

[[decodeExtraKeys.evaluate.inputs]]
filename = "a.yaml"
code = '''
$decode: base64
$value: SGVsbG8=
extra: key
'''

[decodeInvalidYAML]
description = "Test decode with invalid YAML"
evaluate.errors = ["yaml:"]

[[decodeInvalidYAML.evaluate.inputs]]
filename = "a.yaml"
code = '''
$decode: yaml
$value: "{ invalid: yaml ["
'''

[decodeInvalidJSON]
description = "Test decode with invalid JSON"
evaluate.errors = ["invalid character"]

[[decodeInvalidJSON.evaluate.inputs]]
filename = "a.yaml"
code = '''
$decode: json
$value: "{ invalid json"
'''

[decodeUnknownFormat]
description = "Test decode with unknown format"
evaluate.errors = ["unknown format"]

[[decodeUnknownFormat.evaluate.inputs]]
filename = "a.yaml"
code = '''
$decode: unknownformat
$value: data
'''

# Normalize errors
[normalizeError]
description = "Test normalize error with function value"
evaluate.errors = ["invalid directive"]

[[normalizeError.evaluate.inputs]]
filename = "a.yaml"
code = "func: $env"

# Encode coverage tests
[encodeSHA256]
description = "Test encode with sha256"
evaluate.result.code = '''
data: foo
hash: 2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae
'''

[[encodeSHA256.evaluate.inputs]]
filename = "a.yaml"
code = '''
data: foo
hash:
  $encode: sha256
  $value: foo
'''

[encodeBase64Coverage]
description = "Test encode with base64"
evaluate.result.code = '''
data: Hello World
encoded: SGVsbG8gV29ybGQ=
'''

[[encodeBase64Coverage.evaluate.inputs]]
filename = "a.yaml"
code = '''
data: Hello World
encoded:
  $encode: base64
  $value: Hello World
'''

[encodeFlattenCoverage]
description = "Test encode flatten"
evaluate.result.code = '''
flattened:
  - a
  - b
  - c
  - d
nested:
  - - a
    - b
  - - c
    - d
'''

[[encodeFlattenCoverage.evaluate.inputs]]
filename = "a.yaml"
code = '''
nested:
  - [a, b]
  - [c, d]
flattened:
  $encode: flatten
  $value:
    - [a, b]
    - [c, d]
'''

[encodeToListMap]
description = "Test encode tolist with map"
evaluate.result.code = '''
args:
  - name=foo
  - value=bar
config:
  name: foo
  value: bar
'''

[[encodeToListMap.evaluate.inputs]]
filename = "a.yaml"
code = '''
config:
  name: foo
  value: bar
args:
  $encode: tolist:=
  $value:
    name: foo
    value: bar
'''

# Deep clone error
[deepCloneError]
description = "Test deep clone with function causes error"
evaluate.errors = ["invalid directive"]

[[deepCloneError.evaluate.inputs]]
filename = "a.yaml"
code = '''
base:
  func: $env
copy:
  $merge: base
'''


# Process2 tolist errors
[toListInvalidDelimiter]
description = "Test tolist with invalid delimiter argument"
evaluate.errors = ["invalid arguments"]

[[toListInvalidDelimiter.evaluate.inputs]]
filename = "a.yaml"
code = '''
$encode: tolist
$value:
  a: 1
'''

[toListNonMap]
description = "Test tolist with non-map value"
evaluate.errors = ["invalid type"]

[[toListNonMap.evaluate.inputs]]
filename = "a.yaml"
code = '''
$encode: tolist:=
$value: "not a map"
'''

# Encode errors
[encodeInvalidArguments]
description = "Test encode with invalid arguments"
evaluate.errors = ["invalid arguments"]

[[encodeInvalidArguments.evaluate.inputs]]
filename = "a.yaml"
code = '''
$encode: base64:extra
$value: data
'''

[encodeFlattenNonList]
description = "Test encode flatten with non-list"
evaluate.errors = ["invalid type"]

[[encodeFlattenNonList.evaluate.inputs]]
filename = "a.yaml"
code = '''
$encode: flatten
$value: "not a list"
'''

[encodeSHA256InvalidArgs]
description = "Test encode sha256 with invalid arguments"
evaluate.errors = ["invalid arguments"]

[[encodeSHA256InvalidArgs.evaluate.inputs]]
filename = "a.yaml"
code = '''
$encode: sha256:extra
$value: data
'''

# Parser logging coverage
[parserDebugLog]
description = "Test parser with debug logging enabled"
evaluate.result.code = "x: 1"

[[parserDebugLog.evaluate.inputs]]
filename = "a.yaml"
code = "x: 1"

# File loading - parent from directive
[parentFromDirectiveList]
description = "Test parent from directive as list"
evaluate.result.code = '''
base: value
child: value
'''

[[parentFromDirectiveList.evaluate.inputs]]
filename = "parent.yaml"
code = "base: value"

[[parentFromDirectiveList.evaluate.inputs]]
filename = "child.yaml"
code = '''
$parent: [parent]
child: value
'''



# Process2 decode errors
[decodeMultipleDocs]
description = "Test decode with multiple documents error"
evaluate.errors = ["decoding error"]

[[decodeMultipleDocs.evaluate.inputs]]
filename = "a.yaml"
code = '''
$decode: yaml
$value: |
  ---
  a: 1
  ---
  b: 2
'''


# String interpolation edge cases
[stringInterpEmptyVar]
description = "Test string interpolation with empty variable"
evaluate.result.code = '''
empty: ""
result: 'Value: '
'''

[[stringInterpEmptyVar.evaluate.inputs]]
filename = "a.yaml"
code = '''
empty: ""
result: '$"Value: {empty}"'
'''

###############################################################################
# Additional Coverage Tests - Round 2
###############################################################################

# Get operations with complex paths

[getPathYAMLList]
description = "Test get path from YAML-encoded list"
evaluate.result.code = '''
data:
  nested:
    field: value
'''

[[getPathYAMLList.evaluate.inputs]]
filename = "a.yaml"
code = '''
data:
  nested:
    field: value
'''

[getPathInvalidType]
description = "Test get path with invalid type"
evaluate.result.code = '''
result: 123
'''

[[getPathInvalidType.evaluate.inputs]]
filename = "a.yaml"
code = '''
result: 123
'''

[getVarNotFound]
description = "Test get variable not found"
evaluate.errors = ["invalid directive"]

[[getVarNotFound.evaluate.inputs]]
filename = "a.yaml"
code = '''
result: $nonexistent
'''

[getPathFromStringError]
description = "Test get path from string with YAML parse error"
evaluate.errors = ["yaml:"]

[[getPathFromStringError.evaluate.inputs]]
filename = "a.yaml"
code = '''
result: $"[invalid: yaml: ["
'''

# Output operations
[outputFilterMapFalse]
description = "Test output filter on map with $output: false"
evaluate.result.code = '''
visible: data
'''

[[outputFilterMapFalse.evaluate.inputs]]
filename = "a.yaml"
code = '''
visible: data
hidden:
  $output: false
  secret: value
'''

[outputFilterListFalse]
description = "Test output filter on list with $output: false"
evaluate.result.code = '''
- visible
- another
'''

[[outputFilterListFalse.evaluate.inputs]]
filename = "a.yaml"
code = '''
- visible
- $output: false
  hidden: value
- another
'''

[outputFilterNestedError]
description = "Test output filter with nested error"
evaluate.errors = ["invalid"]

[[outputFilterNestedError.evaluate.inputs]]
filename = "a.yaml"
code = '''
data:
  field:
    $output: "not a boolean"
'''

[findOutputsError]
description = "Test find outputs with error"
evaluate.errors = ["invalid"]

[[findOutputsError.evaluate.inputs]]
filename = "a.yaml"
code = '''
data:
  - $output: "not a boolean"
'''

# Normalize edge cases
[normalizeMapKeyNonString]
description = "Test normalize with non-string map key"
evaluate.result.code = '''
"123": value
'''

[[normalizeMapKeyNonString.evaluate.inputs]]
filename = "a.yaml"
code = '''
123: value
'''

# Match operations
[matchListNonList]
description = "Test match list with non-list"
evaluate.result.code = '''
data: not a list
'''

[[matchListNonList.evaluate.inputs]]
filename = "a.yaml"
code = '''
data: not a list
'''

# JSON edge cases
[jsonMarshalError]
description = "Test JSON marshal with function type"
evaluate.errors = ["invalid directive"]

[[jsonMarshalError.evaluate.inputs]]
filename = "a.yaml"
code = '''
func: $env
result:
  $encode: json
  $value: $func
'''

# YAML marshal edge cases
[yamlMarshalMapIntKey]
description = "Test YAML marshal with integer map key"
evaluate.result.code = '''
"123": value
'''

[[yamlMarshalMapIntKey.evaluate.inputs]]
filename = "a.yaml"
code = '''
123: value
'''

# Process decode type errors
[decodeNonMap]
description = "Test decode on non-map"
evaluate.errors = ["invalid type"]

[[decodeNonMap.evaluate.inputs]]
filename = "a.yaml"
code = '''
- item
- $decode: yaml
'''

# Tostring conversion errors


# More coverage tests
[getPathDeepNested]
description = "Test get path with deep nesting"
evaluate.result.code = '''
data:
  level1:
    level2:
      level3:
        value: found
result: found
'''

[[getPathDeepNested.evaluate.inputs]]
filename = "a.yaml"
code = '''
data:
  level1:
    level2:
      level3:
        value: found
result: found
'''

[normalizeListWithNonStringKey]
description = "Test normalize list containing map with non-string key"
evaluate.result.code = '''
- "123": value
- normal: key
'''

[[normalizeListWithNonStringKey.evaluate.inputs]]
filename = "a.yaml"
code = '''
- 123: value
- normal: key
'''

[outputControlComplex]
description = "Test complex output control"
evaluate.result.code = '''
list:
  - item1
  - item3
visible:
  data: shown
'''

[[outputControlComplex.evaluate.inputs]]
filename = "a.yaml"
code = '''
visible:
  data: shown
  hidden:
    $output: false
    secret: hidden
list:
  - item1
  - $output: false
    value: item2
  - item3
'''

[toStringListMixed]
description = "Test toStringList with mixed types"
evaluate.errors = ["invalid directive"]

[[toStringListMixed.evaluate.inputs]]
filename = "a.yaml"
code = '''
data:
  $get: [field1, {complex: object}, field2]
'''

[yamlUnmarshalStreamError]
description = "Test YAML unmarshal stream with invalid input"
evaluate.errors = ["yaml:"]

[[yamlUnmarshalStreamError.evaluate.inputs]]
filename = "a.yaml"
code = '''
{invalid yaml & here
'''

[jsonUnmarshalStreamEmpty]
description = "Test JSON unmarshal with empty document"
evaluate.result.code = ""

[[jsonUnmarshalStreamEmpty.evaluate.inputs]]
filename = "a.json"
code = ""

[encodeUnknownCommand]
description = "Test encode with unknown command"
evaluate.errors = ["unknown format"]

[[encodeUnknownCommand.evaluate.inputs]]
filename = "a.yaml"
code = '''
$encode: unknowncommand
$value: data
'''

[process2CircularRef]
description = "Test process2 circular reference detection"
evaluate.errors = ["invalid directive"]

[[process2CircularRef.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: $b
b: $c
c: $a
result: $a
'''

# Document and clone tests
[documentCloneError]
description = "Test document clone with marshal error"
evaluate.result.code = '''
data:
  func: {}
func: {}
'''

[[documentCloneError.evaluate.inputs]]
filename = "a.yaml"
code = '''
data:
  func: {}
$merge: data
'''

# Process1 tests
[process1MergeError]
description = "Test process1 merge with error"
evaluate.errors = ["reference not found"]

[[process1MergeError.evaluate.inputs]]
filename = "a.yaml"
code = '''
$merge: nonexistent
'''

[process1ParentError]
description = "Test process1 parent directive error"
evaluate.errors = ["missing file"]

[[process1ParentError.evaluate.inputs]]
filename = "a.yaml"
code = '''
$parent: [nonexistent]
data: value
'''

[process1InvalidMerge]
description = "Test process1 with invalid merge type"
evaluate.errors = ["invalid type"]

[[process1InvalidMerge.evaluate.inputs]]
filename = "a.yaml"
code = '''
$merge: 123
'''


# GetFormat tests
[getFormatError]
description = "Test GetFormat with unknown format"
evaluate.errors = ["unknown format"]

[[getFormatError.evaluate.inputs]]
filename = "unknown.xyz"
code = "data: value"

# Parent filename tests
[parentFilenameTilde]
description = "Test parent from filename with tilde"
evaluate.result.code = '''
base: value
service: value
'''

[[parentFilenameTilde.evaluate.inputs]]
filename = "service.yaml"
code = "base: value"

[[parentFilenameTilde.evaluate.inputs]]
filename = "service.base.yaml"
code = "service: value"

[missingParentFile]
description = "Test missing parent file from filename"
evaluate.errors = ["missing file"]

[[missingParentFile.evaluate.inputs]]
filename = "service.missing.base.yaml"
code = "content: value"

# Process encode any tests
[encodeAnyInvalidType]
description = "Test encode any with invalid command type"
evaluate.errors = ["invalid type"]

[[encodeAnyInvalidType.evaluate.inputs]]
filename = "a.yaml"
code = '''
$encode: {not: string}
$value: data
'''

# YAML parsing edge cases for coverage
[yamlUnknownTag]
description = "Test YAML with unknown scalar tag"
evaluate.errors = ["unknown yaml short tag"]

[[yamlUnknownTag.evaluate.inputs]]
filename = "a.yaml"
code = '''
value: !!unknown "test"
'''


[process2DecodeNonMap]
description = "Test decode on non-map value"
evaluate.errors = ["$decode: missing $value"]

[[process2DecodeNonMap.evaluate.inputs]]
filename = "a.yaml"
code = '''
- $decode: json
'''

[yamlFloat64]
description = "Test YAML float64 large number handling"
evaluate.result.code = '''
value: 1.7976931348623157e+308
'''

[[yamlFloat64.evaluate.inputs]]
filename = "a.yaml"
code = '''
value: 1.7976931348623157e+308
'''

[yamlInt32]
description = "Test YAML int32 handling"
evaluate.result.code = '''
value: 2147483647
'''

[[yamlInt32.evaluate.inputs]]
filename = "a.yaml"
code = '''
value: 2147483647
'''

[toStringListNonString]
description = "Test toStringList with non-string convertible value"
evaluate.result.code = '''
helloworldmap[complex:object]
'''

[[toStringListNonString.evaluate.inputs]]
filename = "a.yaml"
code = '''
$encode: join
$value:
  - hello
  - world
  - {complex: object}
'''

[popListStringEmpty]
description = "Test popListString with empty list"
evaluate.result.code = '''
empty: []
items: []
'''

[[popListStringEmpty.evaluate.inputs]]
filename = "a.yaml"
code = '''
items:
  $merge: empty
empty: []
'''

[popListMapValueEmpty]
description = "Test popListMapValue with empty list"
evaluate.result.code = '''
result: []
'''

[[popListMapValueEmpty.evaluate.inputs]]
filename = "a.yaml"
code = '''
result: []
'''

[popListMapBoolValueNotFound]
description = "Test popListMapBoolValue when value not found"
evaluate.result.code = '''
list:
  - a: 1
  - b: 2
'''

[[popListMapBoolValueNotFound.evaluate.inputs]]
filename = "a.yaml"
code = '''
list:
- a: 1
- b: 2
'''

[process2RepeatObjMapInvalid]
description = "Test repeat object map with invalid context"
evaluate.errors = ["invalid directive"]

[[process2RepeatObjMapInvalid.evaluate.inputs]]
filename = "a.yaml"
code = '''
item:
  $repeat: 3
  value: "$repeat is not a map here"
'''

[process2RepeatObjListInvalid]
description = "Test repeat object list with invalid context"
evaluate.errors = ["reference not found"]

[[process2RepeatObjListInvalid.evaluate.inputs]]
filename = "a.yaml"
code = '''
- $repeat: 2
  $merge: "invalid"
'''

[yamlMergeNonMap]
description = "Test YAML merge with non-map value"
evaluate.errors = ["unknown type for merge target"]

[[yamlMergeNonMap.evaluate.inputs]]
filename = "a.yaml"
code = '''
<<: [1, 2, 3]
value: test
'''

[yamlMergeList]
description = "Test YAML merge with list of maps"
evaluate.result.code = '''
base1:
  a: 1
  b: 2
base2:
  b: 20
  c: 3
result:
  a: 1
  b: 2
  c: 3
'''

[[yamlMergeList.evaluate.inputs]]
filename = "a.yaml"
code = '''
base1: &base1
  a: 1
  b: 2
base2: &base2
  b: 20
  c: 3
result:
  <<: [*base1, *base2]
'''

[process1StringMergeInvalid]
description = "Test process1 string merge with invalid reference"
evaluate.errors = ["invalid type"]

[[process1StringMergeInvalid.evaluate.inputs]]
filename = "a.yaml"
code = '''
value:
  $merge: 123
'''

[process1StringReplaceInvalid]
description = "Test process1 string replace with invalid reference"
evaluate.errors = ["invalid type"]

[[process1StringReplaceInvalid.evaluate.inputs]]
filename = "a.yaml"
code = '''
value:
  $replace: 123
'''

[mergeListMatchInvalid]
description = "Test merge list match with invalid match value"
evaluate.errors = ["match"]

[[mergeListMatchInvalid.evaluate.inputs]]
filename = "a.yaml"
code = '''
- a: 1
- $match: "invalid string match"
  a: 2
'''

[mergeFileNoDocuments]
description = "Test merge file with no documents"
evaluate.result.code = ""

[[mergeFileNoDocuments.evaluate.inputs]]
filename = "empty.yaml"
code = ""

# More tests for additional coverage

[toStringListError]
description = "Test toStringList with nil in list"
evaluate.result.code = '''
items:
  - a
  - null
  - c
'''

[[toStringListError.evaluate.inputs]]
filename = "a.yaml"
code = '''
items:
- a
- null
- c
'''

[process2ToListListError]
description = "Test toList on list with non-map"
evaluate.errors = ["unknown format"]

[[process2ToListListError.evaluate.inputs]]
filename = "a.yaml"
code = '''
$encode: toList
$value:
- not a map
'''

[yamlMergeScalar]
description = "Test YAML merge with scalar value"
evaluate.errors = ["unknown type for merge target"]

[[yamlMergeScalar.evaluate.inputs]]
filename = "a.yaml"
code = '''
base: &base 123
result:
  <<: *base
  value: test
'''

[yamlAlias]
description = "Test YAML alias handling"
evaluate.result.code = '''
base:
  x: 1
  "y": 2
copy:
  x: 1
  "y": 2
'''

[[yamlAlias.evaluate.inputs]]
filename = "a.yaml"
code = '''
base: &base
  x: 1
  y: 2
copy: *base
'''

[yamlTimestamp]
description = "Test YAML timestamp handling"
evaluate.result.code = '''
ts: "2021-01-01T00:00:00Z"
'''

[[yamlTimestamp.evaluate.inputs]]
filename = "a.yaml"
code = '''
ts: 2021-01-01T00:00:00Z
'''


[encodeAnyNonString]
description = "Test encode any with non-string command"
evaluate.errors = ["invalid type"]

[[encodeAnyNonString.evaluate.inputs]]
filename = "a.yaml"
code = '''
$encode: 123
$value: data
'''

[mergeDocumentError]
description = "Test merge document with nil document"
evaluate.result.code = '''
value: test
'''

[[mergeDocumentError.evaluate.inputs]]
filename = "a.yaml"
code = '''
value: test
'''


[deepCloneFunc]
description = "Test deep clone with function value"
evaluate.result.code = '''
a: 1
b: 2
'''

[[deepCloneFunc.evaluate.inputs]]
filename = "a.yaml"
code = '''
a: 1
b: 2
'''



[emptyIntermediateFile]
description = "Empty intermediate file in the hierarchy"
evaluate.result.code = '''
x:
  - a
  - a.b.c
  - a.b.c.d0
  - a.b.c.e
---
x:
  - a
  - a.b.c
  - a.b.c.d1
  - a.b.c.e
'''

[[emptyIntermediateFile.evaluate.inputs]]
filename = "a.yaml"
code = '''
x:
- a
'''

[[emptyIntermediateFile.evaluate.inputs]]
filename = "a.b.yaml"
code = ''''''

[[emptyIntermediateFile.evaluate.inputs]]
filename = "a.b.c.yaml"
code = '''
$match: {}
x:
- a.b.c
'''

[[emptyIntermediateFile.evaluate.inputs]]
filename = "a.b.c.d0.yaml"
code = '''
$match: {}
x:
- a.b.c.d0
'''

[[emptyIntermediateFile.evaluate.inputs]]
filename = "a.b.c.d1.yaml"
code = '''
$match: {}
x:
- a.b.c.d1
'''

[[emptyIntermediateFile.evaluate.inputs]]
filename = "a.b.c.e.yaml"
code = '''
$parent:
- a.b.c.d*
$match: {}
x:
- a.b.c.e
'''

[nullChildDoc]
description = "Null child document is also a no-op (same as empty)"
evaluate.result.code = '''
x:
  - a
'''

[[nullChildDoc.evaluate.inputs]]
filename = "a.yaml"
code = '''
x:
- a
'''

[[nullChildDoc.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
null
'''


[emptyChildDoc]
description = "Empty child document merges as no-op"
evaluate.result.code = '''
x:
  - a
  - a.b
'''

[[emptyChildDoc.evaluate.inputs]]
filename = "a.yaml"
code = '''
x:
- a
'''

[[emptyChildDoc.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
x:
- a.b
---

'''

###############################################################################
# Defer Operations ($defer)
###############################################################################

[deferWithRepeat]
description = "Test $defer with $repeat - override repeat count then match specific item"
evaluate.result.code = '''
a: 0
---
a: 1
---
a: 2
b: special
'''

[[deferWithRepeat.evaluate.inputs]]
filename = "a.yaml"
code = '''
$repeat: 2
a: $repeat
'''

[[deferWithRepeat.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
$repeat: 3
'''

[[deferWithRepeat.evaluate.inputs]]
filename = "a.b.c.yaml"
code = '''
$defer: true
$match:
  a: 2
b: special
'''

[deferWithRepeatSwapped]
description = "Test $defer with $repeat - content swapped between files"
evaluate.result.code = '''
a: 0
---
a: 1
---
a: 2
b: special
'''

[[deferWithRepeatSwapped.evaluate.inputs]]
filename = "a.yaml"
code = '''
$repeat: 2
a: $repeat
'''

[[deferWithRepeatSwapped.evaluate.inputs]]
filename = "a.b.yaml"
code = '''
$defer: true
$match:
  a: 2
b: special
'''

[[deferWithRepeatSwapped.evaluate.inputs]]
filename = "a.b.c.yaml"
code = '''
$repeat: 3
'''

[deferEscapeInteraction]
description = "Test $$ escape interaction with $defer - $$ should be unescaped after defer processing"
evaluate.result.code = '''
a: $foo
b: test
'''

[[deferEscapeInteraction.evaluate.inputs]]
filename = "test.yaml"
code = '''
a: $$foo
---
$defer: true
$match: {}
b: test
'''

[diffWithSelector]
description = "Test diff with selector matching documents by name"
diff.result.code = '''
$match:
  name: doc1
b: 3
---
$match:
  name: doc2
c: 4
'''
diff.selector = ["name"]
diff.base.filename = "a.yaml"
diff.base.code = '''
---
name: doc1
a: 1
---
name: doc2
c: 3
'''
diff.target.filename = "b.yaml"
diff.target.code = '''
---
name: doc1
a: 1
b: 3
---
name: doc2
c: 4
'''

[intersectWithSelector]
description = "Test intersect with selector matching documents by id"
intersect.result.code = '''
a: 1
id: 1
---
b: 2
id: 2
'''
intersect.selector = ["id"]

[[intersectWithSelector.intersect.inputs]]
filename = "a.yaml"
code = '''
---
id: 1
a: 1
b: 2
---
id: 2
b: 2
c: 3
'''

[[intersectWithSelector.intersect.inputs]]
filename = "b.yaml"
code = '''
---
id: 1
a: 1
c: 3
---
id: 2
b: 2
d: 4
'''

[[intersectWithSelector.intersect.inputs]]
filename = "c.yaml"
code = '''
---
id: 1
a: 1
---
id: 2
b: 2
'''

[diffWithSelectorNestedPath]
description = "Test diff with selector using nested path"
diff.result.code = '''
$match:
  metadata:
    name: service1
metadata:
  version: v2
spec:
  replicas: 3
---
$match:
  metadata:
    name: service2
'''
diff.selector = ["metadata.name"]
diff.base.filename = "a.yaml"
diff.base.code = '''
---
metadata:
  name: service1
  version: v1
spec:
  replicas: 2
---
metadata:
  name: service2
spec:
  replicas: 1
'''
diff.target.filename = "b.yaml"
diff.target.code = '''
---
metadata:
  name: service1
  version: v2
spec:
  replicas: 3
---
metadata:
  name: service2
spec:
  replicas: 1
'''

[diffWithSelectorNoMatch]
description = "Test diff with selector where destination has unmatched documents"
diff.result.code = '''
$match:
  id: 1
---
$match:
  id: 2
---
$match: null
c: 3
id: 3
'''
diff.selector = ["id"]
diff.base.filename = "a.yaml"
diff.base.code = '''
---
id: 1
a: 1
---
id: 2
b: 2
'''
diff.target.filename = "b.yaml"
diff.target.code = '''
---
id: 1
a: 1
---
id: 2
b: 2
---
id: 3
c: 3
'''

[diffEmptySelector]
description = "Test diff with empty selector on single documents"
diff.result.code = '''
$match: {}
b: 2
'''
diff.selector = []
diff.base.filename = "a.yaml"
diff.base.code = '''
a: 1
'''
diff.target.filename = "b.yaml"
diff.target.code = '''
a: 1
b: 2
'''

[intersectEmptySelector]
description = "Test intersect with empty selector on single documents"
intersect.result.code = '''
a: 1
'''
intersect.selector = []

[[intersectEmptySelector.intersect.inputs]]
filename = "a.yaml"
code = '''
a: 1
b: 2
'''

[[intersectEmptySelector.intersect.inputs]]
filename = "b.yaml"
code = '''
a: 1
c: 3
'''

[intersectSkipRequiredDifferentTypes]
description = "Test intersect with different types skipping $required"
intersect.result.code = ""

[[intersectSkipRequiredDifferentTypes.intersect.inputs]]
filename = "a.yaml"
code = "x: 1"

[[intersectSkipRequiredDifferentTypes.intersect.inputs]]
filename = "b.yaml"
code = '"string value"'

[intersectSkipRequiredMapMismatch]
description = "Test intersect with map value mismatch skipping $required"
intersect.result.code = '''
x: 1
'''

[[intersectSkipRequiredMapMismatch.intersect.inputs]]
filename = "a.yaml"
code = '''
x: 1
y: 2
'''

[[intersectSkipRequiredMapMismatch.intersect.inputs]]
filename = "b.yaml"
code = '''
x: 1
y: 3
'''

[intersectSkipRequiredListNoCommon]
description = "Test intersect with no common list elements skipping $required"
intersect.result.code = ""

[[intersectSkipRequiredListNoCommon.intersect.inputs]]
filename = "a.yaml"
code = '''
items:
  - a
  - b
'''

[[intersectSkipRequiredListNoCommon.intersect.inputs]]
filename = "b.yaml"
code = '''
items:
  - c
  - d
'''

[intersectSkipRequiredListVsMap]
description = "Test intersect with list vs map skipping $required"
intersect.result.code = ""

[[intersectSkipRequiredListVsMap.intersect.inputs]]
filename = "a.yaml"
code = '''
x:
  - 1
  - 2
'''

[[intersectSkipRequiredListVsMap.intersect.inputs]]
filename = "b.yaml"
code = '''
x:
  a: 1
'''

[intersectEmptyObjects]
description = "Test intersect with empty objects"
intersect.result.code = ""

[[intersectEmptyObjects.intersect.inputs]]
filename = "a.yaml"
code = '''
x: {}
y: 1
'''

[[intersectEmptyObjects.intersect.inputs]]
filename = "b.yaml"
code = '''
x: {}
y: 2
'''

[intersectNullValues]
description = "Test intersect with null values"
intersect.result.code = '''
x: null
'''

[[intersectNullValues.intersect.inputs]]
filename = "a.yaml"
code = '''
x: null
y: 1
'''

[[intersectNullValues.intersect.inputs]]
filename = "b.yaml"
code = '''
x: null
y: 2
'''

[intersectNullValuesSkipRequired]
description = "Test intersect with null values skipping $required"
intersect.result.code = '''
x: null
'''

[[intersectNullValuesSkipRequired.intersect.inputs]]
filename = "a.yaml"
code = '''
x: null
y: 1
'''

[[intersectNullValuesSkipRequired.intersect.inputs]]
filename = "b.yaml"
code = '''
x: null
y: 2
'''

[intersectEmptyVsNonEmpty]
description = "Test intersect empty object vs non-empty"
intersect.result.code = ""

[[intersectEmptyVsNonEmpty.intersect.inputs]]
filename = "a.yaml"
code = '''
x: {}
'''

[[intersectEmptyVsNonEmpty.intersect.inputs]]
filename = "b.yaml"
code = '''
x:
  a: 1
'''

[intersectEmptyVsNonEmptySkipRequired]
description = "Test intersect empty object vs non-empty skipping $required"
intersect.result.code = ""

[[intersectEmptyVsNonEmptySkipRequired.intersect.inputs]]
filename = "a.yaml"
code = '''
x: {}
'''

[[intersectEmptyVsNonEmptySkipRequired.intersect.inputs]]
filename = "b.yaml"
code = '''
x:
  a: 1
'''

[intersectMixedEmptyNullValues]
description = "Test intersect with mix of empty, null, and values"
intersect.result.code = '''
nested:
  x: 1
null_val: null
value: 1
'''

[[intersectMixedEmptyNullValues.intersect.inputs]]
filename = "a.yaml"
code = '''
empty: {}
null_val: null
value: 1
nested:
  x: 1
  y: {}
'''

[[intersectMixedEmptyNullValues.intersect.inputs]]
filename = "b.yaml"
code = '''
empty: {}
null_val: null
value: 1
nested:
  x: 1
  y: {}
'''

[intersectOnlyEmptyObjectsSkipRequired]
description = "Test intersect with only empty objects skipping $required"
intersect.result.code = ""

[[intersectOnlyEmptyObjectsSkipRequired.intersect.inputs]]
filename = "a.yaml"
code = '{}'

[[intersectOnlyEmptyObjectsSkipRequired.intersect.inputs]]
filename = "b.yaml"
code = '{}'

[intersectEmptyRootSkipRequired]
description = "Test intersect with no common fields skipping $required"
intersect.result.code = ""

[[intersectEmptyRootSkipRequired.intersect.inputs]]
filename = "a.yaml"
code = '''
x: 1
'''

[[intersectEmptyRootSkipRequired.intersect.inputs]]
filename = "b.yaml"
code = '''
y: 2
'''


[evaluateSortByPath]
description = "Test sorting output documents by path"
evaluate.result.code = '''
name: alpha
value: 2
---
name: mike
value: 3
---
name: zulu
value: 1
'''
evaluate.sort = ["name"]

[[evaluateSortByPath.evaluate.inputs]]
filename = "a.yaml"
code = '''
---
name: zulu
value: 1
---
name: alpha
value: 2
---
name: mike
value: 3
'''

[evaluateSortByNestedPath]
description = "Test sorting output documents by nested path"
evaluate.result.code = '''
metadata:
  name: doc1
  priority: 10
---
metadata:
  name: doc2
  priority: 1
---
metadata:
  name: doc3
  priority: 2
'''
evaluate.sort = ["metadata.name"]

[[evaluateSortByNestedPath.evaluate.inputs]]
filename = "a.yaml"
code = '''
---
metadata:
  name: doc1
  priority: 10
---
metadata:
  name: doc2
  priority: 1
---
metadata:
  name: doc3
  priority: 2
'''

###############################################################################
# Compare Operations
###############################################################################

[compareSimple]
description = "Test compare of two files with differences"
compare.result.code = '''
--- a.yaml
+++ b.yaml
@@ -1,2 +1,2 @@
 a: 1
-b: 2
+b: 3
'''
compare.left.filename = "a.yaml"
compare.left.code = '''
a: 1
b: 2
'''
compare.right.filename = "b.yaml"
compare.right.code = '''
a: 1
b: 3
'''

###############################################################################
# Multiple Sort Paths
###############################################################################

[evaluateMultipleSortPaths]
description = "Test sorting with multiple sort paths"
evaluate.result.code = '''
category: a
name: beta
value: 2
---
category: a
name: delta
value: 4
---
category: b
name: alpha
value: 1
---
category: b
name: gamma
value: 3
'''
evaluate.sort = ["category", "name"]

[[evaluateMultipleSortPaths.evaluate.inputs]]
filename = "a.yaml"
code = '''
---
category: b
name: gamma
value: 3
---
category: a
name: delta
value: 4
---
category: b
name: alpha
value: 1
---
category: a
name: beta
value: 2
'''

[evaluateMultipleSortPathsWithMissing]
description = "Test sorting with multiple sort paths where some paths are missing"
evaluate.result.code = '''
category: a
name: beta
value: 2
---
category: a
name: delta
subcategory: x
value: 4
---
category: b
name: gamma
value: 3
---
category: b
name: alpha
subcategory: "y"
value: 1
'''
evaluate.sort = ["category", "subcategory", "name"]

[[evaluateMultipleSortPathsWithMissing.evaluate.inputs]]
filename = "a.yaml"
code = '''
---
category: b
name: gamma
value: 3
---
category: a
subcategory: x
name: delta
value: 4
---
category: b
subcategory: y
name: alpha
value: 1
---
category: a
name: beta
value: 2
'''

###############################################################################
# Multiple Selectors
###############################################################################

[diffMultipleSelectors]
description = "Test diff with multiple selectors"
diff.result.code = '''
$match:
  kind: Service
  metadata:
    name: api
metadata:
  labels:
    version: v2
---
$match:
  kind: Service
  metadata:
    name: web
$output: false
'''
diff.selector = ["kind", "metadata.name"]
diff.base.filename = "a.yaml"
diff.base.code = '''
---
kind: Service
metadata:
  name: api
  labels:
    version: v1
---
kind: Service
metadata:
  name: web
  labels:
    version: v1
'''
diff.target.filename = "b.yaml"
diff.target.code = '''
kind: Service
metadata:
  name: api
  labels:
    version: v2
'''

[intersectMultipleSelectors]
description = "Test intersect with multiple selectors"
intersect.result.code = '''
kind: Service
metadata:
  labels:
    app: myapp
  name: api
'''
intersect.selector = ["kind", "metadata.name"]

[[intersectMultipleSelectors.intersect.inputs]]
filename = "a.yaml"
code = '''
---
kind: Service
metadata:
  name: api
  labels:
    app: myapp
    version: v1
---
kind: Service
metadata:
  name: web
  labels:
    app: webapp
'''

[[intersectMultipleSelectors.intersect.inputs]]
filename = "b.yaml"
code = '''
---
kind: Service
metadata:
  name: api
  labels:
    app: myapp
    env: prod
---
kind: Deployment
metadata:
  name: api
spec:
  replicas: 3
'''

[diffMultipleSelectorsWithMissing]
description = "Test diff with multiple selectors where some paths are missing"
diff.result.code = '''
$match:
  kind: Service
  metadata:
    name: api
metadata:
  labels:
    version: v2
---
$match:
  kind: Service
  metadata:
    name: web
    namespace: prod
$output: false
'''
diff.selector = ["kind", "metadata.name", "metadata.namespace"]
diff.base.filename = "a.yaml"
diff.base.code = '''
---
kind: Service
metadata:
  name: api
  labels:
    version: v1
---
kind: Service
metadata:
  name: web
  namespace: prod
  labels:
    version: v1
'''
diff.target.filename = "b.yaml"
diff.target.code = '''
kind: Service
metadata:
  name: api
  labels:
    version: v2
'''