###############################################################################
# Delete Operations ($delete)
###############################################################################

[listDeleteExtra]
description = "Test error when $delete has extra keys"
eval = ["a.b.yaml"]
format = "yaml"
errors = ["extra keys"]
files."a.yaml" = '''
- x: 1
- x: 2
'''
files."a.b.yaml" = '''
- x: 3
- $delete:
    x: 2
  x: 4
'''

[mapDelete]
description = "Test map deletion with $delete directive"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
a: 1
c: 3
'''
files."a.yaml" = '''
a: 1
b: 2
'''
files."a.b.yaml" = '''
b: $delete
c: 3
'''

[mapDeleteNested]
description = "Test nested map deletion with $delete directive"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
x:
  a: 1
  c: 3
'''
files."a.yaml" = '''
x:
  a: 1
  b: 2
'''
files."a.b.yaml" = '''
x:
  b: $delete
  c: 3
'''

[listDelete]
description = "Test list deletion with $delete directive"
eval = ["a.b.yaml"]
format = "json"
expected = '''
[{"x":1},{"x":3}]
'''
files."a.yaml" = '''
- x: 1
- x: 2
'''
files."a.b.yaml" = '''
- x: 3
- $delete:
    x: 2
'''

[listDeletePartialList]
description = "Test partial list deletion with nested structures"
eval = ["a.b.yaml"]
format = "json"
expected = '''
[{"x":[{"a":1}]},{"x":[{"d":4}]}]
'''
files."a.yaml" = '''
- x:
  - a: 1
- x:
  - b: 2
  - c: 3
'''
files."a.b.yaml" = '''
- x:
  - d: 4
- $delete:
    x:
      - b: 2
'''

[listDeletePartialMap]
description = "Test list deletion with partial map matching"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
- x: 1
- x: 3
'''
files."a.yaml" = '''
- x: 1
- x: 2
  z: 5
'''
files."a.b.yaml" = '''
- x: 3
- $delete:
    x: 2
'''

[mergeDeleteExisting]
description = "Test $delete directive behavior in merge"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
a: 1
b: 2
c: 3
'''
files."a.yaml" = '''
a: $delete
b: 2
'''
files."a.b.yaml" = '''
a: 1
c: 3
'''

###############################################################################
# Replace Operations ($replace)
###############################################################################

[listReplaceExtra]
description = "Test error when $replace has extra keys"
eval = ["a.b.yaml"]
format = "yaml"
errors = ["bool as reference: invalid type"]
files."a.yaml" = '''
- 1
'''
files."a.b.yaml" = '''
- 2
- $replace: true
  a: 1
'''

[replaceCrossDocShortDot]
description = "Test error with invalid replace path reference"
eval = ["a.yaml"]
format = "yaml"
errors = ["reference not found"]
files."a.yaml" = '''
$output: false
a: 1
b:
  c:
    d: 4
---
e: 5
$replace: [{a: 1}, b.c]
'''

[mapReplace]
description = "Test map replacement with $replace directive"
eval = ["a.b.yaml"]
format = "json"
expected = '''
{"b":2}
'''
files."a.yaml" = '''
a: 1
'''
files."a.b.yaml" = '''
b: 2
$replace: true
'''

[replaceMap]
description = "Test map replacement with $replace directive (path reference)"
eval = ["a.yaml"]
format = "json"
expected = '''
{"foo":{"bar":{"a":1}},"zig":{"a":1}}
'''
files."a.yaml" = '''
foo:
  bar:
    a: 1
zig:
  b: 2
  $replace: foo.bar
'''

[listReplace]
description = "Test list replacement with $replace directive"
eval = ["a.b.yaml"]
format = "json"
expected = '''
[2]
'''
files."a.yaml" = '''
- 1
'''
files."a.b.yaml" = '''
- 2
- $replace
'''

[replaceCrossDoc]
description = "Test cross-document replacement with $replace"
eval = ["a.yaml"]
format = "yaml"
expected = '''
a: 1
b: 2
---
a: 1
b: 2
'''
files."a.yaml" = '''
a: 1
b: 2
---
c: 3
$replace:
  $match:
    a: 1
'''

[replaceCrossDocPath]
description = "Test cross-document replacement with path extraction"
eval = ["a.yaml"]
format = "yaml"
expected = '''
c: 3
'''
files."a.yaml" = '''
$output: false
a: 1
b:
  c: 3
---
d: 4
$replace:
  $match:
    a: 1
  $path: b
'''

[replaceCrossDocString]
description = "Test cross-document replacement with string output"
eval = ["a.yaml"]
format = "yaml"
expected = '''
foo
'''
files."a.yaml" = '''
a: 1
b: foo
$output: false
---
c: 3
$replace:
  $match:
    a: 1
  $path: b
'''

[replaceString]
description = "Test string replacement using $replace directive"
eval = ["a.yaml"]
format = "yaml"
expected = '''
foo: bar
zig:
  b: 2
  zag: bar
'''
files."a.yaml" = '''
foo: bar
zig:
  b: 2
  zag: $replace:foo
'''

[listReplaceTrue]
description = "Test list replacement with $replace: true"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
- 2
'''
files."a.yaml" = '''
- 1
'''
files."a.b.yaml" = '''
- 2
- $replace: true
'''

[replaceList]
description = "Test $replace directive replacing list contents"
eval = ["a.yaml"]
format = "yaml"
expected = '''
foo:
  bar:
    - a: 1
zig:
  - a: 1
'''
files."a.yaml" = '''
foo:
  bar:
    - a: 1
zig:
  - b: 2
  - $replace: foo.bar
'''

###############################################################################
# Merge Operations ($merge)
###############################################################################

[mergeLoop]
description = "Test circular merge reference error"
eval = ["a.yaml"]
format = "yaml"
errors = ["circular reference"]
files."a.yaml" = '''
a: $merge:b
b: $merge:a
'''

[mergeCrossDocShortDot]
description = "Test error with invalid merge path reference"
eval = ["a.yaml"]
format = "yaml"
errors = ["reference not found"]
files."a.yaml" = '''
$output: false
a: 1
b:
  c:
    d: 4
---
e: 5
$merge: [{a: 1}, b.c]
'''

[mergeDeleteMissingKey]
description = "Test error when deleting non-existent key"
eval = ["a.b.yaml"]
format = "yaml"
errors = ["useless override"]
files."a.yaml" = '''
a: 1
'''
files."a.b.yaml" = '''
b: $delete
'''

[mergeMapDeleteUseless]
description = "Test error for useless delete operation"
eval = ["a.b.yaml"]
format = "yaml"
errors = ["useless override"]
files."a.yaml" = '''
a: 1
'''
files."a.b.yaml" = '''
b: $delete
'''

[mergeMapUseless]
description = "Test error for redundant merge"
eval = ["a.b.yaml"]
format = "yaml"
errors = ["useless override"]
files."a.yaml" = '''
a: 1
'''
files."a.b.yaml" = '''
a: 1
'''

[mergeMap]
description = "Test map merging with $merge directive"
eval = ["a.yaml"]
format = "json"
expected = '''
{"foo":{"bar":{"a":1}},"zig":{"a":1,"b":2}}
'''
files."a.yaml" = '''
foo:
  bar:
    a: 1
zig:
  b: 2
  $merge: foo.bar
'''

[mergeCrossDocShortList]
description = "Test cross-document merging with lists"
eval = ["a.yaml"]
format = "yaml"
expected = '''
- 2
- 3
---
- 1
- 2
- 3
'''
files."a.yaml" = '''
- 2
- 3
---
- 1
- $merge: [[2]]
'''

[mergeCrossDocShortScalar]
description = "Test cross-document merging with scalar values"
eval = ["a.yaml"]
format = "yaml"
expected = '''
c: 3
d: 4
'''
files."a.yaml" = '''
$output: false
a: 1
b: 3
---
c:
  $merge: [{a: 1}, b]
d: 4
'''

[mergePathDot]
description = "Test merging with dot notation in path"
eval = ["a.yaml"]
format = "yaml"
expected = '''
d: 4
e: 3
'''
files."a.yaml" = '''
$output: false
a: 1
b:
  c.d:
    e: 3
---
d: 4
$merge:
  $match:
    a: 1
  $path: [b, c.d]
'''

[mergeScalarAsKey]
description = "Test merging using scalar value as key reference"
eval = ["a.yaml"]
format = "yaml"
expected = '''
foo: bar
zig: bar
'''
files."a.yaml" = '''
foo: bar
zig:
  $merge: foo
'''

[mergeStringDot]
description = "Test merging values when key contains dot"
eval = ["a.yaml"]
format = "yaml"
expected = '''
foo:
  c.d: bar
zig:
  b: 2
  zag: bar
'''
files."a.yaml" = '''
foo:
  c.d: bar
zig:
  b: 2
  zag: $merge:[foo,c.d]
'''

[mergeValueReference]
description = "Test using $merge within $value directive"
eval = ["a.yaml"]
format = "yaml"
expected = '''
a:
  b:
    c: 1
  d: "1"
'''
files."a.yaml" = '''
a:
  b:
    c: 1
  d:
    $value: ['$merge:a.b.c']
    $encode: join
'''

[mergeChainLayers]
description = "Test chained merge operations across layers"
eval = ["a.b.c.yaml"]
format = "yaml"
expected = '''
a: 1
b: 2
c: 3
'''
files."a.yaml" = '''
a: 1
'''
files."a.b.yaml" = '''
b: 2
'''
files."a.b.c.yaml" = '''
c: 3
'''

[mergeListNil]
description = "Test merging list with null value"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
- 1
- 2
'''
files."a.yaml" = '''
~
'''
files."a.b.yaml" = '''
- 1
- 2
'''

[mergeListString]
description = "Test merging string into list"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
hello
'''
files."a.yaml" = '''
- 1
- 2
'''
files."a.b.yaml" = '''
hello
'''

[mergeListWithNull]
description = "Test merging list containing null values"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
- 1
- null
- 3
- 4
'''
files."a.yaml" = '''
- 1
- null
- 3
'''
files."a.b.yaml" = '''
- 4
'''

[mergeMapNil]
description = "Test null value overriding map value"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
a: null
'''
files."a.yaml" = '''
a: 1
'''
files."a.b.yaml" = '''
a: null
'''

[mergeChain]
description = "Test chained $merge operations"
eval = ["a.yaml"]
format = "yaml"
expected = '''
a: 1
b: 1
c: 4
d: 4
'''
files."a.yaml" = '''
a: 1
b: $merge:a
c: $merge:d
d: 4
'''

[mergeCrossDoc]
description = "Test $merge across YAML documents with $match"
eval = ["a.yaml"]
format = "yaml"
expected = '''
a: 1
b: 2
---
a: 1
b: 2
c: 3
'''
files."a.yaml" = '''
a: 1
b: 2
---
c: 3
$merge:
  $match:
    a: 1
'''

[mergeCrossDocList]
description = "Test merging lists across documents with matching"
eval = ["a.yaml"]
format = "yaml"
expected = '''
- 2
- 3
---
- 1
- 2
- 3
'''
files."a.yaml" = '''
- 2
- 3
---
- 1
- $merge:
    $match:
      - 2
'''

[mergeCrossDocPath]
description = "Test merging with path selection across documents"
eval = ["a.yaml"]
format = "yaml"
expected = '''
c: 3
d: 4
'''
files."a.yaml" = '''
$output: false
a: 1
b:
  c: 3
---
d: 4
$merge:
  $match:
    a: 1
  $path: b
'''

[mergeCrossDocShort]
description = "Test short syntax for merge across documents"
eval = ["a.yaml"]
format = "yaml"
expected = '''
c: 3
d: 4
'''
files."a.yaml" = '''
$output: false
a: 1
b:
  c: 3
---
d: 4
$merge: [{a: 1}, b]
'''

[mergeList]
description = "Test $merge with list values"
eval = ["a.yaml"]
format = "yaml"
expected = '''
foo:
  bar:
    - a: 1
zig:
  - b: 2
  - a: 1
'''
files."a.yaml" = '''
foo:
  bar:
    - a: 1
zig:
  - b: 2
  - $merge: foo.bar
'''

[mergeListMulti]
description = "Test multiple merges within a list"
eval = ["a.yaml"]
format = "yaml"
expected = '''
foo:
  bar:
    - a: 1
  zag:
    - c: 3
zig:
  - b: 2
  - c: 3
  - a: 1
'''
files."a.yaml" = '''
foo:
  bar:
    - a: 1
  zag:
    - c: 3
zig:
  - b: 2
  - $merge: foo.zag
  - $merge: foo.bar
'''

[mergeNum]
description = "Test merging numeric values"
eval = ["a.yaml"]
format = "yaml"
expected = '''
foo: 1
zig:
  b: 2
  zag: 1
'''
files."a.yaml" = '''
foo: 1
zig:
  b: 2
  zag: $merge:foo
'''

[mergeString]
description = "Test $merge with string values"
eval = ["a.yaml"]
format = "yaml"
expected = '''
foo: bar
zig:
  b: 2
  zag: bar
'''
files."a.yaml" = '''
foo: bar
zig:
  b: 2
  zag: $merge:foo
'''

[mapMerge]
description = "Test simple map merging"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
a: 1
b: 2
'''
files."a.yaml" = '''
a: 1
'''
files."a.b.yaml" = '''
b: 2
'''

[mergeMapWithNil]
description = "Test merging null value into map"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
x:
  a: 1
  b: 2
"y": null
z: null
'''
files."a.yaml" = '''
x:
  a: 1
  b: 2
y: null
'''
files."a.b.yaml" = '''
z:
  $merge: y
  c: 3
'''

[mergeMapWithScalar]
description = "Test merging scalar value into map"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
x:
  a: 1
  b: 2
"y": 10
z: 10
'''
files."a.yaml" = '''
x:
  a: 1
  b: 2
y: 10
'''
files."a.b.yaml" = '''
z:
  $merge: y
  c: 3
'''

[mergeRace]
description = "Test merge with required fields resolution order"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
a: 1
b: 1
c:
  a: 1
'''
files."a.yaml" = '''
a: $required
b: $merge:a
c:
  a: 1
'''
files."a.b.yaml" = '''
$merge: c
'''

[mergeStringIntoMapError]
description = "Test merging string value replaces map entirely"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
a: string
'''
files."a.yaml" = '''
a:
  b: 1
  c: 2
'''
files."a.b.yaml" = '''
a: "string"
'''

###############################################################################
# Match Operations ($match)
###############################################################################

[matchMulti]
description = "Test error with multiple matches in $replace"
eval = ["a.yaml"]
format = "yaml"
errors = ["multiple documents $match"]
files."a.yaml" = '''
a: 1
b: 2
$output: false
---
a: 1
b: 3
$output: false
---
$replace:
  $match:
    a: 1
  $path: b
'''

[matchMap]
description = "Test $match directive for selective document processing"
eval = ["a.b.yaml"]
format = "json"
expected = '''
{"a":1,"d":4}
{"b":2,"c":3}
'''
files."a.yaml" = '''
a: 1
---
b: 2
'''
files."a.b.yaml" = '''
$match:
  b: 2
c: 3
---
$match:
  a: 1
d: 4
'''

[matchEmptyMap]
description = "Test $match directive with empty map"
eval = ["a.yaml"]
format = "yaml"
expected = '''
a: {}
b: 2
'''
files."a.yaml" = '''
a: {}
---
$match:
  a: {}
b: 2
'''

[matchInvert]
description = "Test $match with $invert directive"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
a: 1
c: 3
---
b: 2
'''
files."a.yaml" = '''
a: 1
---
b: 2
'''
files."a.b.yaml" = '''
$match:
  b: 2
  $invert: true
c: 3
'''

[matchListValue]
description = "Test $match in list with $value replacement"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
a:
  - b: 1
    d: 4
  - c: 2
'''
files."a.yaml" = '''
a:
  - b: 1
  - c: 2
'''
files."a.b.yaml" = '''
a:
  - $match:
      b: 1
    $value:
      d: 4
'''

[matchMultiDoc]
description = "Test $match applying to multiple documents"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
a: 1
b: 2
d: 4
---
a: 1
c: 3
d: 4
'''
files."a.yaml" = '''
a: 1
b: 2
---
a: 1
c: 3
'''
files."a.b.yaml" = '''
$match:
  a: 1
d: 4
'''

[matchPartial]
description = "Test $match with partial map matching"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
x:
  b: 1
  c: 2
  d: 3
'''
files."a.yaml" = '''
x:
  b: 1
  c: 2
'''
files."a.b.yaml" = '''
$match:
  x: {}
x:
  d: 3
'''

[streamAdd]
description = "Test adding new document to stream"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
a: 1
b: 2
---
c: 3
'''
files."a.yaml" = '''
a: 1
b: 2
'''
files."a.b.yaml" = '''
$match: null
c: 3
'''

[streamMatchNull]
description = "Test stream with null matching"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
a: 1
---
b: 2
---
c: 3
'''
files."a.yaml" = '''
a: 1
---
b: 2
'''
files."a.b.yaml" = '''
$match: null
c: 3
'''

[matchArgs]
description = "Test $match directive across multiple evaluated files"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
expected = '''
a: 1
d: 4
---
b: 2
c: 3
'''
files."a.yaml" = '''
a: 1
---
b: 2
'''
files."b.yaml" = '''
$match:
  b: 2
c: 3
---
$match:
  a: 1
d: 4
'''

###############################################################################
# List Operations
###############################################################################

[listMerge]
description = "Test default list merge behavior (concatenation)"
eval = ["a.b.yaml"]
format = "json"
expected = '''
[1,2]
'''
files."a.yaml" = '''
- 1
'''
files."a.b.yaml" = '''
- 2
'''

[listMatch]
description = "Test list matching and modification"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
- a: 1
- b: 10
'''
files."a.yaml" = '''
- a: 1
- b: 2
'''
files."a.b.yaml" = '''
- $match:
    b: 2
  b: 10
'''

[listMatchValue]
description = "Test list matching with value replacement"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
- 1
- 10
'''
files."a.yaml" = '''
- 1
- 2
'''
files."a.b.yaml" = '''
- $match: 2
  $value: 10
'''

[listWithNull]
description = "Test preservation of null values in lists"
eval = ["a.yaml"]
format = "yaml"
expected = '''
x:
  - a
  - null
  - c
  - null
  - e
'''
files."a.yaml" = '''
x: [a, null, c, null, e]
'''

[listMatchValueMulti]
description = "Test list matching and replacement with multiple matches"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
- 1
- 10
- 10
'''
files."a.yaml" = '''
- 1
- 2
- 2
'''
files."a.b.yaml" = '''
- $match: 2
  $value: 10
'''

###############################################################################
# Encoding Operations ($encode)
###############################################################################

[encodeFlagsRequired]
description = "Test error when required field is missing in flags encoding"
eval = ["a.yaml"]
format = "yaml"
errors = ["required field not set"]
files."a.yaml" = '''
a: $required
$encode: flags
'''

[encodeTolist]
description = "Test tolist encoding with custom separator"
eval = ["a.yaml"]
format = "yaml"
expected = '''
- a=1
- b=2
- c
'''
files."a.yaml" = '''
a: 1
b: 2
c: ""
$encode: tolist:=
'''

[encodeValues]
description = "Test values encoding extracts map values"
eval = ["a.yaml"]
format = "yaml"
expected = '''
- 1
- 2
'''
files."a.yaml" = '''
a: 1
b: 2
$encode: values
'''

[encodeValuesWithName]
description = "Test values encoding with name parameter"
eval = ["a.yaml"]
format = "yaml"
expected = '''
- k2: v2
  name: k1
- k4: v4
  name: k3
'''
files."a.yaml" = '''
k1:
  k2: v2
k3:
  k4: v4
$encode: values:name
'''

[encodeValuesWithNameScalar]
description = "Test values encoding with name parameter for scalar values"
eval = ["a.yaml"]
format = "yaml"
errors = ["invalid type"]
files."a.yaml" = '''
a: 1
b: 2
$encode: values:name
'''

[encodePrefix]
description = "Test prefix encoding adds prefix to list items"
eval = ["a.yaml"]
format = "yaml"
expected = '''
- Xa
- X2
'''
files."a.yaml" = '''
- a
- 2
- $encode: prefix:X
'''

[encodeBase64Number]
description = "Test base64 encoding of numeric values"
eval = ["a.yaml"]
format = "yaml"
expected = '''
a: NDI=
'''
files."a.yaml" = '''
a:
  $value: 42 
  $encode: base64
'''

[encodeList]
description = "Test JSON encoding of list values"
eval = ["a.yaml"]
format = "yaml"
expected = '''
a: |
  [{"b":2},{"c":3}]
'''
files."a.yaml" = '''
a:
  - b: 2
  - c: 3
  - $encode: json
'''

[encodeMap]
description = "Test JSON encoding of map values"
eval = ["a.yaml"]
format = "yaml"
expected = '''
a: |
  {"b":2,"c":3}
'''
files."a.yaml" = '''
a:
  b: 2
  c: 3
  $encode: json
'''

[encodeJsonList]
description = "Test JSON encoding of list as multiline string"
eval = ["a.yaml"]
format = "yaml"
expected = '''
|
  [{"a":1},{"b":2}]
'''
files."a.yaml" = '''
- a: 1
- b: 2
- $encode: json
'''

[encodeFlags]
description = "Test flags encoding converts map to command-line flags"
eval = ["a.yaml"]
format = "yaml"
expected = '''
- --a=1
- --b=2
- --c
'''
files."a.yaml" = '''
a: 1
b: 2
c: ""
$encode: flags
'''

[encodeFlagsFlatten]
description = "Test flags encoding with flatten for mixed list content"
eval = ["a.yaml"]
format = "yaml"
expected = '''
- a
- b
- --c=3
- --d=4
- --e
- f
- g
'''
files."a.yaml" = '''
- - a
  - b
- c: 3
  d: 4
  e: ""
  $encode: flags
- f
- g
- $encode: flatten
'''

[encodeFlagsFlattenLayer]
description = "Test flags and flatten encoding across file inheritance layers"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
- a
- --b=2
- --c=3
'''
files."a.yaml" = '''
- - a
- b: 2
  $encode: flags
- $encode: flatten
'''
files."a.b.yaml" = '''
- $match: {}
  c: 3
'''

[encodeFlagsSublist]
description = "Test flags encoding with list values"
eval = ["a.yaml"]
format = "yaml"
expected = '''
- --a=1
- --b=2
- --b=c
- --b
'''
files."a.yaml" = '''
a: 1
b:
- 2
- c
- ""
$encode: flags
'''

[encodeMulti]
description = "Test multiple encoding directives (tolist and join)"
eval = ["a.yaml"]
format = "yaml"
expected = '''
a=1,b=2
'''
files."a.yaml" = '''
a: 1
b: 2
$encode: [tolist:=, "join:,"]
'''

[encodeSha256Number]
description = "Test SHA256 encoding of numeric values"
eval = ["a.yaml"]
format = "yaml"
expected = '''
a: 73475cb40a568e8da8a045ced110137e159f890ac4da883b6b17dc651b3a8049
'''
files."a.yaml" = '''
a:
  $value: 42
  $encode: sha256
'''

[encodeTolistLists]
description = "Test tolist encoding with list of maps"
eval = ["a.yaml"]
format = "yaml"
expected = '''
- a=1
- a=2
- b=3
'''
files."a.yaml" = '''
- a: 1
- a: 2
  b: 3
- $encode: tolist:=
'''

[encodeValue]
description = "Test JSON encoding of simple value"
eval = ["a.yaml"]
format = "yaml"
expected = '''
a: |
  "b"
'''
files."a.yaml" = '''
a:
  $value: b
  $encode: json
'''

[encodeValuesPrefix]
description = "Test values encoding with prefix field"
eval = ["a.yaml"]
format = "yaml"
expected = '''
- foo
- 1
- 2
'''
files."a.yaml" = '''
a: 1
b: 2
_prefix: foo
$encode: values
'''

[encodeBase64]
description = "Test base64 encoding with $encode directive"
eval = ["a.yaml"]
format = "yaml"
expected = '''
YQ==
'''
files."a.yaml" = '''
$value: a
$encode: base64
'''

[encodeJson]
description = "Test JSON encoding with $encode directive"
eval = ["a.yaml"]
format = "yaml"
expected = '''
|
  {"a":1,"b":2}
'''
files."a.yaml" = '''
a: 1
b: 2
$encode: json
'''

[encodeProperties]
description = "Test properties encoding with $encode directive"
eval = ["a.yaml"]
format = "yaml"
expected = '''
|
  a=1
  b=2
  nested.x=hello
  nested.y=world
'''
files."a.yaml" = '''
a: 1
b: 2
nested:
  x: hello
  y: world
$encode: properties
'''

[encodeSha256]
description = "Test SHA-256 encoding with $encode directive"
eval = ["a.yaml"]
format = "yaml"
expected = '''
ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb
'''
files."a.yaml" = '''
$value: a
$encode: sha256
'''

[encodeFlatten]
description = "Test flatten encoding with $encode directive"
eval = ["a.yaml"]
format = "yaml"
expected = '''
- a
- b
- c
- d
- e
'''
files."a.yaml" = '''
- - a
  - b
- - c
  - d
- e
- $encode: flatten
'''

[encodeJoin]
description = "Test join encoding with $encode directive"
eval = ["a.yaml"]
format = "yaml"
expected = '''
a24b
'''
files."a.yaml" = '''
$value: [a, 24, b]
$encode: join
'''

###############################################################################
# Decoding Operations ($decode)
###############################################################################

[decodeValue]
description = "Test decode JSON with $value and $decode directives"
eval = ["a.yaml"]
format = "yaml"
expected = '''
a:
  b: 1
  c: 2
'''
files."a.yaml" = '''
a:
  $decode: json
  $value: '{"b": 1, "c": 2}'
'''

[decodeJson]
description = "Test JSON decoding with $decode directive"
eval = ["a.yaml"]
format = "yaml"
expected = '''
a:
  foo: bar
'''
files."a.yaml" = '''
a:
  $value: |
    {"foo":"bar"}
  $decode: json
'''

[decodeProperties]
description = "Test properties decoding with $decode directive"
eval = ["a.yaml"]
format = "yaml"
expected = '''
config:
  app:
    name: myapp
    version: "1.0"
  db:
    host: localhost
    port: "5432"
'''
files."a.yaml" = '''
config:
  $value: |
    app.name=myapp
    app.version=1.0
    db.host=localhost
    db.port=5432
  $decode: properties
'''

###############################################################################
# String Interpolation
###############################################################################

[interpSimple]
description = "Test basic string interpolation"
eval = ["a.yaml"]
format = "yaml"
expected = '''
a: 1
b: foo
c:
  d: zig
e: foo bar zig zag 1 2
'''
files."a.yaml" = '''
a: 1
b: foo
c:
  d: zig
e: $"{b} bar {c.d} zag {a} 2"
'''

[interpKey]
description = "Test interpolation in map keys"
eval = ["a.yaml"]
format = "yaml"
expected = '''
a: foo
foo0: bar
'''
files."a.yaml" = '''
a: foo
$"{a}0": bar
'''

[interpInterp]
description = "Test chained interpolation"
eval = ["a.yaml"]
format = "yaml"
expected = '''
a: foo
b: foo
c: foo
'''
files."a.yaml" = '''
a: foo
b: $"{a}"
c: $"{b}"
'''

[interpRepeat]
description = "Test string interpolation with $repeat directive"
eval = ["a.yaml"]
format = "yaml"
expected = '''
a: foo-0
---
a: foo-1
'''
files."a.yaml" = '''
a: $"foo-{$repeat}"
$repeat: 2
'''

###############################################################################
# Repeat Operations ($repeat)
###############################################################################

[repeatDocList]
description = "Test $repeat directive with list documents"
eval = ["a.yaml"]
format = "yaml"
expected = '''
- b: 2
- c: 0
---
- b: 2
- c: 1
'''
files."a.yaml" = '''
- $repeat: 2
- b: 2
- c: $repeat
'''

[repeatDocMap]
description = "Test $repeat directive with map documents"
eval = ["a.yaml"]
format = "yaml"
expected = '''
a:
  b: 2
  c: 0
---
a:
  b: 2
  c: 1
'''
files."a.yaml" = '''
$repeat: 2
a:
  b: 2
  c: $repeat
'''

[repeatListValues]
description = "Test $repeat directive with list of values"
eval = ["a.yaml"]
format = "yaml"
expected = '''
fruit: apple
---
fruit: banana
---
fruit: cherry
'''
files."a.yaml" = '''
$repeat: ["apple", "banana", "cherry"]
fruit: $repeat
'''

[repeatInsideList]
description = "Test $repeat directive expanding items within a list"
eval = ["a.yaml"]
format = "yaml"
expected = '''
a:
  - b: 0
  - b: 1
  - b: 2
  - b: 3
'''
files."a.yaml" = '''
a:
  - $repeat: 4
    b: $repeat
'''

[repeatInsideMap]
description = "Test $repeat with dynamic key generation in maps"
eval = ["a.yaml"]
format = "yaml"
expected = '''
a:
  b0:
    c: 0
  b1:
    c: 1
  b2:
    c: 2
  b3:
    c: 3
'''
files."a.yaml" = '''
a:
  $"b{$repeat}":
    $repeat: 4
    c: $repeat
'''

[repeatMap]
description = "Test multi-dimensional repeat with string interpolation"
eval = ["a.yaml"]
format = "yaml"
expected = '''
a: x=0 y=0 xc=2 yc=3
b: 2
c: 3
---
a: x=0 y=1 xc=2 yc=3
b: 2
c: 3
---
a: x=0 y=2 xc=2 yc=3
b: 2
c: 3
---
a: x=1 y=0 xc=2 yc=3
b: 2
c: 3
---
a: x=1 y=1 xc=2 yc=3
b: 2
c: 3
---
a: x=1 y=2 xc=2 yc=3
b: 2
c: 3
'''
files."a.yaml" = '''
$repeat:
  x: 2
  y: 3
a: $"x={$repeat:x} y={$repeat:y} xc={$repeat.x} yc={$repeat.y}"
b: $merge:$repeat.x
c: $merge:$repeat.y
'''

[repeatInsideMapValue]
description = "Test $repeat with simple values in map"
eval = ["a.yaml"]
format = "yaml"
expected = '''
a:
  b0: 2
  b1: 2
  b2: 2
  b3: 2
'''
files."a.yaml" = '''
a:
  $"b{$repeat}":
    $repeat: 4
    $value: 2
'''

[repeatListInsideList]
description = "Test $repeat with list creating multiple list items"
eval = ["a.yaml"]
format = "yaml"
expected = '''
fruits:
  - name: apple
  - name: banana
  - name: cherry
'''
files."a.yaml" = '''
fruits:
  - name: $repeat
    $repeat: ["apple", "banana", "cherry"]
'''

[repeatListInsideMap]
description = "Test $repeat with list creating multiple map entries"
eval = ["a.yaml"]
format = "yaml"
expected = '''
fruits:
  item-apple:
    name: apple
  item-banana:
    name: banana
  item-cherry:
    name: cherry
'''
files."a.yaml" = '''
fruits:
  $"item-{$repeat}":
    name: $repeat
    $repeat: ["apple", "banana", "cherry"]
'''

[repeatListMixedTypes]
description = "Test $repeat with mixed data types creating documents"
eval = ["a.yaml"]
format = "yaml"
expected = '''
type: Type is 42
value: 42
---
type: Type is hello
value: hello
---
type: Type is true
value: true
---
type: Type is 3.14
value: 3.14
'''
files."a.yaml" = '''
$repeat: [42, "hello", true, 3.14]
value: $repeat
type: $"Type is {$repeat}"
'''

[repeatMapInsideMap]
description = "Test $repeat with map creating cartesian product"
eval = ["a.yaml"]
format = "yaml"
expected = '''
servers:
  server-dev-0:
    env: dev
    id: 0
  server-dev-1:
    env: dev
    id: 1
  server-prod-0:
    env: prod
    id: 0
  server-prod-1:
    env: prod
    id: 1
'''
files."a.yaml" = '''
servers:
  $"server-{$repeat:env}-{$repeat:id}":
    env: $repeat:env
    id: $repeat:id
    $repeat: {env: ["dev", "prod"], id: 2}
'''

[repeatRangeFirstLast]
description = "Test $repeat with $first and $last range parameters"
eval = ["a.yaml"]
format = "yaml"
expected = '''
a: 5
---
a: 6
---
a: 7
---
a: 8
---
a: 9
---
a: 10
'''
files."a.yaml" = '''
$repeat:
  $first: 5
  $last: 10
a: $repeat
'''

[repeatRangeInsideMap]
description = "Test $repeat with range parameters inside map"
eval = ["a.yaml"]
format = "yaml"
expected = '''
ports:
  port-8080:
    number: 8080
  port-8081:
    number: 8081
  port-8082:
    number: 8082
'''
files."a.yaml" = '''
ports:
  $"port-{$repeat}":
    number: $repeat
    $repeat: {$first: 8080, $count: 3}
'''

[repeatRangeNested]
description = "Test nested $repeat with range parameters"
eval = ["a.yaml"]
format = "yaml"
expected = '''
result: a=0 b=10
---
result: a=0 b=12
---
result: a=0 b=14
---
result: a=1 b=10
---
result: a=1 b=12
---
result: a=1 b=14
'''
files."a.yaml" = '''
$repeat:
  a: 2
  b:
    $first: 10
    $step: 2
    $count: 3
result: $"a={$repeat:a} b={$repeat:b}"
'''

[repeatSubstValue]
description = "Test $repeat with $merge directive"
eval = ["a.yaml"]
format = "yaml"
expected = '''
a: 0
b: 2
---
a: 1
b: 2
'''
files."a.yaml" = '''
$repeat: 2
a: $repeat
b: $merge:$repeat
'''

[repeatMapLayer]
description = "Test $repeat directive overriding in child layer"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
a: x=0
---
a: x=1
---
a: x=2
'''
files."a.yaml" = '''
$repeat:
  x: 2
a: $"x={$repeat:x}"
'''
files."a.b.yaml" = '''
$repeat:
  x: 3
'''

[repeatOverride]
description = "Test $repeat values propagating through inheritance"
eval = ["a.b.c.yaml"]
format = "yaml"
expected = '''
a: x=0 y=0 z=0
---
a: x=0 y=0 z=1
---
a: x=0 y=0 z=2
---
a: x=0 y=1 z=0
---
a: x=0 y=1 z=1
---
a: x=0 y=1 z=2
---
a: x=1 y=0 z=0
---
a: x=1 y=0 z=1
---
a: x=1 y=0 z=2
---
a: x=1 y=1 z=0
---
a: x=1 y=1 z=1
---
a: x=1 y=1 z=2
'''
files."a.yaml" = '''
$repeat:
  x: 2
  y: 2
  z: 2
a: $"x={$repeat:x} y={$repeat:y} z={$repeat:z}"
'''
files."a.b.yaml" = '''
$repeat:
  z: 3
'''
files."a.b.c.yaml" = '''
# No content - relies on inheritance
'''

[repeatUpperLayer]
description = "Test $repeat in upper layer file"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
a: base
b: x=0
---
a: base
b: x=1
---
a: base
b: x=2
'''
files."a.yaml" = '''
a: base
'''
files."a.b.yaml" = '''
$repeat:
  x: 3
b: $"x={$repeat:x}"
'''

# Repeat range parameter error cases
[repeatStepZero]
description = "Test $repeat with $step=0 error"
eval = ["a.yaml"]
format = "yaml"
expected = ""
errors = ["$step cannot be 0"]
files."a.yaml" = '''
$repeat:
  $first: 1
  $last: 5
  $step: 0
x: $repeat
'''

[repeatCountNegative]
description = "Test $repeat with negative $count error"
eval = ["a.yaml"]
format = "yaml"
expected = ""
errors = ["must be positive"]
files."a.yaml" = '''
$repeat:
  $first: 1
  $count: -1
x: $repeat
'''

[repeatAllThreeParams]
description = "Test $repeat with all three params error"
eval = ["a.yaml"]
format = "yaml"
expected = ""
errors = ["cannot specify all of"]
files."a.yaml" = '''
$repeat:
  $first: 1
  $last: 5
  $count: 3
x: $repeat
'''

[repeatNotDivisible]
description = "Test $repeat with non-divisible range error"
eval = ["a.yaml"]
format = "yaml"
expected = ""
errors = ["must be divisible by"]
files."a.yaml" = '''
$repeat:
  $first: 1
  $last: 11
  $step: 3
x: $repeat
'''

[repeatMissingParams]
description = "Test $repeat with only one parameter error"
eval = ["a.yaml"]
format = "yaml"
expected = ""
errors = ["must specify exactly 2"]
files."a.yaml" = '''
$repeat:
  $first: 1
x: $repeat
'''

[repeatSubst]
description = "Test $repeat with $match directive"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
a: 1
b: 2
c:
  d: foo-0
'''
files."a.yaml" = '''
a: 1
b: 2
'''
files."a.b.yaml" = '''
$match:
  a: 1
$repeat: 1
c:
  d: $"foo-{$repeat}"
'''

###############################################################################
# Output Control ($output)
###############################################################################

[outputMulti]
description = "Test $output directive for selective output"
eval = ["a.yaml"]
format = "yaml"
expected = '''
a: 1
b: 2
---
c: 3
'''
files."a.yaml" = '''
foo:
  bar:
    $output: true
    a: 1
    b: 2
  zig:
    $output: true
    c: 3
'''

[outputFalse]
description = "Test $output: false directive excludes content"
eval = ["a.yaml"]
format = "yaml"
expected = '''
c:
  d: 1
'''
files."a.yaml" = '''
a:
  $output: false
  b: 1
c:
  d: 1
'''

[outputFalseList]
description = "Test $output: false directive in list context"
eval = ["a.yaml"]
format = "yaml"
expected = '''
c:
  - d: 1
'''
files."a.yaml" = '''
a:
  - $output: false
  - b: 1
c:
  - d: 1
'''

[outputFalseRoot]
description = "Test $output: false directive at document root"
eval = ["a.yaml"]
format = "yaml"
expected = '''
a: 1
---
c: 3
'''
files."a.yaml" = '''
a: 1
---
b: 2
$output: false
---
c: 3
'''

[outputSingle]
description = "Test $output: true directive for single section"
eval = ["a.yaml"]
format = "yaml"
expected = '''
a: 1
b: 2
'''
files."a.yaml" = '''
foo:
  bar:
    $output: true
    a: 1
    b: 2
'''

[outputList]
description = "Test $output: true directive in list context"
eval = ["a.yaml"]
format = "yaml"
expected = '''
- a: 1
- b: 2
'''
files."a.yaml" = '''
foo:
  bar:
    - $output: true
    - a: 1
    - b: 2
'''

[outputMapInList]
description = "Test $output: true directive for map within list"
eval = ["a.yaml"]
format = "yaml"
expected = '''
c: 2
d: 3
'''
files."a.yaml" = '''
a:
  - b: 1
  - $output: true
    c: 2
    d: 3
'''

[outputAfterReplace]
description = "Test output control after replace operations"
eval = ["a.yaml"]
format = "yaml"
expected = '''
c: 2
'''
files."a.yaml" = '''
a:
  b: 2
  $output: false
c:
  $replace: a.b
'''

[outputTrueWithinFalse]
description = "Test nested output control (true within false)"
eval = ["a.yaml"]
format = "yaml"
expected = '''
b: 2
'''
files."a.yaml" = '''
$output: false
a:
  b: 2
  $output: true
'''

###############################################################################
# Parent and Inheritance ($parent)
###############################################################################

[parentCircular]
description = "Test circular parent reference error"
eval = ["a.yaml"]
format = "yaml"
errors = ["circular reference"]
files."a.yaml" = '''
# Test that circular parent references are handled gracefully
# a.yaml → b.yaml → a.yaml (circular)

$parent: b
data: "from a.yaml"
'''
files."b.yaml" = '''
# This creates a circular reference back to a.yaml
# b.yaml → a.yaml → b.yaml (circular)
$parent: a
data: "from b.yaml"
'''

[parentSet]
description = "Test $parent directive for explicit parent file reference"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
a: 1
b: 2
'''
files."a.b.yaml" = '''
$parent: c
a: 1
'''
files."c.yaml" = '''
b: 2
'''

[parentNull]
description = "Test setting $parent to null to prevent inheritance"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
a: 1
'''
files."a.b.yaml" = '''
$parent: null
a: 1
'''

[parentFalse]
description = "Test $parent: false disables inheritance"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
a: 1
'''
files."a.b.yaml" = '''
$parent: false
a: 1
'''

[parentMulti]
description = "Test multiple documents with different parents"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
a: 1
c: 3
---
b: 2
d: 4
'''
files."a.b.yaml" = '''
$parent: c
$match:
  c: 3
a: 1
---
$parent: d
$match:
  d: 4
b: 2
'''
files."c.yaml" = '''
c: 3
'''
files."d.yaml" = '''
$match: null
d: 4
'''

[parentMultiList]
description = "Test parent directive with list of parents"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
a: 1
c: 3
---
b: 2
d: 4
'''
files."a.b.yaml" = '''
$parent:
  - c
  - d
$match:
  c: 3
a: 1
---
$match:
  d: 4
b: 2
'''
files."c.yaml" = '''
c: 3
'''
files."d.yaml" = '''
d: 4
'''

[parentFalseToml]
description = "Test $parent: false in TOML format"
eval = ["a.b.toml"]
format = "toml"
expected = '''
a = 1
'''
files."a.toml" = '''
a = 2
b = 3
'''
files."a.b.toml" = '''
"$parent" = false
a = 1
'''

[parentComplex]
description = "Test complex parent patterns with wildcards"
eval = ["all.yaml", "variant.yaml"]
format = "yaml"
expected = '''
kind: Deployment
metadata:
  labels:
    variant: a
  name: user1
spec:
  replicas: 3
---
kind: Service
metadata:
  labels:
    variant: a
  name: user1
---
kind: Ingress
metadata:
  labels:
    variant: a
  name: user1
---
kind: Deployment
metadata:
  labels:
    variant: a
  name: user2
spec:
  replicas: 3
---
kind: Service
metadata:
  labels:
    variant: a
  name: user2
---
kind: Ingress
metadata:
  labels:
    variant: a
  name: user2
'''
files."all.yaml" = '''
$parent: resources.*
'''
files."variant.yaml" = '''
$match: {}
metadata:
  labels:
    variant: a
---
$match:
  kind: Deployment
spec:
  replicas: 3
'''
files."deployment.yaml" = '''
kind: Deployment
metadata:
  name: $required
'''
files."service.yaml" = '''
kind: Service
metadata:
  name: $required
'''
files."ingress.yaml" = '''
kind: Ingress
metadata:
  name: $required
'''
files."resources.yaml" = '''
$parent: [deployment, service, ingress]
'''
files."resources.user1.yaml" = '''
metadata:
  name: user1
'''
files."resources.user2.yaml" = '''
metadata:
  name: user2
'''

###############################################################################
# Format Support and Type Handling
###############################################################################

[jsonInputStreamConcat]
description = "Test handling of concatenated JSON objects without newlines"
eval = ["a.json"]
format = "yaml"
expected = '''
a: 1
---
b: 2
'''
files."a.json" = '''
{"a": 1}{"b": 2}
'''

[jsonInputStreamNewline]
description = "Test handling of JSON objects separated by newlines (JSON Lines)"
eval = ["a.json"]
format = "yaml"
expected = '''
a: 1
---
b: 2
'''
files."a.json" = '''
{"a": 1}
{"b": 2}
'''

[jsonLargeInt]
description = "Test preservation of large integer values"
eval = ["a.json"]
format = "json"
expected = '''
{"a":9223372036854775807,"b":2147483648}
'''
files."a.json" = '''
{"a": 9223372036854775807, "b": 2147483648}
'''

[tomlInputStream]
description = "Test TOML input stream with standard delimiter"
eval = ["a.toml"]
format = "yaml"
expected = '''
a: 1
---
b: 2
'''
files."a.toml" = '''
a = 1
---
b = 2
'''

[tomlInputStreamHugo]
description = "Test TOML input stream with Hugo-style delimiter"
eval = ["a.toml"]
format = "yaml"
expected = '''
a: 1
---
b: 2
'''
files."a.toml" = '''
a = 1
+++
b = 2
'''

[outputTomlStream]
description = "Test YAML to TOML stream output conversion"
eval = ["a.yaml"]
format = "toml"
expected = '''
a = 1
---
b = 2
'''
files."a.yaml" = '''
a: 1
---
b: 2
'''

[jsonInput]
description = "Test JSON input format support"
eval = ["a.b.json"]
format = "json-pretty"
expected = '''
{
  "a": 1,
  "b": 2
}
'''
files."a.json" = '''
{
	"a": 1
}
'''
files."a.b.json" = '''
{
	"b": 2
}
'''

[yamlTypes]
description = "Test YAML type handling and preservation"
eval = ["a.yaml"]
format = "yaml"
expected = '''
bool: true
float: 0.5
int: 42
"null": null
str: hello
timestamp: "2022-02-05T10:30:00.1Z"
'''
files."a.yaml" = '''
null: null
bool: true
str: hello
int: 42
float: 0.5
timestamp: 2022-02-05T10:30:00.1Z
'''

[jsonFloat]
description = "Test JSON float number handling"
eval = ["a.json"]
format = "json"
expected = '''
{"a":3.14,"b":12300000000}
'''
files."a.json" = '''
{"a": 3.14, "b": 1.23e10}
'''

[jsonlInput]
description = "Test JSONL input format"
eval = ["a.jsonl"]
format = "yaml"
expected = '''
a: 1
b: 2
---
c: 3
d: 4
'''
files."a.jsonl" = '''
{"a":1,"b":2}
{"c":3,"d":4}
'''

[jsonlOutput]
description = "Test JSONL output format"
eval = ["a.yaml"]
format = "jsonl"
expected = '''
{"a":1,"b":2}
{"c":3,"d":4}
'''
files."a.yaml" = '''
a: 1
b: 2
---
c: 3
d: 4
'''

[yamlEmptyDoc]
description = "Test handling of empty YAML documents"
eval = ["a.yaml"]
format = "yaml"
expected = '''
foo: bar
---
---
- 1
'''
files."a.yaml" = '''
foo: bar
---
---
- 1
'''

[outputYaml]
description = "Test YAML output with mixed formats"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
addr: 127.0.0.1
name: myService
port: 8081
'''
files."a.yaml" = '''
name: myService
addr: 127.0.0.1
port: 8080
'''
files."a.b.yaml" = '''
port: 8081
'''

[outputToml]
description = "Test TOML output format"
eval = ["a.b.toml"]
format = "toml"
expected = '''
addr = '127.0.0.1'
name = 'myService'
port = 8081
'''
files."a.yaml" = '''
name: myService
addr: 127.0.0.1
port: 8080
'''
files."a.b.toml" = '''
port = 8081
'''

[outputJsonPretty]
description = "Test JSON pretty output format"
eval = ["a.b.toml"]
format = "json-pretty"
expected = '''
{
  "addr": "127.0.0.1",
  "name": "myService",
  "port": 8081
}
'''
files."a.yaml" = '''
name: myService
addr: 127.0.0.1
port: 8080
'''
files."a.b.toml" = '''
port = 8081
'''

[formatUnknown]
description = "Test unknown format error"
eval = ["a.xyz"]
format = "xyz"
expected = ""
errors = ["unknown format", "Invalid value"]
[formatUnknown.files]
"a.xyz" = "x: 1"

###############################################################################
# Special Characters and Escaping
###############################################################################

[literalDollar]
description = "Test literal dollar sign escaping ($$)"
eval = ["a.yaml"]
format = "json"
expected = '''
{"listKey":["$instance",{"nested":{"$key":"$value"}}],"mapKey":"$pod"}
'''
files."a.yaml" = '''
listKey:
  - $$instance
  - nested:
      $$key: $$value
mapKey: $$pod
'''

###############################################################################
# Required Fields ($required)
###############################################################################

[requiredError]
description = "Test error when required field is not set"
eval = ["a.yaml"]
format = "yaml"
errors = ["required field not set"]
files."a.yaml" = '''
a: 1
b: $required
'''

[yamlAnchorsRequiredError]
description = "Test required field error with YAML anchors"
eval = ["a.yaml"]
format = "yaml"
errors = ["required field not set"]
files."a.yaml" = '''
a: &anchor
  $required
b: *anchor
'''

[requiredList]
description = "Test $required field in list context"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
- 1
'''
files."a.yaml" = '''
- $required
'''
files."a.b.yaml" = '''
- 1
'''

###############################################################################
# Error Handling
###############################################################################

[valueExtra]
description = "Test error when $value has extra keys"
eval = ["a.yaml"]
format = "yaml"
errors = ["extra keys"]
files."a.yaml" = '''
a:
  $value: "foo"
  b: 2
'''

[interpMissing]
description = "Test string interpolation with missing variable"
eval = ["a.yaml"]
format = "yaml"
errors = ["missing_variable: variable not found"]
files."a.yaml" = '''
# Test for string interpolation with missing variable
# This should trigger a variable not found error

result: $"Hello {missing_variable} world"
'''

###############################################################################
# Examples and Edge Cases
###############################################################################

[example1]
description = "Example from documentation showing basic inheritance"
eval = ["a.b.toml"]
format = "json"
expected = '''
{"addr":"127.0.0.1","name":"myService","port":8081}
'''
files."a.yaml" = '''
name: myService
addr: 127.0.0.1
port: 8080
'''
files."a.b.toml" = '''
port = 8081
'''

[ordered]
description = "Test preservation of key order in YAML"
eval = ["a.yaml"]
format = "yaml"
expected = '''
b: 2
---
a: 1
'''
files."a.yaml" = '''
b: 2
---
a: 1
'''

[validateNonDirective]
description = "Test that variable-like strings are not treated as directives"
eval = ["a.yaml"]
format = "yaml"
expected = '''
a: $FOO
b: ${FOO}
c: $(FOO)
'''
files."a.yaml" = '''
a: $FOO
b: ${FOO}
c: $(FOO)
'''

[args]
description = "Test evaluating multiple files with inheritance"
eval = ["a.b.yaml", "c.d.yaml"]
format = "yaml"
expected = '''
a: 1
c: 3
d: 4
'''
files."a.yaml" = '''
a: 1
'''
files."a.b.yaml" = '''
b: 2
'''
files."c.yaml" = '''
$match: {}
b: 10
c: 3
'''
files."c.d.yaml" = '''
b: $delete
d: 4
'''

[yamlAnchors]
description = "Test YAML anchor and alias support"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
a: 1
b: 2
c: 1
'''
files."a.yaml" = '''
a: &anchor
  1
b: *anchor
c: *anchor
'''
files."a.b.yaml" = '''
b: 2
'''

[yamlMerge]
description = "Test YAML merge key (<<) support"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
- bar: 2
  foo: 1
  name: original
- bar: 2
  foo: 1
  isCopy: true
  name: copy
'''
files."a.yaml" = '''
- &anchor
  bar: 2
  foo: 1
  name: original
- name: copy
  <<: *anchor
'''
files."a.b.yaml" = '''
- $match:
    name: copy
  isCopy: true
'''

[yamlMergeMultiple]
description = "Test YAML merge key with multiple sources"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
- bar: 2
  foo: 1
  name: original
- baz: 3
  foo: 4
- bar: 2
  baz: 3
  foo: 4
  isCopy: true
  name: copy
'''
files."a.yaml" = '''
- &anchor
  bar: 2
  foo: 1
  name: original
- &otherAnchor
  baz: 3
  foo: 4
- name: copy
  <<:
    - *otherAnchor
    - *anchor
'''
files."a.b.yaml" = '''
- $match:
    name: copy
  isCopy: true
'''

[requiredSet]
description = "Test $required field is set by child file"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
a: 1
b: 2
c: 3
'''
files."a.yaml" = '''
a: 1
b: $required
'''
files."a.b.yaml" = '''
b: 2
c: 3
'''

###############################################################################
# Root Path Restrictions
###############################################################################

[rootPathCur]
description = "Test root path restriction with current directory"
eval = ["a.yaml"]
format = "yaml"
rootPath = "."
expected = '''
a: 1
b: 1
'''
files."a.yaml" = '''
a: 1
b: $merge:a
'''

[rootPathRoot]
description = "Test root path with root directory (no restriction)"
eval = ["a.yaml"]
format = "yaml"
rootPath = "/"
expected = '''
a: 1
b: 1
'''
files."a.yaml" = '''
a: 1
b: $merge:a
'''


[rootPathSub]
description = "Test root path with subdirectory"
eval = ["sub/a.yaml"]
format = "yaml"
rootPath = "sub"
expected = '''
a: 1
b: 1
'''
files."sub/a.yaml" = '''
a: 1
b: $merge:a
'''

[rootPathBreak]
description = "Test root path restriction prevents access outside root"
eval = ["a.yaml"]
format = "yaml"
rootPath = "sub"
errors = ["outside root path", "no such file or directory"]
files."a.yaml" = '''
a: 1
b: $merge:a
'''

###############################################################################
# Environment Variables ($env)
###############################################################################

[envMapValue]
description = "Test environment variable in map value"
eval = ["a.yaml"]
format = "yaml"
env = { FOO = "test" }
expected = '''
a: test
'''
files."a.yaml" = '''
a: $env:FOO
'''

[envMapKey]
description = "Test environment variable in map key"
eval = ["a.yaml"]
format = "yaml"
env = { FOO = "test" }
expected = '''
test: 1
'''
files."a.yaml" = '''
$env:FOO: 1
'''

[encodeBase64Env]
description = "Test base64 encoding with environment variable"
eval = ["a.yaml"]
format = "yaml"
env = { FOO = "test" }
expected = '''
a: dGVzdA==
'''
files."a.yaml" = '''
a:
  $value: $env:FOO
  $encode: base64
'''

[encodeJoinEnv]
description = "Test join encoding with environment variable in array"
eval = ["a.yaml"]
format = "yaml"
env = { FOO = "test" }
expected = '''
a: a-test-b
'''
files."a.yaml" = '''
a:
  $value: [a-, $env:FOO, -b]
  $encode: join
'''

[envMissing]
description = "Test missing environment variable error"
eval = ["a.yaml"]
format = "yaml"
errors = ["$env:FOO: variable not found"]
files."a.yaml" = '''
a: $env:FOO
'''
###############################################################################
# Diff Operations
###############################################################################

[diffList]
description = "Test diff of two lists"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
diff = true
expected = '''
- $match: {}
- c: 3
- $delete:
    b: 2
'''
files."a.yaml" = '''
- a: 1
- b: 2
'''
files."b.yaml" = '''
- a: 1
- c: 3
'''

[diffListReplace]
description = "Test diff of lists that requires $replace"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
diff = true
expected = '''
- $match: {}
- a: 1
- c: 3
- $replace: true
'''
files."a.yaml" = '''
- a
- b
'''
files."b.yaml" = '''
- a: 1
- c: 3
'''

[diffListSame]
description = "Test diff of identical lists"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
diff = true
expected = '''
$match: {}
'''
files."a.yaml" = '''
- a: 1
- b: 2
'''
files."b.yaml" = '''
- a: 1
- b: 2
'''

[diffMap]
description = "Test diff of two maps"
eval = ["a.yaml", "b.yaml"]
format = "json-pretty"
diff = true
expected = '''
{
  "$match": {},
  "a": 2,
  "b": "$delete",
  "c": 3
}
'''
files."a.yaml" = '''
a: 1
b: 2
'''
files."b.yaml" = '''
a: 2
c: 3
'''

[diffMapSame]
description = "Test diff of identical maps"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
diff = true
expected = '''
$match: {}
'''
files."a.yaml" = '''
a: 1
b: 2
'''
files."b.yaml" = '''
a: 1
b: 2
'''

[diffMerge]
description = "Test diff with merge operation"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
diff = true
expected = '''
$match: {}
$merge: c.yaml
c: 3
d: 4
'''
files."a.yaml" = '''
a: 1
b: 2
'''
files."b.yaml" = '''
a: 1
b: 2
c: 3
d: 4
$merge: c.yaml
'''

[diffYamlJson]
description = "Test diff between YAML and JSON files"
eval = ["a.yaml", "b.json"]
format = "yaml"
diff = true
expected = '''
$match: {}
c: 3
'''
files."a.yaml" = '''
a: 1
b: 2
'''
files."b.json" = '''
{
  "a": 1,
  "b": 2,
  "c": 3
}
'''

# Error handling tests for diff
[diffMissingSourceFile]
description = "Test diff with missing source file"
eval = ["missing.yaml", "b.yaml"]
format = "yaml"
diff = true
expected = ""
errors = ["missing file"]
[diffMissingSourceFile.files]
"b.yaml" = "x: 1"

[diffMissingDestFile]
description = "Test diff with missing destination file"
eval = ["a.yaml", "missing.yaml"]
format = "yaml"
diff = true
expected = ""
errors = ["missing file"]
[diffMissingDestFile.files]
"a.yaml" = "x: 1"

[diffMultipleDocsSource]
description = "Test diff with multiple documents in source file without selector"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
diff = true
expected = ""
errors = ["selector"]
[diffMultipleDocsSource.files]
"a.yaml" = '''
---
x: 1
---
y: 2
'''
"b.yaml" = "x: 1"

[diffMultipleDocsDest]
description = "Test diff with multiple documents in destination file without selector"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
diff = true
expected = ""
errors = ["selector \"\" matches multiple"]
[diffMultipleDocsDest.files]
"a.yaml" = "x: 1"
"b.yaml" = '''
---
x: 1
---
y: 2
'''

[diffDifferentTypes]
description = "Test diff with different types (string vs number)"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
diff = true
expected = '''
$match: {}
x: "1"
'''
[diffDifferentTypes.files]
"a.yaml" = "x: 1"
"b.yaml" = 'x: "1"'

# Additional diff coverage tests
[diffIdenticalValues]
description = "Test diff with identical values returns nil"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
diff = true
expected = "$match: {}"
[diffIdenticalValues.files]
"a.yaml" = "x: 1"
"b.yaml" = "x: 1"

[diffPrimitiveValues]
description = "Test diff with primitive values (not maps or lists)"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
diff = true
expected = "world"
[diffPrimitiveValues.files]
"a.yaml" = '"hello"'
"b.yaml" = '"world"'

[diffListVsMap]
description = "Test diff with list vs map (different types)"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
diff = true
expected = '''
$match: {}
x: 1
'''
[diffListVsMap.files]
"a.yaml" = '''
- a: 1
'''
"b.yaml" = "x: 1"

[diffMapVsList]
description = "Test diff with map vs list (different types)"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
diff = true
expected = '''
- $match: {}
- a: 1
'''
[diffMapVsList.files]
"a.yaml" = "x: 1"
"b.yaml" = '''
- a: 1
'''

###############################################################################
# Intersect Operations
###############################################################################

[intersectList]
description = "Test intersect of two lists"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
intersect = true
expected = '''
- a: 1
'''
files."a.yaml" = '''
- a: 1
- b: 2
- c: 3
'''
files."b.yaml" = '''
- a: 1
- b: 10
- d: 4
'''

[intersectListRequired]
description = "Test intersect of lists with no common elements"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
intersect = true
expected = '''
- $required
'''
files."a.yaml" = '''
- a: 1
'''
files."b.yaml" = '''
- b: 2
'''

[intersectMap]
description = "Test intersect of two maps"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
intersect = true
expected = '''
a: 1
b: $required
'''
files."a.yaml" = '''
a: 1
b: 2
c: 3
'''
files."b.yaml" = '''
a: 1
b: 10
d: 4
'''

[intersectMapNull]
description = "Test intersect of maps with null values"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
intersect = true
expected = '''
a: null
'''
files."a.yaml" = '''
a: null
'''
files."b.yaml" = '''
a: null
'''

# Error handling tests for intersect
[intersectMissingFile]
description = "Test intersect with missing file"
eval = ["a.yaml", "missing.yaml"]
format = "yaml"
intersect = true
expected = ""
errors = ["missing file"]
[intersectMissingFile.files]
"a.yaml" = "x: 1"

[intersectMultipleDocs]
description = "Test intersect with multiple documents in a file without selector"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
intersect = true
expected = ""
errors = ["selector"]
[intersectMultipleDocs.files]
"a.yaml" = '''
---
x: 1
---
y: 2
'''
"b.yaml" = "x: 1"

[intersectDifferentTypes]
description = "Test intersect with different types"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
intersect = true
expected = "$required"
[intersectDifferentTypes.files]
"a.yaml" = "x: 1"
"b.yaml" = '"string value"'

# Additional intersect coverage tests
[intersectListVsMap]
description = "Test intersect with list vs map"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
intersect = true
expected = "$required"
[intersectListVsMap.files]
"a.yaml" = '''
- a: 1
'''
"b.yaml" = "x: 1"

[intersectPrimitiveVsList]
description = "Test intersect with primitive vs list"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
intersect = true
expected = "$required"
[intersectPrimitiveVsList.files]
"a.yaml" = '"hello"'
"b.yaml" = '''
- a: 1
'''

[intersectPrimitiveVsMap]
description = "Test intersect with primitive vs map"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
intersect = true
expected = "$required"
[intersectPrimitiveVsMap.files]
"a.yaml" = '"hello"'
"b.yaml" = "x: 1"

###############################################################################
# Required Operations
###############################################################################

[requiredToolList]
description = "Required tool filters list to show only $required items"
eval = ["a.yaml"]
format = "yaml"
expected = """
a:
  - $required
"""
required = true

[requiredToolList.files]
"a.yaml" = """
a:
  - $required
b:
  - 2
"""

[requiredToolMap]
description = "Required tool filters map to show only $required items"
eval = ["a.yaml"]
format = "yaml"
expected = """
a:
  b: $required
"""
required = true

[requiredToolMap.files]
"a.yaml" = """
a:
  b: $required
  c: 3
  d:
    e: 5
"""

# Error handling tests for required
[requiredMissingFile]
description = "Test required with missing file"
eval = ["missing.yaml"]
format = "yaml"
required = true
expected = ""
errors = ["missing file"]
[requiredMissingFile.files]

[requiredMultipleDocs]
description = "Test required with multiple documents"
eval = ["a.yaml"]
format = "yaml"
required = true
expected = '''
a: $required
---
b: $required
'''
[requiredMultipleDocs.files]
"a.yaml" = '''
---
a: $required
---
b: $required
'''

# Additional required coverage tests
[requiredInString]
description = "Test required string value is preserved"
eval = ["a.yaml"]
format = "yaml"
required = true
expected = "x: $required"
[requiredInString.files]
"a.yaml" = "x: $required"

[requiredNonRequiredString]
description = "Test non-required string value is filtered out"
eval = ["a.yaml"]
format = "yaml"
required = true
expected = ""
[requiredNonRequiredString.files]
"a.yaml" = "x: not-required"

###############################################################################
# Error Handling - Additional Coverage
###############################################################################

# File loading errors
[fileLoadInvalidFormat]
description = "Test loading file with invalid format"
eval = ["test.invalid"]
expected = ""
errors = ["unknown format"]
[fileLoadInvalidFormat.files]
"test.invalid" = "x: 1"


[unmarshalError]
description = "Test unmarshal error with invalid YAML"
eval = ["bad.yaml"]
expected = ""
errors = ["did not find expected node content"]
[unmarshalError.files]
"bad.yaml" = "{ invalid yaml: ["

# Merge errors
[mergeListDeleteExtraKeys]
description = "Test merge list delete with extra keys error"
eval = ["a.yaml"]
expected = ""
errors = ["invalid directive"]
[mergeListDeleteExtraKeys.files]
"a.yaml" = '''
- $delete:
    x: 1
  extra: key
'''

[mergeListReplaceError]
description = "Test merge list replace with invalid boolean"
eval = ["a.yaml"]
expected = ""
errors = ["reference not found"]
[mergeListReplaceError.files]
"a.yaml" = '''
- $replace: "not a boolean"
'''

[mergeListMatchNotFound]
description = "Test merge list match not found"
eval = ["a.yaml"]
expected = ""
errors = ["not found"]
[mergeListMatchNotFound.files]
"a.yaml" = '''
base:
  - a: 1
updates:
  - $match:
      b: 2
    c: 3
result:
  $merge: [base, updates]
'''

# Decode errors
[decodeInvalidType]
description = "Test decode with invalid type"
eval = ["a.yaml"]
expected = ""
errors = ["invalid type"]
[decodeInvalidType.files]
"a.yaml" = '''
$decode: 123
'''

[decodeNotString]
description = "Test decode on non-map type"
eval = ["a.yaml"]
expected = ""
errors = ["invalid type"]
[decodeNotString.files]
"a.yaml" = '''
- $decode: base64
'''

[decodeMissingValue]
description = "Test decode missing $value"
eval = ["a.yaml"]
expected = ""
errors = ["missing $value"]
[decodeMissingValue.files]
"a.yaml" = '''
$decode: base64
other: field
'''

[decodeValueNotString]
description = "Test decode with non-string $value"
eval = ["a.yaml"]
expected = ""
errors = ["invalid type"]
[decodeValueNotString.files]
"a.yaml" = '''
$decode: base64
$value: 123
'''

[decodeExtraKeys]
description = "Test decode with extra keys"
eval = ["a.yaml"]
expected = ""
errors = ["extra keys"]
[decodeExtraKeys.files]
"a.yaml" = '''
$decode: base64
$value: SGVsbG8=
extra: key
'''

[decodeInvalidYAML]
description = "Test decode with invalid YAML"
eval = ["a.yaml"]
expected = ""
errors = ["yaml:"]
[decodeInvalidYAML.files]
"a.yaml" = '''
$decode: yaml
$value: "{ invalid: yaml ["
'''

[decodeInvalidJSON]
description = "Test decode with invalid JSON"
eval = ["a.yaml"]
expected = ""
errors = ["invalid character"]
[decodeInvalidJSON.files]
"a.yaml" = '''
$decode: json
$value: "{ invalid json"
'''

[decodeUnknownFormat]
description = "Test decode with unknown format"
eval = ["a.yaml"]
expected = ""
errors = ["unknown format"]
[decodeUnknownFormat.files]
"a.yaml" = '''
$decode: unknownformat
$value: data
'''

# Normalize errors
[normalizeError]
description = "Test normalize error with function value"
eval = ["a.yaml"]
expected = ""
errors = ["invalid directive"]
[normalizeError.files]
"a.yaml" = "func: $env"

# Encode coverage tests
[encodeSHA256]
description = "Test encode with sha256"
eval = ["a.yaml"]
expected = '''
data: foo
hash: 2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae
'''
[encodeSHA256.files]
"a.yaml" = '''
data: foo
hash:
  $encode: sha256
  $value: foo
'''

[encodeBase64Coverage]
description = "Test encode with base64"
eval = ["a.yaml"]
expected = '''
data: Hello World
encoded: SGVsbG8gV29ybGQ=
'''
[encodeBase64Coverage.files]
"a.yaml" = '''
data: Hello World
encoded:
  $encode: base64
  $value: Hello World
'''

[encodeFlattenCoverage]
description = "Test encode flatten"
eval = ["a.yaml"]
expected = '''
flattened:
  - a
  - b
  - c
  - d
nested:
  - - a
    - b
  - - c
    - d
'''
[encodeFlattenCoverage.files]
"a.yaml" = '''
nested:
  - [a, b]
  - [c, d]
flattened:
  $encode: flatten
  $value:
    - [a, b]
    - [c, d]
'''

[encodeToListMap]
description = "Test encode tolist with map"
eval = ["a.yaml"]
expected = '''
args:
  - name=foo
  - value=bar
config:
  name: foo
  value: bar
'''
[encodeToListMap.files]
"a.yaml" = '''
config:
  name: foo
  value: bar
args:
  $encode: tolist:=
  $value:
    name: foo
    value: bar
'''

# Deep clone error
[deepCloneError]
description = "Test deep clone with function causes error"
eval = ["a.yaml"]
expected = ""
errors = ["invalid directive"]
[deepCloneError.files]
"a.yaml" = '''
base:
  func: $env
copy:
  $merge: base
'''


# Process2 tolist errors
[toListInvalidDelimiter]
description = "Test tolist with invalid delimiter argument"
eval = ["a.yaml"]
expected = ""
errors = ["invalid arguments"]
[toListInvalidDelimiter.files]
"a.yaml" = '''
$encode: tolist
$value:
  a: 1
'''

[toListNonMap]
description = "Test tolist with non-map value"
eval = ["a.yaml"]
expected = ""
errors = ["invalid type"]
[toListNonMap.files]
"a.yaml" = '''
$encode: tolist:=
$value: "not a map"
'''

# Encode errors
[encodeInvalidArguments]
description = "Test encode with invalid arguments"
eval = ["a.yaml"]
expected = ""
errors = ["invalid arguments"]
[encodeInvalidArguments.files]
"a.yaml" = '''
$encode: base64:extra
$value: data
'''

[encodeFlattenNonList]
description = "Test encode flatten with non-list"
eval = ["a.yaml"]
expected = ""
errors = ["invalid type"]
[encodeFlattenNonList.files]
"a.yaml" = '''
$encode: flatten
$value: "not a list"
'''

[encodeSHA256InvalidArgs]
description = "Test encode sha256 with invalid arguments"
eval = ["a.yaml"]
expected = ""
errors = ["invalid arguments"]
[encodeSHA256InvalidArgs.files]
"a.yaml" = '''
$encode: sha256:extra
$value: data
'''

# Parser logging coverage
[parserDebugLog]
description = "Test parser with debug logging enabled"
eval = ["a.yaml"]
expected = "x: 1"
[parserDebugLog.files]
"a.yaml" = "x: 1"

# File loading - parent from directive
[parentFromDirectiveList]
description = "Test parent from directive as list"
eval = ["child.yaml"]
expected = '''
base: value
child: value
'''
[parentFromDirectiveList.files]
"parent.yaml" = "base: value"
"child.yaml" = '''
$parent: [parent]
child: value
'''



# Process2 decode errors
[decodeMultipleDocs]
description = "Test decode with multiple documents error"
eval = ["a.yaml"]
expected = ""
errors = ["decoding error"]
[decodeMultipleDocs.files]
"a.yaml" = '''
$decode: yaml
$value: |
  ---
  a: 1
  ---
  b: 2
'''


# String interpolation edge cases
[stringInterpEmptyVar]
description = "Test string interpolation with empty variable"
eval = ["a.yaml"]
expected = '''
empty: ""
result: 'Value: '
'''
[stringInterpEmptyVar.files]
"a.yaml" = '''
empty: ""
result: '$"Value: {empty}"'
'''

###############################################################################
# Additional Coverage Tests - Round 2
###############################################################################

# Get operations with complex paths

[getPathYAMLList]
description = "Test get path from YAML-encoded list"
eval = ["a.yaml"]
expected = '''
data:
  nested:
    field: value
'''
[getPathYAMLList.files]
"a.yaml" = '''
data:
  nested:
    field: value
'''

[getPathInvalidType]
description = "Test get path with invalid type"
eval = ["a.yaml"]
expected = '''
result: 123
'''
[getPathInvalidType.files]
"a.yaml" = '''
result: 123
'''

[getVarNotFound]
description = "Test get variable not found"
eval = ["a.yaml"]
expected = ""
errors = ["invalid directive"]
[getVarNotFound.files]
"a.yaml" = '''
result: $nonexistent
'''

[getCrossDocError]
description = "Test get cross document error"
eval = ["a.yaml", "b.yaml"]
expected = ""
errors = ["invalid directive"]
[getCrossDocError.files]
"a.yaml" = '''
result:
  $get: [{id: missing}, field]
'''
"b.yaml" = '''
id: other
field: value
'''

[getPathFromStringError]
description = "Test get path from string with YAML parse error"
eval = ["a.yaml"]
expected = ""
errors = ["yaml:"]
[getPathFromStringError.files]
"a.yaml" = '''
result: $"[invalid: yaml: ["
'''

# Output operations
[outputFilterMapFalse]
description = "Test output filter on map with $output: false"
eval = ["a.yaml"]
expected = '''
visible: data
'''
[outputFilterMapFalse.files]
"a.yaml" = '''
visible: data
hidden:
  $output: false
  secret: value
'''

[outputFilterListFalse]
description = "Test output filter on list with $output: false"
eval = ["a.yaml"]
expected = '''
- visible
- another
'''
[outputFilterListFalse.files]
"a.yaml" = '''
- visible
- $output: false
  hidden: value
- another
'''

[outputFilterNestedError]
description = "Test output filter with nested error"
eval = ["a.yaml"]
expected = ""
errors = ["invalid"]
[outputFilterNestedError.files]
"a.yaml" = '''
data:
  field:
    $output: "not a boolean"
'''

[findOutputsError]
description = "Test find outputs with error"
eval = ["a.yaml"]
expected = ""
errors = ["invalid"]
[findOutputsError.files]
"a.yaml" = '''
data:
  - $output: "not a boolean"
'''

# Normalize edge cases
[normalizeMapKeyNonString]
description = "Test normalize with non-string map key"
eval = ["a.yaml"]
expected = '''
"123": value
'''
[normalizeMapKeyNonString.files]
"a.yaml" = '''
123: value
'''

# Match operations
[matchListNonList]
description = "Test match list with non-list"
eval = ["a.yaml"]
expected = '''
data: not a list
'''
[matchListNonList.files]
"a.yaml" = '''
data: not a list
'''

# JSON edge cases
[jsonMarshalError]
description = "Test JSON marshal with function type"
eval = ["a.yaml"]
expected = ""
errors = ["invalid directive"]
[jsonMarshalError.files]
"a.yaml" = '''
func: $env
result:
  $encode: json
  $value: $func
'''

# YAML marshal edge cases
[yamlMarshalMapIntKey]
description = "Test YAML marshal with integer map key"
eval = ["a.yaml"]
expected = '''
"123": value
'''
[yamlMarshalMapIntKey.files]
"a.yaml" = '''
123: value
'''

# Process decode type errors
[decodeNonMap]
description = "Test decode on non-map"
eval = ["a.yaml"]
expected = ""
errors = ["invalid type"]
[decodeNonMap.files]
"a.yaml" = '''
- item
- $decode: yaml
'''

# Tostring conversion errors


# More coverage tests
[getPathDeepNested]
description = "Test get path with deep nesting"
eval = ["a.yaml"]
expected = '''
data:
  level1:
    level2:
      level3:
        value: found
result: found
'''
[getPathDeepNested.files]
"a.yaml" = '''
data:
  level1:
    level2:
      level3:
        value: found
result: found
'''

[normalizeListWithNonStringKey]
description = "Test normalize list containing map with non-string key"
eval = ["a.yaml"]
expected = '''
- "123": value
- normal: key
'''
[normalizeListWithNonStringKey.files]
"a.yaml" = '''
- 123: value
- normal: key
'''

[outputControlComplex]
description = "Test complex output control"
eval = ["a.yaml"]
expected = '''
list:
  - item1
  - item3
visible:
  data: shown
'''
[outputControlComplex.files]
"a.yaml" = '''
visible:
  data: shown
  hidden:
    $output: false
    secret: hidden
list:
  - item1
  - $output: false
    value: item2
  - item3
'''

[toStringListMixed]
description = "Test toStringList with mixed types"
eval = ["a.yaml"]
expected = ""
errors = ["invalid directive"]
[toStringListMixed.files]
"a.yaml" = '''
data:
  $get: [field1, {complex: object}, field2]
'''

[yamlUnmarshalStreamError]
description = "Test YAML unmarshal stream with invalid input"
eval = ["a.yaml"]
expected = ""
errors = ["yaml:"]
[yamlUnmarshalStreamError.files]
"a.yaml" = '''
{invalid yaml & here
'''

[jsonUnmarshalStreamEmpty]
description = "Test JSON unmarshal with empty document"
eval = ["a.json"]
expected = ""
[jsonUnmarshalStreamEmpty.files]
"a.json" = ""

[encodeUnknownCommand]
description = "Test encode with unknown command"
eval = ["a.yaml"]
expected = ""
errors = ["unknown format"]
[encodeUnknownCommand.files]
"a.yaml" = '''
$encode: unknowncommand
$value: data
'''

[process2CircularRef]
description = "Test process2 circular reference detection"
eval = ["a.yaml"]
expected = ""
errors = ["invalid directive"]
[process2CircularRef.files]
"a.yaml" = '''
a: $b
b: $c
c: $a
result: $a
'''

# Document and clone tests
[documentCloneError]
description = "Test document clone with marshal error"
eval = ["a.yaml"]
expected = '''
data:
  func: {}
func: {}
'''
[documentCloneError.files]
"a.yaml" = '''
data:
  func: {}
$merge: data
'''

# Process1 tests
[process1MergeError]
description = "Test process1 merge with error"
eval = ["a.yaml"]
expected = ""
errors = ["reference not found"]
[process1MergeError.files]
"a.yaml" = '''
$merge: nonexistent
'''

[process1ParentError]
description = "Test process1 parent directive error"
eval = ["a.yaml"]
expected = ""
errors = ["missing file"]
[process1ParentError.files]
"a.yaml" = '''
$parent: [nonexistent]
data: value
'''

[process1InvalidMerge]
description = "Test process1 with invalid merge type"
eval = ["a.yaml"]
expected = ""
errors = ["invalid type"]
[process1InvalidMerge.files]
"a.yaml" = '''
$merge: 123
'''


# GetFormat tests
[getFormatError]
description = "Test GetFormat with unknown format"
eval = ["unknown.xyz"]
expected = ""
errors = ["unknown format"]
[getFormatError.files]
"unknown.xyz" = "data: value"

# Parent filename tests
[parentFilenameTilde]
description = "Test parent from filename with tilde"
eval = ["service.base.yaml"]
expected = '''
base: value
service: value
'''
[parentFilenameTilde.files]
"service.yaml" = "base: value"
"service.base.yaml" = "service: value"

[missingParentFile]
description = "Test missing parent file from filename"
eval = ["service.missing.base.yaml"]
expected = ""
errors = ["missing file"]
[missingParentFile.files]
"service.missing.base.yaml" = "content: value"

# Process encode any tests
[encodeAnyInvalidType]
description = "Test encode any with invalid command type"
eval = ["a.yaml"]
expected = ""
errors = ["invalid type"]
[encodeAnyInvalidType.files]
"a.yaml" = '''
$encode: {not: string}
$value: data
'''

# YAML parsing edge cases for coverage
[yamlUnknownTag]
description = "Test YAML with unknown scalar tag"
eval = ["a.yaml"]
expected = ""
errors = ["unknown yaml short tag"]
[yamlUnknownTag.files]
"a.yaml" = '''
value: !!unknown "test"
'''


[process2DecodeNonMap]
description = "Test decode on non-map value"
eval = ["a.yaml"]
expected = ""
errors = ["$decode: missing $value"]
[process2DecodeNonMap.files]
"a.yaml" = '''
- $decode: json
'''

[yamlFloat64]
description = "Test YAML float64 large number handling"
eval = ["a.yaml"]
format = "yaml"
expected = '''
value: 1.7976931348623157e+308
'''
[yamlFloat64.files]
"a.yaml" = '''
value: 1.7976931348623157e+308
'''

[yamlInt32]
description = "Test YAML int32 handling"
eval = ["a.yaml"]
format = "yaml"
expected = '''
value: 2147483647
'''
[yamlInt32.files]
"a.yaml" = '''
value: 2147483647
'''

[toStringListNonString]
description = "Test toStringList with non-string convertible value"
eval = ["a.yaml"]
format = "yaml"
expected = '''
helloworldmap[complex:object]
'''
[toStringListNonString.files]
"a.yaml" = '''
$encode: join
$value:
  - hello
  - world
  - {complex: object}
'''

[popListStringEmpty]
description = "Test popListString with empty list"
eval = ["a.yaml"]
format = "yaml"
expected = '''
empty: []
items: []
'''
[popListStringEmpty.files]
"a.yaml" = '''
items:
  $merge: empty
empty: []
'''

[popListMapValueEmpty]
description = "Test popListMapValue with empty list"
eval = ["a.yaml"]
format = "yaml"
expected = '''
result: []
'''
[popListMapValueEmpty.files]
"a.yaml" = '''
result: []
'''

[popListMapBoolValueNotFound]
description = "Test popListMapBoolValue when value not found"
eval = ["a.yaml"]
format = "yaml"
expected = '''
list:
  - a: 1
  - b: 2
'''
[popListMapBoolValueNotFound.files]
"a.yaml" = '''
list:
- a: 1
- b: 2
'''

[process2RepeatObjMapInvalid]
description = "Test repeat object map with invalid context"
eval = ["a.yaml"]
expected = ""
errors = ["invalid directive"]
[process2RepeatObjMapInvalid.files]
"a.yaml" = '''
item:
  $repeat: 3
  value: "$repeat is not a map here"
'''

[process2RepeatObjListInvalid]
description = "Test repeat object list with invalid context"
eval = ["a.yaml"]
expected = ""
errors = ["reference not found"]
[process2RepeatObjListInvalid.files]
"a.yaml" = '''
- $repeat: 2
  $merge: "invalid"
'''

[yamlMergeNonMap]
description = "Test YAML merge with non-map value"
eval = ["a.yaml"]
expected = ""
errors = ["unknown type for merge target"]
[yamlMergeNonMap.files]
"a.yaml" = '''
<<: [1, 2, 3]
value: test
'''

[yamlMergeList]
description = "Test YAML merge with list of maps"
eval = ["a.yaml"]
format = "yaml"
expected = '''
base1:
  a: 1
  b: 2
base2:
  b: 20
  c: 3
result:
  a: 1
  b: 2
  c: 3
'''
[yamlMergeList.files]
"a.yaml" = '''
base1: &base1
  a: 1
  b: 2
base2: &base2
  b: 20
  c: 3
result:
  <<: [*base1, *base2]
'''

[process1StringMergeInvalid]
description = "Test process1 string merge with invalid reference"
eval = ["a.yaml"]
expected = ""
errors = ["invalid type"]
[process1StringMergeInvalid.files]
"a.yaml" = '''
value:
  $merge: 123
'''

[process1StringReplaceInvalid]
description = "Test process1 string replace with invalid reference"
eval = ["a.yaml"]
expected = ""
errors = ["invalid type"]
[process1StringReplaceInvalid.files]
"a.yaml" = '''
value:
  $replace: 123
'''

[mergeListMatchInvalid]
description = "Test merge list match with invalid match value"
eval = ["a.yaml"]
expected = ""
errors = ["match"]
[mergeListMatchInvalid.files]
"a.yaml" = '''
- a: 1
- $match: "invalid string match"
  a: 2
'''

[diffFileMissing]
description = "Test diff with missing source file"
diff = true
eval = ["missing.yaml", "b.yaml"]
expected = ""
errors = ["missing file"]
[diffFileMissing.files]
"b.yaml" = "value: 2"

[intersectFileMissing]
description = "Test intersect with missing file"
intersect = true
eval = ["missing.yaml", "b.yaml"]
expected = ""
errors = ["missing file"]
[intersectFileMissing.files]
"b.yaml" = "value: 2"

[requiredFileMissing]
description = "Test required with missing file"
required = true
eval = ["missing.yaml"]
expected = ""
errors = ["missing file"]
[requiredFileMissing.files]
# No files - testing missing file scenario

[mergeFileNoDocuments]
description = "Test merge file with no documents"
eval = ["empty.yaml"]
format = "yaml"
expected = ""
[mergeFileNoDocuments.files]
"empty.yaml" = ""

# More tests for additional coverage

[toStringListError]
description = "Test toStringList with nil in list"
eval = ["a.yaml"]
format = "yaml"
expected = '''
items:
  - a
  - null
  - c
'''
[toStringListError.files]
"a.yaml" = '''
items:
- a
- null
- c
'''

[process2ToListListError]
description = "Test toList on list with non-map"
eval = ["a.yaml"]
expected = ""
errors = ["unknown format"]
[process2ToListListError.files]
"a.yaml" = '''
$encode: toList
$value:
- not a map
'''

[yamlMergeScalar]
description = "Test YAML merge with scalar value"
eval = ["a.yaml"]
expected = ""
errors = ["unknown type for merge target"]
[yamlMergeScalar.files]
"a.yaml" = '''
base: &base 123
result:
  <<: *base
  value: test
'''

[yamlAlias]
description = "Test YAML alias handling"
eval = ["a.yaml"]
format = "yaml"
expected = '''
base:
  x: 1
  "y": 2
copy:
  x: 1
  "y": 2
'''
[yamlAlias.files]
"a.yaml" = '''
base: &base
  x: 1
  y: 2
copy: *base
'''

[yamlTimestamp]
description = "Test YAML timestamp handling"
eval = ["a.yaml"]
format = "yaml"
expected = '''
ts: "2021-01-01T00:00:00Z"
'''
[yamlTimestamp.files]
"a.yaml" = '''
ts: 2021-01-01T00:00:00Z
'''


[encodeAnyNonString]
description = "Test encode any with non-string command"
eval = ["a.yaml"]
expected = ""
errors = ["invalid type"]
[encodeAnyNonString.files]
"a.yaml" = '''
$encode: 123
$value: data
'''

[mergeDocumentError]
description = "Test merge document with nil document"
eval = ["a.yaml"]
format = "yaml"
expected = '''
value: test
'''
[mergeDocumentError.files]
"a.yaml" = '''
value: test
'''


[deepCloneFunc]
description = "Test deep clone with function value"
eval = ["a.yaml"]
format = "yaml"
expected = '''
a: 1
b: 2
'''
[deepCloneFunc.files]
"a.yaml" = '''
a: 1
b: 2
'''

# Performance regression test
[repeatPerformanceRegression]
description = "Test that repeat performance is reasonable (not O(n²))"
eval = ["a.yaml"]
format = "yaml"
# Just check first few items to verify correctness
expected = '''
items:
  - id: item-0
    value: 0
  - id: item-1
    value: 1
  - id: item-2
    value: 2
# ... 497 more items
'''
benchmark = true  # Run as benchmark with 'go test -bench'
[repeatPerformanceRegression.files]
"a.yaml" = '''
# This test reproduces a performance issue reported by users
# With 500 items, evaluation should complete in under 100ms
# but was taking 1+ seconds due to inefficient processing
items:
- $repeat: 500
  id: $"item-{$repeat}"
  value: $repeat
'''

###############################################################################
# Benchmark Tests
###############################################################################

[benchRepeat10]
description = "Benchmark repeat with 10 items"
eval = ["a.yaml"]
format = "yaml"
expected = "items: []"  # Don't verify output in benchmarks
benchmark = true
[benchRepeat10.files]
"a.yaml" = '''
items:
- $repeat: 10
  id: $"item-{$repeat}"
  value: $repeat
'''

[benchRepeat100]
description = "Benchmark repeat with 100 items"
eval = ["a.yaml"]
format = "yaml"
expected = "items: []"
benchmark = true
[benchRepeat100.files]
"a.yaml" = '''
items:
- $repeat: 100
  id: $"item-{$repeat}"
  value: $repeat
'''

[benchRepeat1000]
description = "Benchmark repeat with 1000 items"
eval = ["a.yaml"]
format = "yaml"
expected = "items: []"
benchmark = true
[benchRepeat1000.files]
"a.yaml" = '''
items:
- $repeat: 1000
  id: $"item-{$repeat}"
  value: $repeat
'''

[benchRepeatNested]
description = "Benchmark nested repeat (20x25=500 items)"
eval = ["a.yaml"]
format = "yaml"
expected = "outer: []"
benchmark = true
[benchRepeatNested.files]
"a.yaml" = '''
$repeat:
  x: 20
  y: 25
outer:
  id: $"outer-{$repeat:x}"
  inner:
    id: $"inner-{$repeat:x}-{$repeat:y}"
    value: $"{$repeat:x} x {$repeat:y}"
'''

[benchRepeatDeepInterpolation]
description = "Benchmark repeat with deep string interpolation"
eval = ["a.yaml"]
format = "yaml"
expected = "data: {}"
benchmark = true
[benchRepeatDeepInterpolation.files]
"a.yaml" = '''
data:
  level1: "L1"
  level2: "L2"
  level3: "L3"
items:
- $repeat: 100
  id: $"item-{$repeat}"
  val1: $"{data.level1}-{$repeat}"
  val2: $"{data.level2}-{$repeat}"
  val3: $"{data.level3}-{$repeat}"
  nested:
    n1: $"nested1-{$repeat}-{data.level1}"
    n2: $"nested2-{$repeat}-{data.level2}"
    n3: $"nested3-{$repeat}-{data.level3}"
    deeper:
      d1: $"deep1-{$repeat}-{data.level1}-{data.level2}"
      d2: $"deep2-{$repeat}-{data.level2}-{data.level3}"
      d3: $"deep3-{$repeat}-{data.level1}-{data.level3}"
'''

[emptyIntermediateFile]
description = "Empty intermediate file in the hierarchy"
eval = ["a.b.c.e.yaml"]
format = "yaml"
expected = '''
x:
  - a
  - a.b.c
  - a.b.c.d0
  - a.b.c.e
---
x:
  - a
  - a.b.c
  - a.b.c.d1
  - a.b.c.e
'''
[emptyIntermediateFile.files]
"a.yaml" = '''
x:
- a
'''
"a.b.yaml" = '''
'''
"a.b.c.yaml" = '''
$match: {}
x:
- a.b.c
'''
"a.b.c.d0.yaml" = '''
$match: {}
x:
- a.b.c.d0
'''
"a.b.c.d1.yaml" = '''
$match: {}
x:
- a.b.c.d1
'''
"a.b.c.e.yaml" = '''
$parent:
- a.b.c.d*
$match: {}
x:
- a.b.c.e
'''

[nullChildDoc]
description = "Null child document is also a no-op (same as empty)"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
x:
  - a
'''
[nullChildDoc.files]
"a.yaml" = '''
x:
- a
'''
"a.b.yaml" = '''
null
'''


[emptyChildDoc]
description = "Empty child document merges as no-op"
eval = ["a.b.yaml"]
format = "yaml"
expected = '''
x:
  - a
  - a.b
'''
[emptyChildDoc.files]
"a.yaml" = '''
x:
- a
'''
"a.b.yaml" = '''
x:
- a.b
---

'''

###############################################################################
# Defer Operations ($defer)
###############################################################################

[deferWithRepeat]
description = "Test $defer with $repeat - override repeat count then match specific item"
eval = ["a.b.c.yaml"]
format = "yaml"
expected = '''
a: 0
---
a: 1
---
a: 2
b: special
'''
files."a.yaml" = '''
$repeat: 2
a: $repeat
'''
files."a.b.yaml" = '''
$repeat: 3
'''
files."a.b.c.yaml" = '''
$defer: true
$match:
  a: 2
b: special
'''

[deferWithRepeatSwapped]
description = "Test $defer with $repeat - content swapped between files"
eval = ["a.b.c.yaml"]
format = "yaml"
expected = '''
a: 0
---
a: 1
---
a: 2
b: special
'''
files."a.yaml" = '''
$repeat: 2
a: $repeat
'''
files."a.b.yaml" = '''
$defer: true
$match:
  a: 2
b: special
'''
files."a.b.c.yaml" = '''
$repeat: 3
'''

[deferEscapeInteraction]
description = "Test $$ escape interaction with $defer - $$ should be unescaped after defer processing"
eval = ["test.yaml"]
format = "yaml"
expected = '''
a: $foo
b: test
'''
files."test.yaml" = '''
a: $$foo
---
$defer: true
$match: {}
b: test
'''

###############################################################################
# Match Expression Tests
###############################################################################

[matchExpressionFilter]
description = "Test filename:match expression filters documents"
eval = ["a.yaml:a: 1"]
format = "yaml"
expected = '''
a: 1
b: 2
'''
files."a.yaml" = '''
a: 1
b: 2
---
a: 2
b: 3
---
a: 3
b: 1
'''

[matchExpressionMultiple]
description = "Test match expression with multiple matching documents"
eval = ["a.yaml:b: 2"]
format = "yaml"
expected = '''
a: 2
b: 2
---
a: 3
b: 2
'''
files."a.yaml" = '''
a: 1
b: 1
---
a: 2
b: 2
---
a: 3
b: 2
'''

[matchExpressionNested]
description = "Test match expression with nested values"
eval = ["a.yaml:a: {b: 2}"]
format = "yaml"
expected = '''
a:
  b: 2
  c: 3
b: 1
'''
files."a.yaml" = '''
a:
  b: 2
  c: 3
b: 1
---
a:
  b: 1
  c: 2
b: 3
'''

[diffWithSelector]
description = "Test diff with selector matching documents by name"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
diff = true
selector = "name"
expected = '''
$match:
  name: doc1
b: 3
---
$match:
  name: doc2
c: 4
'''
[diffWithSelector.files]
"a.yaml" = '''
---
name: doc1
a: 1
---
name: doc2
c: 3
'''
"b.yaml" = '''
---
name: doc1
a: 1
b: 3
---
name: doc2
c: 4
'''

[intersectWithSelector]
description = "Test intersect with selector matching documents by id"
eval = ["a.yaml", "b.yaml", "c.yaml"]
format = "yaml"
intersect = true
selector = "id"
expected = '''
a: 1
id: 1
---
b: 2
id: 2
'''
[intersectWithSelector.files]
"a.yaml" = '''
---
id: 1
a: 1
b: 2
---
id: 2
b: 2
c: 3
'''
"b.yaml" = '''
---
id: 1
a: 1
c: 3
---
id: 2
b: 2
d: 4
'''
"c.yaml" = '''
---
id: 1
a: 1
---
id: 2
b: 2
'''

[diffWithSelectorNestedPath]
description = "Test diff with selector using nested path"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
diff = true
selector = "metadata.name"
expected = '''
$match:
  metadata:
    name: service1
metadata:
  version: v2
spec:
  replicas: 3
---
$match:
  metadata:
    name: service2
'''
[diffWithSelectorNestedPath.files]
"a.yaml" = '''
---
metadata:
  name: service1
  version: v1
spec:
  replicas: 2
---
metadata:
  name: service2
spec:
  replicas: 1
'''
"b.yaml" = '''
---
metadata:
  name: service1
  version: v2
spec:
  replicas: 3
---
metadata:
  name: service2
spec:
  replicas: 1
'''

[diffWithSelectorNoMatch]
description = "Test diff with selector where destination has unmatched documents"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
diff = true
selector = "id"
expected = '''
$match:
  id: 1
---
$match:
  id: 2
---
$match: null
c: 3
id: 3
'''
[diffWithSelectorNoMatch.files]
"a.yaml" = '''
---
id: 1
a: 1
---
id: 2
b: 2
'''
"b.yaml" = '''
---
id: 1
a: 1
---
id: 2
b: 2
---
id: 3
c: 3
'''

[diffEmptySelector]
description = "Test diff with empty selector on single documents"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
diff = true
selector = ""
expected = '''
$match: {}
b: 2
'''
[diffEmptySelector.files]
"a.yaml" = '''
a: 1
'''
"b.yaml" = '''
a: 1
b: 2
'''

[intersectEmptySelector]
description = "Test intersect with empty selector on single documents"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
intersect = true
selector = ""
expected = '''
a: 1
'''
[intersectEmptySelector.files]
"a.yaml" = '''
a: 1
b: 2
'''
"b.yaml" = '''
a: 1
c: 3
'''

[intersectSkipRequiredDifferentTypes]
description = "Test intersect with different types skipping $required"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
intersect = true
skipRequired = true
expected = ""
[intersectSkipRequiredDifferentTypes.files]
"a.yaml" = "x: 1"
"b.yaml" = '"string value"'

[intersectSkipRequiredMapMismatch]
description = "Test intersect with map value mismatch skipping $required"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
intersect = true
skipRequired = true
expected = '''
x: 1
'''
[intersectSkipRequiredMapMismatch.files]
"a.yaml" = '''
x: 1
y: 2
'''
"b.yaml" = '''
x: 1
y: 3
'''

[intersectSkipRequiredListNoCommon]
description = "Test intersect with no common list elements skipping $required"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
intersect = true
skipRequired = true
expected = '''
items: []
'''
[intersectSkipRequiredListNoCommon.files]
"a.yaml" = '''
items:
  - a
  - b
'''
"b.yaml" = '''
items:
  - c
  - d
'''

[intersectSkipRequiredListVsMap]
description = "Test intersect with list vs map skipping $required"
eval = ["a.yaml", "b.yaml"]
format = "yaml"  
intersect = true
skipRequired = true
expected = '''
{}
'''
[intersectSkipRequiredListVsMap.files]
"a.yaml" = '''
x:
  - 1
  - 2
'''
"b.yaml" = '''
x:
  a: 1
'''

[intersectEmptyObjects]
description = "Test intersect with empty objects"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
intersect = true
expected = '''
x: {}
"y": $required
'''
[intersectEmptyObjects.files]
"a.yaml" = '''
x: {}
y: 1
'''
"b.yaml" = '''
x: {}
y: 2
'''

[intersectEmptyObjectsSkipRequired]
description = "Test intersect with empty objects skipping $required"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
intersect = true
skipRequired = true
expected = '''
x: {}
'''
[intersectEmptyObjectsSkipRequired.files]
"a.yaml" = '''
x: {}
y: 1
'''
"b.yaml" = '''
x: {}
y: 2
'''

[intersectNullValues]
description = "Test intersect with null values"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
intersect = true
expected = '''
x: null
"y": $required
'''
[intersectNullValues.files]
"a.yaml" = '''
x: null
y: 1
'''
"b.yaml" = '''
x: null
y: 2
'''

[intersectNullValuesSkipRequired]
description = "Test intersect with null values skipping $required"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
intersect = true
skipRequired = true
expected = '''
x: null
'''
[intersectNullValuesSkipRequired.files]
"a.yaml" = '''
x: null
y: 1
'''
"b.yaml" = '''
x: null
y: 2
'''

[intersectEmptyVsNonEmpty]
description = "Test intersect empty object vs non-empty"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
intersect = true
expected = '''
x: {}
'''
[intersectEmptyVsNonEmpty.files]
"a.yaml" = '''
x: {}
'''
"b.yaml" = '''
x:
  a: 1
'''

[intersectEmptyVsNonEmptySkipRequired]
description = "Test intersect empty object vs non-empty skipping $required"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
intersect = true
skipRequired = true
expected = '''
x: {}
'''
[intersectEmptyVsNonEmptySkipRequired.files]
"a.yaml" = '''
x: {}
'''
"b.yaml" = '''
x:
  a: 1
'''

[intersectMixedEmptyNullValues]
description = "Test intersect with mix of empty, null, and values"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
intersect = true
expected = '''
empty: {}
nested:
  x: 1
  "y": {}
null_val: null
value: 1
'''
[intersectMixedEmptyNullValues.files]
"a.yaml" = '''
empty: {}
null_val: null
value: 1
nested:
  x: 1
  y: {}
'''
"b.yaml" = '''
empty: {}
null_val: null
value: 1
nested:
  x: 1
  y: {}
'''

[intersectOnlyEmptyObjectsSkipRequired]
description = "Test intersect with only empty objects skipping $required"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
intersect = true
skipRequired = true
expected = '''
{}
'''
[intersectOnlyEmptyObjectsSkipRequired.files]
"a.yaml" = '{}'
"b.yaml" = '{}'

[intersectEmptyRootSkipRequired]
description = "Test intersect with no common fields skipping $required"
eval = ["a.yaml", "b.yaml"]
format = "yaml"
intersect = true
skipRequired = true
expected = '''
{}
'''
[intersectEmptyRootSkipRequired.files]
"a.yaml" = '''
x: 1
'''
"b.yaml" = '''
y: 2
'''


[evaluateSortByPath]
description = "Test sorting output documents by path"
eval = ["a.yaml"]
format = "yaml"
sortPath = "name"
expected = '''
name: alpha
value: 2
---
name: mike
value: 3
---
name: zulu
value: 1
'''
[evaluateSortByPath.files]
"a.yaml" = '''
---
name: zulu
value: 1
---
name: alpha
value: 2
---
name: mike
value: 3
'''

[evaluateSortByNestedPath]
description = "Test sorting output documents by nested path"
eval = ["a.yaml"]
format = "yaml"
sortPath = "metadata.name"
expected = '''
metadata:
  name: doc1
  priority: 10
---
metadata:
  name: doc2
  priority: 1
---
metadata:
  name: doc3
  priority: 2
'''
[evaluateSortByNestedPath.files]
"a.yaml" = '''
---
metadata:
  name: doc1
  priority: 10
---
metadata:
  name: doc2
  priority: 1
---
metadata:
  name: doc3
  priority: 2
'''