- id: intro
  title: "K8s migration"
  items:
    - content: |
        This example shows conversion of a realistic Kubernetes config to bkl. We'll use bkl best practices and explain the reasoning behind each choice.
- id: original
  title: Original files
  items:
    - content: |
        <p>We start with a list of config files like this:</p>

        <pre>
        original/
          dev/
            namespace.yaml
            api-service.yaml
            web-service.yaml
          prod/
            namespace.yaml
            api-service.yaml
            web-service.yaml
          staging/
            namespace.yaml
            api-service.yaml
            web-service.yaml
        </pre>
- id: pre-prep
  title: Create prep dir
  items:
    - content: |
        <p>Make a copy of your original configs into a prep directory for editing and comparison.</p>
    - code:
        languages: [[0, "shell"]]
        code: |
          $ cp -r original prep
- id: prep
  title: Prep
  items:
    - content: |
        <p>Transform patterns in the prep configs using bkl features to make them easier to work with.</p>

        <p>Convert lists of items to maps with names plus <highlight>$encode: values</highlight>. This allows them to be easily referenced by upper layers. Use keys that make sense for the values, but remember that they must be valid YAML.</p>
    - example:
        operation: convert
        layers:
          - languages: [[0, "yaml"]]
            code: |
              ports:
                - port: 80
                  protocol: TCP
                - port: 443
                  protocol: TCP
          - languages: [[0, "yaml"]]
            code: |
              ports:
                http:
                  port: 80
                  protocol: TCP
                https:
                  port: 443
                  protocol: TCP
                $encode: values
            highlights: ["http:", "https:", "$encode: values"]
    - content: |
        <p>When the list items need to contain the key (e.g. <highlight>ports: { name: http }</highlight>), we can use <highlight>$encode: values:name</highlight> to reduce duplication.</p>
    - example:
        operation: convert
        layers:
          - code: |
              ports:
                - name: http
                  port: 80
                  protocol: TCP
                - name: https
                  port: 443
                  protocol: TCP
            languages: [[0, "yaml"]]
            highlights: ["name: http", "name: https"]
          - code: |
              ports:
                http:
                  port: 80
                  protocol: TCP
                https:
                  port: 443
                  protocol: TCP
                $encode: values:name
            languages: [[0, "yaml"]]
            highlights: ["http:", "https:", "$encode: values:name"]
    - example:
        operation: convert
        layers:
          - languages: [[0, "yaml"]]
            code: |
              - resource:
                  name: cpu
                  target:
                    averageUtilization: 70
                    type: Utilization
                type: Resource
              - resource:
                  name: memory
                  target:
                    averageUtilization: 80
                    type: Utilization
                type: Resource
          - languages: [[0, "yaml"]]
            code: |
              cpu:
                resource:
                  target:
                    averageUtilization: 70
                    type: Utilization
                type: Resource
              memory:
                resource:
                  target:
                    averageUtilization: 80
                    type: Utilization
                type: Resource
              $encode: values:resource.name
            highlights: ["$encode: values:resource.name"]
    - content: |
        <p>Convert environment variable lists to maps for easier overriding and use <highlight>$encode: values:name:value</highlight> to transform them back.</p>
    - example:
        operation: convert
        layers:
          - languages: [[0, "yaml"]]
            code: |
              env:
                - name: DB_HOST
                  value: postgres
                - name: DB_PORT
                  value: "5432"
          - languages: [[0, "yaml"]]
            code: |
              env:
                DB_HOST: postgres
                DB_PORT: "5432"
                $encode: values:name:value
            highlights: ["$encode: values:name:value"]
    - content: |
        <p>Lists with <highlight>valueFrom</highlight> use <highlight>$encode: values:name</highlight> instead.</p>
    - example:
        operation: convert
        layers:
          - languages: [[0, "yaml"]]
            code: |
              env:
                - name: ANALYTICS_KEY
                  valueFrom:
                    secretKeyRef:
                      key: analytics-key
                      name: web-secrets
                - name: API_URL
                  value: https://api.example.com
          - languages: [[0, "yaml"]]
            code: |
              env:
                ANALYTICS_KEY:
                  valueFrom:
                    secretKeyRef:
                      key: analytics-key
                      name: web-secrets
                API_URL:
                  value: https://api.example.com
                $encode: values:name
            highlights: ["$encode: values:name"]
    - content: |
        <p>Convert argument lists to maps with names plus <highlight>$encode: flags</highlight>. If there are non-flag initial arguments, move them from <highlight>args</highlight> to <highlight>command</highlight>. Values are converted to strings automatically, so you don't need to quote them.</p>
    - example:
        operation: convert
        layers:
          - languages: [[0, "yaml"]]
            code: |
              args:
                - --config=/app/config/app.properties
                - --feature=auth
                - --feature=metrics
                - --feature=rate-limiting
                - --log-format=json
                - --log-level=2
                - --verbose
          - languages: [[0, "yaml"]]
            code: |
              args:
                config: /app/config/app.properties
                feature:
                  - auth
                  - metrics
                  - rate-limiting
                log-format: json
                log-level: 2
                verbose: ""
                $encode: flags
            highlights: ["$encode: flags"]
    - content: |
        <p>Convert embedded JSON/YAML strings to structures with <highlight>$encode: json-pretty</highlight> or <highlight>$encode: yaml</highlight>.</p>
    - example:
        operation: convert
        layers:
          - languages: [[0, "yaml"]]
            code: |
              app.config.json: |
                {
                  "apiUrl": "http://api-service",
                  "debugMode": true,
                  "environment": "development",
                  "features": {
                    "analytics": false,
                    "caching": false
                  }
                }
          - languages: [[0, "yaml"]]
            code: |
              app.config.json:
                apiUrl: http://api-service
                debugMode: true
                environment: development
                features:
                  analytics: false
                  caching: false
                $encode: json-pretty
            highlights: ["$encode: json-pretty"]
    - example:
        operation: convert
        layers:
          - languages: [[0, "yaml"]]
            code: |
                prometheus.yml: |
                  global:
                    evaluation_interval: 15s
                    scrape_interval: 15s
          - languages: [[0, "yaml"]]
            code: |
              prometheus.yml:
                global:
                  evaluation_interval: 15s
                  scrape_interval: 15s
                $encode: yaml
            highlights: ["$encode: yaml"]
    - content: |
        <p>For Java-style properties files, use <highlight>$encode: properties</highlight>.</p>
    - example:
        operation: convert
        layers:
          - languages: [[0, "yaml"]]
            code: |
              app.properties: |
                cache.ttl=3600
                environment=production
                logging.format=json
                logging.level=warn
                logging.output=stdout
          - languages: [[0, "yaml"]]
            code: |
              app.properties:
                cache.ttl: 3600
                environment: production
                logging.format: json
                logging.level: warn
                logging.output: stdout
                $encode: properties
            highlights: ["$encode: properties"]
    - content: |
        <p>Convert embedded base64 strings to <highlight>$encode: base64</highlight>.</p>
    - example:
        operation: convert
        layers:
          - languages: [[0, "yaml"]]
            code: |
              database-url: cG9zdGdyZXNxbDovL3Byb2R1c2VyOnByb2RwYXNzQHByb2QtZGItY2x1c3Rlci5yZHMuYW1hem9uYXdzLmNvbTo1NDMyL3Byb2RkYg==
          - languages: [[0, "yaml"]]
            code: |
              database-url:
                $value: postgresql://produser:prodpass@prod-db-cluster.rds.amazonaws.com:5432/proddb
                $encode: base64
            highlights: ["$encode: base64"]
    - content: |
        <p>Remove duplication between string fields with <highlight>$""</highlight>.</p>
    - example:
        operation: convert
        layers:
          - languages: [[0, "yaml"]]
            code: |
              labels:
                environment: prod
              namespace: api-prod
          - languages: [[0, "yaml"]]
            code: |
              labels:
                environment: prod
              namespace: $"api-{labels.environment}"
            highlights: ['$"api-{labels.environment}"']
- id: prep-validate
  title: Validate
  items:
    - content: |
        <p>Validate the prepped files against the original configs before continuing.</p>
    - code:
        languages: [[0, "shell"]]
        code: |
          $ bklc --sort=kind --color original/prod/namespace.yaml prep/prod/namespace.yaml
          $ bklc --sort=kind --color original/prod/api-service.yaml prep/prod/api-service.yaml
          $ bklc --sort=kind --color original/prod/web-service.yaml prep/prod/web-service.yaml
          $ bklc --sort=kind --color original/staging/namespace.yaml prep/staging/namespace.yaml
          $ bklc --sort=kind --color original/staging/api-service.yaml prep/staging/api-service.yaml
          $ bklc --sort=kind --color original/staging/web-service.yaml prep/staging/web-service.yaml
          $ bklc --sort=kind --color original/dev/namespace.yaml prep/dev/namespace.yaml
          $ bklc --sort=kind --color original/dev/api-service.yaml prep/dev/api-service.yaml
          $ bklc --sort=kind --color original/dev/web-service.yaml prep/dev/web-service.yaml
- id: plan
  title: Target layout
  items:
    - content: |
        <p>Plan a file/layer structure for the bkl configs (since bkl uses filenames to determine layer structure).</p>
        
        <p>Keep the original <highlight>namespace</highlight>/<highlight>api-service</highlight>/<highlight>web-service</highlight> structure to match the existing user expectations.</p>

        <p>The <highlight>namespace</highlight> configs are small and self-contained; keep those independent. Compare the <highlight>api-service</highlight> and <highlight>web-service</highlight> configs to see if they should have a common base layer.</p>
    - code:
        languages: [[0, "shell"]]
        code: |
          $ bkli --selector=kind prep/prod/api-service.yaml prep/prod/web-service.yaml
    - content: |
        <p>The configs are similar enough to have a common base layer. Use the following bkl config structure:</p>

        <pre>
        namespace.yaml
          namespace.staging.yaml
            namespace.staging.dev.yaml
        base.yaml
          base.api-service.yaml
            base.api-service.staging.yaml
              base.api-service.staging.dev.yaml
          base.web-service.yaml
            base.web-service.staging.yaml
              base.web-service.staging.dev.yaml
        </pre>

        <p>Use the production version of each config as the base layer. This means that all other environments are expressed as differences from production, encouraging minimizing those differences.</p>

        <p>Create a directory to put these in.</p>
    - code:
        languages: [[0, "shell"]]
        code: |
          $ mkdir -p bkl
- id: namespace
  title: namespace
  items:
    - content: |
        <p>Use <highlight>bkl</highlight> to sort keys in plain YAML files. Use <highlight>bkld</highlight> to produce a diff of two plain YAML or bkl files.</p>
    - code:
        languages: [[0, "shell"]]
        code: |
          $ bkl prep/prod/namespace.yaml --output=bkl/namespace.yaml
          $ bkld --selector=kind bkl/namespace.yaml prep/staging/namespace.yaml --output=bkl/namespace.staging.yaml
          $ bkld --selector=kind bkl/namespace.yaml prep/dev/namespace.yaml --output=bkl/namespace.staging.dev.yaml
    - content: |
        <p>Validate the combined bkl file layers against the original configs.</p>
    - code:
        languages: [[0, "shell"]]
        code: |
          $ bklc --sort=kind --color original/prod/namespace.yaml bkl/namespace.yaml
          $ bklc --sort=kind --color original/staging/namespace.yaml bkl/namespace.staging.yaml
          $ bklc --sort=kind --color original/dev/namespace.yaml bkl/namespace.staging.dev.yaml
- id: base
  title: Base layer
  items:
    - content: |
        <p>Use <highlight>bkli</highlight> to create a minimal base layer for the services.</p>
    - code:
        languages: [[0, "shell"]]
        code: |
          $ bkli --selector=kind prep/prod/api-service.yaml prep/prod/web-service.yaml --output=bkl/base.yaml
- id: api-service
  title: api-service
  items:
    - content: |
        <p>Use <highlight>bkld</highlight> to produce a diff of two plain YAML or bkl files.</p>
    - code:
        languages: [[0, "shell"]]
        code: |
          $ bkld --selector=kind bkl/base.yaml prep/prod/api-service.yaml --output=bkl/base.api-service.yaml
          $ bkld --selector=kind bkl/base.api-service.yaml prep/staging/api-service.yaml --output=bkl/base.api-service.staging.yaml
          $ bkld --selector=kind bkl/base.api-service.staging.yaml prep/dev/api-service.yaml --output=bkl/base.api-service.staging.dev.yaml
    - content: |
        <p>Validate the combined bkl file layers against the original configs.</p>
    - code:
        languages: [[0, "shell"]]
        code: |
          $ bklc --sort=kind --color original/prod/api-service.yaml bkl/base.api-service.yaml
          $ bklc --sort=kind --color original/staging/api-service.yaml bkl/base.api-service.staging.yaml
          $ bklc --sort=kind --color original/dev/api-service.yaml bkl/base.api-service.staging.dev.yaml
- id: web-service
  title: web-service
  items:
    - content: |
        <p>Use <highlight>bkld</highlight> to produce a diff of two plain YAML or bkl files.</p>
    - code:
        languages: [[0, "shell"]]
        code: |
          $ bkld --selector=kind bkl/base.yaml prep/prod/web-service.yaml --output=bkl/base.web-service.yaml
          $ bkld --selector=kind bkl/base.web-service.yaml prep/staging/web-service.yaml --output=bkl/base.web-service.staging.yaml
          $ bkld --selector=kind bkl/base.web-service.staging.yaml prep/dev/web-service.yaml --output=bkl/base.web-service.staging.dev.yaml
    - content: |
        <p>Validate the combined bkl file layers against the original configs.</p>
    - code:
        languages: [[0, "shell"]]
        code: |
          $ bklc --sort=kind --color original/prod/web-service.yaml bkl/base.web-service.yaml
          $ bklc --sort=kind --color original/staging/web-service.yaml bkl/base.web-service.staging.yaml
          $ bklc --sort=kind --color original/dev/web-service.yaml bkl/base.web-service.staging.dev.yaml