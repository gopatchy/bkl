- id: intro
  title: "K8s migration"
  items:
    - content: |
        This example shows conversion of a realistic Kubernetes config to bkl. We'll use bkl best practices and explain the reasoning behind each choice.
- id: original
  title: Original config
  items:
    - code:
        label: original/prod/namespace.yaml
        languages: [[0, "yaml"]]
        expandable: true
        collapsed: true
        code: |
          apiVersion: v1
          kind: Namespace
          metadata:
            name: microservices-prod
            labels:
              environment: prod
    - code:
        label: original/prod/api-service.yaml
        languages: [[0, "yaml"]]
        expandable: true
        collapsed: true
        code: |
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: api-config
            namespace: microservices-prod
          data:
            app.properties: |
              cache.backend=redis-cluster
              cache.enabled=true
              cache.max_size=1000
              cache.ttl=3600
              database.max_idle=10
              database.max_pool_size=50
              database.pool_size=20
              database.timeout=30
              environment=production
              logging.format=json
              logging.level=warn
              logging.output=stdout
              logging.sample_rate=0.1
              metrics.enabled=true
              metrics.path=/metrics
              metrics.port=9090
              security.jwt_expiry=3600
              security.rate_limit=1000
              server.max_connections=1000
              server.name=api-service
              server.port=8080
              server.workers=8
              session.timeout=7200
              session.cookie.secure=true
          ---
          apiVersion: v1
          kind: Secret
          metadata:
            name: api-secrets
            namespace: microservices-prod
          type: Opaque
          data:
            database-url: cG9zdGdyZXNxbDovL3Byb2R1c2VyOnByb2RwYXNzQHByb2QtZGItY2x1c3Rlci5yZHMuYW1hem9uYXdzLmNvbTo1NDMyL3Byb2RkYg==
            api-key: YWJjZGVmZ2hpams=
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: api-service
            namespace: microservices-prod
            labels:
              app: api
              tier: backend
              environment: prod
          spec:
            selector:
              app: api
              environment: prod
            ports:
              - name: http
                port: 80
                targetPort: 8080
                protocol: TCP
            type: ClusterIP
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: api-deployment
            namespace: microservices-prod
            labels:
              app: api
              tier: backend
              environment: prod
          spec:
            replicas: 3
            selector:
              matchLabels:
                app: api
                environment: prod
            strategy:
              type: RollingUpdate
              rollingUpdate:
                maxSurge: 1
                maxUnavailable: 0
            template:
              metadata:
                labels:
                  app: api
                  tier: backend
                  environment: prod
              spec:
                affinity:
                  podAntiAffinity:
                    preferredDuringSchedulingIgnoredDuringExecution:
                      - weight: 100
                        podAffinityTerm:
                          labelSelector:
                            matchExpressions:
                              - key: app
                                operator: In
                                values:
                                  - api
                          topologyKey: kubernetes.io/hostname
                containers:
                  - name: api
                    image: myregistry/api-service:v1.2.3
                    ports:
                      - containerPort: 8080
                        name: http
                    env:
                      - name: APP_ENV
                        value: production
                      - name: CACHE_ENABLED
                        value: "true"
                      - name: METRICS_ENABLED
                        value: "true"
                      - name: DATABASE_URL
                        valueFrom:
                          secretKeyRef:
                            name: api-secrets
                            key: database-url
                      - name: API_KEY
                        valueFrom:
                          secretKeyRef:
                            name: api-secrets
                            key: api-key
                    resources:
                      requests:
                        memory: "512Mi"
                        cpu: "500m"
                      limits:
                        memory: "1Gi"
                        cpu: "1000m"
                    livenessProbe:
                      httpGet:
                        path: /health
                        port: 8080
                      initialDelaySeconds: 30
                      periodSeconds: 10
                      timeoutSeconds: 5
                      failureThreshold: 3
                    readinessProbe:
                      httpGet:
                        path: /ready
                        port: 8080
                      initialDelaySeconds: 5
                      periodSeconds: 5
                      timeoutSeconds: 3
                      successThreshold: 1
                      failureThreshold: 3
                    args:
                      - "server"
                      - "--config=/app/config/app.properties"
                      - "--workers=8"
                      - "--feature=auth"
                      - "--feature=metrics"
                      - "--feature=rate-limiting"
                      - "--feature=caching"
                      - "--feature=circuit-breaker"
                      - "--feature=request-tracing"
                      - "--log-format=json"
                      - "--log-sample-rate=0.1"
                      - "--graceful-timeout=60s"
                      - "--max-request-size=10MB"
                      - "--request-timeout=30s"
                    volumeMounts:
                      - name: config
                        mountPath: /app/config
                volumes:
                  - name: config
                    configMap:
                      name: api-config
          ---
          apiVersion: autoscaling/v2
          kind: HorizontalPodAutoscaler
          metadata:
            name: api-hpa
            namespace: microservices-prod
          spec:
            scaleTargetRef:
              apiVersion: apps/v1
              kind: Deployment
              name: api-deployment
            minReplicas: 3
            maxReplicas: 10
            metrics:
              - type: Resource
                resource:
                  name: cpu
                  target:
                    type: Utilization
                    averageUtilization: 60
              - type: Resource
                resource:
                  name: memory
                  target:
                    type: Utilization
                    averageUtilization: 70
    - code:
        label: original/prod/web-service.yaml
        languages: [[0, "yaml"]]
        expandable: true
        collapsed: true
        code: |
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: web-config
            namespace: microservices-prod
          data:
            app.properties: |
              cache.enabled=true
              cache.ttl=3600
              cache.backend=redis-cluster
              cache.max_size=1000
              environment=production
              logging.level=warn
              logging.format=json
              logging.output=stdout
              logging.sample_rate=0.1
              metrics.enabled=true
              metrics.port=9090
              metrics.path=/metrics
              security.rate_limit=1000
              security.csp_enabled=true
              server.port=80
              server.max_connections=1000
              server.name=web-service
              server.workers=8
              session.timeout=7200
              session.cookie.secure=true
            app.config.json: |
              {
                "environment": "production",
                "apiUrl": "https://api.example.com",
                "debugMode": false,
                "features": {
                  "analytics": true,
                  "caching": true,
                  "cdnEnabled": true,
                  "performanceMonitoring": true
                },
                "cdn": {
                  "url": "https://cdn.example.com"
                }
              }
          ---
          apiVersion: v1
          kind: Secret
          metadata:
            name: web-secrets
            namespace: microservices-prod
          type: Opaque
          data:
            session-secret: cHJvZC1zZXNzaW9uLXNlY3JldC1rZXktcHJvZHVjdGlvbi0xMjM0NTY=
            cdn-api-key: Y2RuLXByb2QtYXBpLWtleS1wcm9kdWN0aW9uLXh5ejEyMzQ1Ng==
            analytics-key: YW5hbHl0aWNzLXByb2QtYXBpLWtleS05ODc2NTQzMjE=
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: web-service
            namespace: microservices-prod
            labels:
              app: web
              tier: frontend
              environment: prod
            annotations:
              service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
          spec:
            selector:
              app: web
              environment: prod
            ports:
              - name: http
                port: 80
                targetPort: 80
                protocol: TCP
            type: LoadBalancer
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: web-deployment
            namespace: microservices-prod
            labels:
              app: web
              tier: frontend
              environment: prod
          spec:
            replicas: 3
            selector:
              matchLabels:
                app: web
                environment: prod
            strategy:
              type: RollingUpdate
              rollingUpdate:
                maxSurge: 1
                maxUnavailable: 0
            template:
              metadata:
                labels:
                  app: web
                  tier: frontend
                  environment: prod
              spec:
                affinity:
                  podAntiAffinity:
                    preferredDuringSchedulingIgnoredDuringExecution:
                      - weight: 100
                        podAffinityTerm:
                          labelSelector:
                            matchExpressions:
                              - key: app
                                operator: In
                                values:
                                  - web
                          topologyKey: kubernetes.io/hostname
                containers:
                  - name: web
                    image: myregistry/web-frontend:v1.2.3
                    ports:
                      - containerPort: 80
                        name: http
                    env:
                      - name: API_URL
                        value: "https://api.example.com"
                      - name: APP_ENV
                        value: production
                      - name: CACHE_ENABLED
                        value: "true"
                      - name: SESSION_SECRET
                        valueFrom:
                          secretKeyRef:
                            name: web-secrets
                            key: session-secret
                      - name: CDN_API_KEY
                        valueFrom:
                          secretKeyRef:
                            name: web-secrets
                            key: cdn-api-key
                      - name: ANALYTICS_KEY
                        valueFrom:
                          secretKeyRef:
                            name: web-secrets
                            key: analytics-key
                    resources:
                      requests:
                        memory: "512Mi"
                        cpu: "500m"
                      limits:
                        memory: "1Gi"
                        cpu: "1000m"
                    livenessProbe:
                      httpGet:
                        path: /health
                        port: 80
                      initialDelaySeconds: 30
                      periodSeconds: 10
                      timeoutSeconds: 5
                      failureThreshold: 3
                    readinessProbe:
                      httpGet:
                        path: /ready
                        port: 80
                      initialDelaySeconds: 5
                      periodSeconds: 5
                      timeoutSeconds: 3
                      successThreshold: 1
                      failureThreshold: 3
                    args:
                      - "server"
                      - "--config=/app/config/app.properties"
                      - "--workers=8"
                      - "--feature=auth"
                      - "--feature=metrics"
                      - "--feature=rate-limiting"
                      - "--feature=caching"
                      - "--feature=compression"
                      - "--feature=security-headers"
                      - "--feature=cdn"
                      - "--feature=analytics"
                      - "--log-format=json"
                      - "--graceful-timeout=30s"
                    volumeMounts:
                      - name: config
                        mountPath: /app/config
                volumes:
                  - name: config
                    configMap:
                      name: web-config
          ---
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: web-ingress
            namespace: microservices-prod
            annotations:
              nginx.ingress.kubernetes.io/ssl-redirect: "true"
              cert-manager.io/cluster-issuer: "letsencrypt-prod"
              nginx.ingress.kubernetes.io/rate-limit: "100"
          spec:
            ingressClassName: nginx
            tls:
              - hosts:
                  - app.example.com
                  - www.app.example.com
                secretName: prod-tls-cert
            rules:
              - host: app.example.com
                http:
                  paths:
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: web-service
                          port:
                            number: 80
              - host: www.app.example.com
                http:
                  paths:
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: web-service
                          port:
                            number: 80
          ---
          apiVersion: autoscaling/v2
          kind: HorizontalPodAutoscaler
          metadata:
            name: web-hpa
            namespace: microservices-prod
          spec:
            scaleTargetRef:
              apiVersion: apps/v1
              kind: Deployment
              name: web-deployment
            minReplicas: 3
            maxReplicas: 10
            metrics:
              - type: Resource
                resource:
                  name: cpu
                  target:
                    type: Utilization
                    averageUtilization: 60
              - type: Resource
                resource:
                  name: memory
                  target:
                    type: Utilization
                    averageUtilization: 70

              - code:
                  label: original/staging/namespace.yaml
                  languages: [[0, "yaml"]]
                  expandable: true
                  collapsed: true
    - code:
        label: original/staging/namespace.yaml
        languages: [[0, "yaml"]]
        expandable: true
        collapsed: true
        code: |
          apiVersion: v1
          kind: Namespace
          metadata:
            name: microservices-staging
            labels:
              environment: staging
    - code:
        label: original/staging/api-service.yaml
        languages: [[0, "yaml"]]
        expandable: true
        collapsed: true
        code: |
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: api-config
            namespace: microservices-staging
          data:
            app.properties: |
              cache.enabled=true
              cache.ttl=300
              cache.backend=redis
              database.pool_size=10
              database.timeout=30
              database.max_idle=5
              environment=staging
              logging.level=info
              logging.format=json
              logging.output=stdout
              metrics.enabled=true
              metrics.port=9090
              server.port=8080
              server.name=api-service
              server.workers=4
              session.timeout=3600
              session.cookie.secure=true
          ---
          apiVersion: v1
          kind: Secret
          metadata:
            name: api-secrets
            namespace: microservices-staging
          type: Opaque
          data:
            database-url: cG9zdGdyZXNxbDovL3N0YWdpbmd1c2VyOnN0YWdpbmdwYXNzQHBvc3RncmVzLXN0YWdpbmc6NTQzMi9zdGFnaW5nZGI=
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: api-service
            namespace: microservices-staging
            labels:
              app: api
              tier: backend
              environment: staging
          spec:
            selector:
              app: api
              environment: staging
            ports:
              - name: http
                port: 80
                targetPort: 8080
                protocol: TCP
            type: ClusterIP
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: api-deployment
            namespace: microservices-staging
            labels:
              app: api
              tier: backend
              environment: staging
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: api
                environment: staging
            template:
              metadata:
                labels:
                  app: api
                  tier: backend
                  environment: staging
              spec:
                containers:
                  - name: api
                    image: myregistry/api-service:staging
                    ports:
                      - containerPort: 8080
                        name: http
                    env:
                      - name: APP_ENV
                        value: staging
                      - name: CACHE_ENABLED
                        value: "true"
                      - name: DATABASE_URL
                        valueFrom:
                          secretKeyRef:
                            name: api-secrets
                            key: database-url
                    resources:
                      requests:
                        memory: "256Mi"
                        cpu: "200m"
                      limits:
                        memory: "512Mi"
                        cpu: "500m"
                    livenessProbe:
                      httpGet:
                        path: /health
                        port: 8080
                      initialDelaySeconds: 30
                      periodSeconds: 10
                    readinessProbe:
                      httpGet:
                        path: /ready
                        port: 8080
                      initialDelaySeconds: 5
                      periodSeconds: 5
                    args:
                      - "server"
                      - "--config=/app/config/app.properties"
                      - "--workers=4"
                      - "--feature=auth"
                      - "--feature=metrics"
                      - "--feature=rate-limiting"
                      - "--feature=caching"
                      - "--log-format=json"
                      - "--graceful-timeout=30s"
                    volumeMounts:
                      - name: config
                        mountPath: /app/config
                volumes:
                  - name: config
                    configMap:
                      name: api-config
          ---
          apiVersion: autoscaling/v2
          kind: HorizontalPodAutoscaler
          metadata:
            name: api-hpa
            namespace: microservices-staging
          spec:
            scaleTargetRef:
              apiVersion: apps/v1
              kind: Deployment
              name: api-deployment
            minReplicas: 2
            maxReplicas: 5
            metrics:
              - type: Resource
                resource:
                  name: cpu
                  target:
                    type: Utilization
                    averageUtilization: 70
              - type: Resource
                resource:
                  name: memory
                  target:
                    type: Utilization
                    averageUtilization: 80
    - code:
        label: original/staging/web-service.yaml
        languages: [[0, "yaml"]]
        expandable: true
        collapsed: true
        code: |
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: web-config
            namespace: microservices-staging
          data:
            app.properties: |
              server.port=80
              server.name=web-service
              logging.level=info
              logging.format=json
              logging.output=stdout
              cache.enabled=true
              cache.ttl=300
              cache.backend=redis
              session.timeout=3600
              session.cookie.secure=true
              metrics.enabled=true
              metrics.port=9090
              environment=staging
            app.config.json: |
              {
                "environment": "staging",
                "apiUrl": "http://api-service",
                "debugMode": false,
                "features": {
                  "analytics": true,
                  "caching": true,
                  "cdnEnabled": true
                }
              }
          ---
          apiVersion: v1
          kind: Secret
          metadata:
            name: web-secrets
            namespace: microservices-staging
          type: Opaque
          data:
            session-secret: c3RhZ2luZy1zZXNzaW9uLXNlY3JldC1rZXktYWJjZGVmZ2hpams=
            cdn-api-key: Y2RuLXN0YWdpbmctYXBpLWtleS0xMjM0NTY3ODkw
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: web-service
            namespace: microservices-staging
            labels:
              app: web
              tier: frontend
              environment: staging
          spec:
            selector:
              app: web
              environment: staging
            ports:
              - name: http
                port: 80
                targetPort: 80
                protocol: TCP
            type: LoadBalancer
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: web-deployment
            namespace: microservices-staging
            labels:
              app: web
              tier: frontend
              environment: staging
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: web
                environment: staging
            template:
              metadata:
                labels:
                  app: web
                  tier: frontend
                  environment: staging
              spec:
                containers:
                  - name: web
                    image: myregistry/web-frontend:staging
                    ports:
                      - containerPort: 80
                        name: http
                    env:
                      - name: API_URL
                        value: "http://api-service"
                      - name: APP_ENV
                        value: staging
                      - name: CACHE_ENABLED
                        value: "true"
                      - name: SESSION_SECRET
                        valueFrom:
                          secretKeyRef:
                            name: web-secrets
                            key: session-secret
                      - name: CDN_API_KEY
                        valueFrom:
                          secretKeyRef:
                            name: web-secrets
                            key: cdn-api-key
                    resources:
                      requests:
                        memory: "256Mi"
                        cpu: "200m"
                      limits:
                        memory: "512Mi"
                        cpu: "500m"
                    livenessProbe:
                      httpGet:
                        path: /health
                        port: 80
                      initialDelaySeconds: 10
                      periodSeconds: 10
                    readinessProbe:
                      httpGet:
                        path: /health
                        port: 80
                      initialDelaySeconds: 5
                      periodSeconds: 5
                    args:
                      - "server"
                      - "--config=/app/config/app.properties"
                      - "--workers=4"
                      - "--feature=auth"
                      - "--feature=metrics"
                      - "--feature=rate-limiting"
                      - "--feature=caching"
                      - "--log-format=json"
                      - "--graceful-timeout=30s"
                    volumeMounts:
                      - name: config
                        mountPath: /app/config
                volumes:
                  - name: config
                    configMap:
                      name: web-config
          ---
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: web-ingress
            namespace: microservices-staging
            annotations:
              nginx.ingress.kubernetes.io/ssl-redirect: "true"
              cert-manager.io/cluster-issuer: "letsencrypt-staging"
          spec:
            ingressClassName: nginx
            tls:
              - hosts:
                  - staging.app.example.com
                secretName: staging-tls-cert
            rules:
              - host: staging.app.example.com
                http:
                  paths:
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: web-service
                          port:
                            number: 80
          ---
          apiVersion: autoscaling/v2
          kind: HorizontalPodAutoscaler
          metadata:
            name: web-hpa
            namespace: microservices-staging
          spec:
            scaleTargetRef:
              apiVersion: apps/v1
              kind: Deployment
              name: web-deployment
            minReplicas: 2
            maxReplicas: 5
            metrics:
              - type: Resource
                resource:
                  name: cpu
                  target:
                    type: Utilization
                    averageUtilization: 70
              - type: Resource
                resource:
                  name: memory
                  target:
                    type: Utilization
                    averageUtilization: 80
    - code:
        label: original/dev/namespace.yaml
        languages: [[0, "yaml"]]
        expandable: true
        collapsed: true
        code: |
          apiVersion: v1
          kind: Namespace
          metadata:
            name: microservices-dev
            labels:
              environment: dev
    - code:
        label: original/dev/api-service.yaml
        languages: [[0, "yaml"]]
        expandable: true
        collapsed: true
        code: |
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: api-config
            namespace: microservices-dev
          data:
            app.properties: |
              server.port=8080
              server.name=api-service
              logging.level=debug
              logging.format=json
              cache.enabled=false
              cache.ttl=300
              database.pool_size=5
              database.timeout=30
              session.timeout=3600
              session.cookie.secure=false
              environment=development
          ---
          apiVersion: v1
          kind: Secret
          metadata:
            name: api-secrets
            namespace: microservices-dev
          type: Opaque
          data:
            database-url: cG9zdGdyZXNxbDovL2RldnVzZXI6ZGV2cGFzc0Bwb3N0Z3Jlcy1kZXY6NTQzMi9kZXZkYg==
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: api-service
            namespace: microservices-dev
            labels:
              app: api
              tier: backend
              environment: dev
          spec:
            selector:
              app: api
              environment: dev
            ports:
              - name: http
                port: 80
                targetPort: 8080
                protocol: TCP
            type: ClusterIP
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: api-deployment
            namespace: microservices-dev
            labels:
              app: api
              tier: backend
              environment: dev
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: api
                environment: dev
            template:
              metadata:
                labels:
                  app: api
                  tier: backend
                  environment: dev
              spec:
                containers:
                  - name: api
                    image: myregistry/api-service:dev
                    ports:
                      - containerPort: 8080
                        name: http
                    env:
                      - name: APP_ENV
                        value: development
                      - name: DEBUG
                        value: "true"
                      - name: DATABASE_URL
                        valueFrom:
                          secretKeyRef:
                            name: api-secrets
                            key: database-url
                    resources:
                      requests:
                        memory: "64Mi"
                        cpu: "50m"
                      limits:
                        memory: "128Mi"
                        cpu: "100m"
                    livenessProbe:
                      httpGet:
                        path: /health
                        port: 8080
                      initialDelaySeconds: 30
                      periodSeconds: 10
                    readinessProbe:
                      httpGet:
                        path: /ready
                        port: 8080
                      initialDelaySeconds: 5
                      periodSeconds: 5
                    args:
                      - "server"
                      - "--config=/app/config/app.properties"
                      - "--workers=2"
                      - "--feature=auth"
                      - "--feature=metrics"
                      - "--verbose"
                    volumeMounts:
                      - name: config
                        mountPath: /app/config
                volumes:
                  - name: config
                    configMap:
                      name: api-config
    - code:
        label: original/dev/web-service.yaml
        languages: [[0, "yaml"]]
        expandable: true
        collapsed: true
        code: |
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: web-config
            namespace: microservices-dev
          data:
            app.properties: |
              server.port=80
              server.name=web-service
              logging.level=debug
              logging.format=json
              cache.enabled=false
              cache.ttl=300
              session.timeout=1800
              session.cookie.secure=false
              environment=development
            app.config.json: |
              {
                "environment": "development",
                "apiUrl": "http://api-service",
                "debugMode": true,
                "features": {
                  "analytics": false,
                  "caching": false,
                  "cdn": false
                }
              }
          ---
          apiVersion: v1
          kind: Secret
          metadata:
            name: web-secrets
            namespace: microservices-dev
          type: Opaque
          data:
            session-secret: ZGV2LXNlc3Npb24tc2VjcmV0LWtleS0xMjM0NTY3ODkw
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: web-service
            namespace: microservices-dev
            labels:
              app: web
              tier: frontend
              environment: dev
          spec:
            selector:
              app: web
              environment: dev
            ports:
              - name: http
                port: 80
                targetPort: 80
                protocol: TCP
            type: NodePort
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: web-deployment
            namespace: microservices-dev
            labels:
              app: web
              tier: frontend
              environment: dev
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: web
                environment: dev
            template:
              metadata:
                labels:
                  app: web
                  tier: frontend
                  environment: dev
              spec:
                containers:
                  - name: web
                    image: myregistry/web-frontend:dev
                    ports:
                      - containerPort: 80
                        name: http
                    env:
                      - name: API_URL
                        value: "http://api-service"
                      - name: APP_ENV
                        value: development
                      - name: DEBUG
                        value: "true"
                      - name: SESSION_SECRET
                        valueFrom:
                          secretKeyRef:
                            name: web-secrets
                            key: session-secret
                    resources:
                      requests:
                        memory: "64Mi"
                        cpu: "50m"
                      limits:
                        memory: "128Mi"
                        cpu: "100m"
                    livenessProbe:
                      httpGet:
                        path: /health
                        port: 80
                      initialDelaySeconds: 30
                      periodSeconds: 10
                    readinessProbe:
                      httpGet:
                        path: /ready
                        port: 80
                      initialDelaySeconds: 5
                      periodSeconds: 5
                    args:
                      - "server"
                      - "--config=/app/config/app.properties"
                      - "--workers=2"
                      - "--feature=compression"
                      - "--feature=metrics"
                      - "--verbose"
                    volumeMounts:
                      - name: config
                        mountPath: /app/config
                      - name: static-content
                        mountPath: /usr/share/nginx/html
                volumes:
                  - name: config
                    configMap:
                      name: web-config
                  - name: static-content
                    emptyDir: {}
          ---
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: web-ingress
            namespace: microservices-dev
          spec:
            ingressClassName: nginx
            rules:
              - host: dev.app.local
                http:
                  paths:
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: web-service
                          port:
                            number: 80
- id: prep
  title: Prep
  items:
    - content: |
        <p>Make a copy of your original configs into a prep directory for editing and comparison:</p>
    - code:
        languages: [[0, "shell"]]
        code: |
          $ cp -r original prep
    - content: |
        <p>Transform patterns in the prep configs using bkl features to make them easier to work with.</p>

        <p>Convert lists of items to maps with names plus <highlight>$encode: values</highlight>. This allows them to be easily referenced by upper layers.</p>
    - example:
        operation: convert
        layers:
          - languages: [[0, "yaml"]]
            code: |
              ports:
                - port: 80
                  protocol: TCP
                - port: 443
                  protocol: TCP
          - languages: [[0, "yaml"]]
            code: |
              ports:
                http:
                  port: 80
                  protocol: TCP
                https:
                  port: 443
                  protocol: TCP
                $encode: values
            highlights: ["http:", "https:", "$encode: values"]
    - content: |
        <p>When the list items need to contain the key (e.g. <highlight>ports: { name: http }</highlight>), we can use <highlight>$encode: values:name</highlight> reduce duplication.</p>
    - example:
        operation: convert
        layers:
          - code: |
              ports:
                - name: http
                  port: 80
                  protocol: TCP
                - name: https
                  port: 443
                  protocol: TCP
            languages: [[0, "yaml"]]
            highlights: ["name: http", "name: https"]
          - code: |
              ports:
                http:
                  port: 80
                  protocol: TCP
                https:
                  port: 443
                  protocol: TCP
                $encode: values:name
            languages: [[0, "yaml"]]
            highlights: ["http:", "https:", "$encode: values:name"]
    - content: |
        <p>Convert argument lists to maps with names plus <highlight>$encode: flags</highlight>. If there are non-flag initial arguments, move them from <highlight>args</highlight> to <highlight>command</highlight>.</p>
    - example:
        operation: convert
        layers:
          - languages: [[0, "yaml"]]
            code: |
              args:
                - --config=/app/config/app.properties
                - --feature=auth
                - --feature=metrics
                - --feature=rate-limiting
                - --log-format=json
          - languages: [[0, "yaml"]]
            code: |
              args:
                config: /app/config/app.properties
                feature:
                  - auth
                  - metrics
                  - rate-limiting
                log-format: json
                $encode: flags
            highlights: ["$encode: flags"]
    - content: |
        <p>Convert embedded JSON/YAML strings to structures with <highlight>$encode: json-pretty</highlight> or <highlight>$encode: yaml</highlight>.</p>
    - example:
        operation: convert
        layers:
          - languages: [[0, "yaml"]]
            code: |
              app.config.json: |
                {
                  "apiUrl": "http://api-service",
                  "debugMode": true,
                  "environment": "development",
                  "features": {
                    "analytics": false,
                    "caching": false
                  }
                }
          - languages: [[0, "yaml"]]
            code: |
              app.config.json:
                apiUrl: http://api-service
                debugMode: true
                environment: development
                features:
                  analytics: false
                  caching: false
                $encode: json-pretty
            highlights: ["$encode: json-pretty"]
    - example:
        operation: convert
        layers:
          - languages: [[0, "yaml"]]
            code: |
                prometheus.yml: |
                  global:
                    evaluation_interval: 15s
                    scrape_interval: 15s
          - languages: [[0, "yaml"]]
            code: |
              prometheus.yml:
                global:
                  evaluation_interval: 15s
                  scrape_interval: 15s
                $encode: yaml
            highlights: ["$encode: yaml"]
    - content: |
        <p>Convert embedded base64 strings to <highlight>$encode: base64</highlight>.</p>
    - example:
        operation: convert
        layers:
          - languages: [[0, "yaml"]]
            code: |
              database-url: cG9zdGdyZXNxbDovL3Byb2R1c2VyOnByb2RwYXNzQHByb2QtZGItY2x1c3Rlci5yZHMuYW1hem9uYXdzLmNvbTo1NDMyL3Byb2RkYg==
          - languages: [[0, "yaml"]]
            code: |
              database-url:
                $value: postgresql://produser:prodpass@prod-db-cluster.rds.amazonaws.com:5432/proddb
                $encode: base64
            highlights: ["$encode: base64"]
    - content: |
        <p>Remove duplication between string fields with <highlight>$""</highlight>.</p>
    - example:
        operation: convert
        layers:
          - languages: [[0, "yaml"]]
            code: |
              labels:
                environment: prod
              namespace: api-prod
          - languages: [[0, "yaml"]]
            code: |
              labels:
                environment: prod
              namespace: $"api-{labels.environment}"
            highlights: ['$"api-{labels.environment}"']
- id: plan
  title: Target layout
  items:
    - content: |
        <p>We'll start with a plan for the target layout of the bkl configs. We'll keep the original <highlight>namespace</highlight>/<highlight>api-service</highlight>/<highlight>web-service</highlight> split to match the ways users were used to working with the config.</p>

        <p>The <highlight>namespace</highlight> configs are small and self-contained; we'll keep those independent. We can compare the <highlight>api-service</highlight> and <highlight>web-service</highlight> configs to see if they should have a common base layer:</p>
    - code:
        languages: [[0, "shell"]]
        code: |
          $ diff -ud --color prod/api-service.yaml prod/web-service.yaml
    - content: |
        <p>The configs are similar enough to have a common base layer. We'll use the following bkl config structure:</p>

        <pre>
        namespace.yaml
          namespace.staging.yaml
            namespace.staging.dev.yaml
        base.yaml
          base.api-service.yaml
            base.api-service.staging.yaml
              base.api-service.staging.dev.yaml
          base.web-service.yaml
            base.web-service.staging.yaml
              base.web-service.staging.dev.yaml
        </pre>

        <p>We'll use the production version of each config as the base layer. This means that all other environments are expressed as differences from production, encouraging minimizing those differences.</p>
- id: namespace
  title: namespace
  items:
    - content: |
        <p>This conversion is simple enough to do by hand. We'll use tools for some of the more complex later transformations.</p>

        <p>We'll use <highlight>$""</highlight> interpolation to set the namespace name based on the environment.</p>
    - code:
        label: bkl/namespace.yaml
        expandable: true
        collapsed: true
        languages: [[0, "yaml"]]
        code: |
          apiVersion: v1
          kind: Namespace
          metadata:
            name: $"microservices-{metadata.labels.environment}"
            labels:
              environment: prod
    - code:
        label: bkl/namespace.staging.yaml
        expandable: true
        collapsed: true
        languages: [[0, "yaml"]]
        code: |
          $match:
            kind: Namespace
          metadata:
            labels:
              environment: staging
    - code:
        label: bkl/namespace.staging.dev.yaml
        expandable: true
        collapsed: true
        languages: [[0, "yaml"]]
        code: |
          $match:
            kind: Namespace
          metadata:
            labels:
              environment: dev
    - content: |
        <p>Once we have bkl files that look correct and parse, we validate them against the original configs.</p>

        <p>Using <highlight>yq</highlight> to sort keys eliminates diffs that are just about ordering.</p>
    - code:
        languages: [[0, "shell"]]
        code: |
          $ diff -ud --color &lt;(yq 'sort_keys(..)' prod/namespace.yaml) &lt;(bkl bkl/namespace.yaml)
          $ diff -ud --color &lt;(yq 'sort_keys(..)' staging/namespace.yaml) &lt;(bkl bkl/namespace.staging.yaml)
          $ diff -ud --color &lt;(yq 'sort_keys(..)' dev/namespace.yaml) &lt;(bkl bkl/namespace.staging.dev.yaml)
- id: base
  title: Base layer
  items:
    - content: |
        <p>We'll use <highlight>bkli</highlight> to create a minimal base layer for the services. First, we need to split the configs into files named by resource type.</p>
    - code:
        languages: [[0, "shell"]]
        code: |
          $ pushd prod
          $ mkdir -p api-service web-service
          $ pushd api-service
          $ yq -s '.kind' ../api-service.yaml
          $ popd
          $ pushd web-service
          $ yq -s '.kind' ../web-service.yaml
          $ popd
          $ popd
- id: api-service
  title: api-service
  items:
    - content: |
        <p>Next, we'll convert the <highlight>api-service.yaml</highlight> files.</p>

        <p>Use <highlight>yq</highlight> to split the config into files named by resource type:</p>
    - code:
        languages: [[0, "shell"]]
        code: |
          $ (cd prod && yq -s '.kind' api-service.yaml)
    - content: |
        <p>For the ConfigMap, we'll use <highlight>$encode: properties</highlight> to convert a map to an embedded properties string.</p>
    - code:
        label: bkl/configmap.yaml
        expandable: true
        collapsed: true
        languages: [[0, "yaml"]]
        code: |
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: api-config
            namespace: microservices-prod
          data:
            app.properties:
              $encode: properties
              server:
                port: 8080
                name: api-service
                workers: 8
                max_connections: 1000
              logging:
                level: warn
                format: json
                output: stdout
                sample_rate: 0.1
              cache:
                enabled: true
                ttl: 3600
                backend: redis-cluster
                max_size: 1000
              database:
                pool_size: 20
                max_pool_size: 50
                timeout: 30
                max_idle: 10
              metrics:
                enabled: true
                port: 9090
                path: /metrics
              security:
                rate_limit: 1000
                jwt_expiry: 3600
              environment: production
