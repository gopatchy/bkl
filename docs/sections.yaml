# bkl Documentation Sections
# Ordered list of documentation sections

- id: example
  title: Example
  items:
    - type: example
      example:
        type: grid
        rows:
          - items:
              - label: service.yaml
                code: |
                  addr: 127.0.0.1
                  name: myService
                  port: 8080
              - label: service.test.toml
                code: |
                  port = 8081
                highlights: ["8081"]
          - items:
              - label: "Run it!"
                code: |
                  $ bkl service.test.toml
                  addr = '127.0.0.1'
                  name = 'myService'
                  port = 8081
                highlights: ["8081"]
    - type: text
      content: |
        bkl knows that <ifocus>service.test.toml</ifocus> inherits from <ifocus>service.yaml</ifocus> by the filename pattern (<a href="#inheritance">override with <ifocus>$parent</ifocus></a>) and uses filename extensions to determine formats.

- id: install
  title: Install
  items:
    - type: example
      example:
        type: grid
        rows:
          - items:
              - label: Using go
                code: |
                  # Install go from <a href="https://go.dev/dl/">go.dev</a>
                  $ go install github.com/gopatchy/bkl/...@latest
                  # Verify that ~/go/bin is in your $PATH
          - items:
              - label: macOS using brew
                code: |
                  # Install brew from <a href="https://brew.sh/">brew.sh</a>
                  $ brew install gopatchy/bkl/bkl
    - type: text
      content: |
        You can also download binaries directly <a href="https://github.com/gopatchy/bkl/releases">here</a>.

- id: formats
  title: Formats
  items:
    - type: text
      content: |
        Output defaults to the same format as the specified input file. Use <ifocus>-f</ifocus> (or <ifocus>--format</ifocus>) to override.
    - type: example
      example:
        type: grid
        rows:
          - items:
              - label: YAML
                code: |
                  $ bkl -f yaml service.test.toml
                  addr: 127.0.0.1
                  name: myService
                  port: 8081
                highlights: ["-f yaml"]
          - items:
              - label: TOML
                code: |
                  $ bkl -f toml service.test.toml
                  addr = '127.0.0.1'
                  name = 'myService'
                  port = 8081
                highlights: ["-f toml"]
          - items:
              - label: JSON
                code: |
                  $ bkl -f json service.test.toml
                  {"addr":"127.0.0.1","name":"myService","port":8081}
                highlights: ["-f json"]
          - items:
              - label: JSON (pretty)
                code: |
                  $ bkl -f json-pretty service.test.toml
                  {
                    "addr": "127.0.0.1",
                    "name": "myService",
                    "port": 8081
                  }
                highlights: ["-f json-pretty"]
    - type: text
      content: |
        <ifocus>jsonl</ifocus> is an alias for <ifocus>json</ifocus> to fully support <a href="https://jsonlines.org/">JSON Lines</a>.
    - type: text
      content: |
        You can also set the output format implicitly by using a different file extension.
    - type: example
      example:
        type: single
        label: ""
        code: |
          $ bkl service.test.<focus>yaml</focus>   # real file is service.test.<focus>toml</focus>
          addr: 127.0.0.1
          name: myService
          port: 8081

- id: write
  title: Write
  items:
    - type: text
      content: |
        Output goes to stdout by default. Errors always go to stderr.
    - type: example
      example:
        type: grid
        rows:
          - items:
              - label: File Output
                code: |
                  $ bkl <focus>-o out.yaml</focus> service.test.toml
    - type: text
      content: |
        Output format is autodetected from output filename (unless specified with <ifocus>-f</ifocus>).

- id: inputs
  title: Inputs
  items:
    - type: example
      example:
        type: grid
        rows:
          - items:
              - label: Commandline Layering
                code: |
                  $ bkl <focus>a.b.yaml c.d.yaml</focus>   # a.yaml + a.b.yaml + c.yaml + c.d.yaml
    - type: text
      content: |
        Specifying multiple input files merges all layers in order.
    - type: example
      example:
        type: grid
        rows:
          - items:
              - label: stdin
                code: |
                  $ bkl <focus>-- -.yaml</focus> <<'EOF'
                  a: 1
                  EOF
    - type: text
      content: |
        Specifying an input file with the base name <ifocus>-</ifocus> and a valid format extension causes bkl to read that format from standard input. Use <ifocus>--</ifocus> before the filename to avoid it being treated as a flag.

- id: inheritance
  title: Inheritance
  items:
    - type: text
      content: |
        Inheritance is determined using filenames by default. After stripping the extension, the remaining filename is split on <ifocus>.</ifocus> and treated as an inheritance hierarchy (e.g. <ifocus>a.b.c.yaml</ifocus> inherits from <ifocus>a.b.&lt;ext&gt;</ifocus> inherits from <ifocus>a.&lt;ext&gt;</ifocus>). Parent layers may have any supported file extension.
    - type: example
      example:
        type: grid
        rows:
          - items:
              - label: Set Parent In File
                code: |
                  <focus>$parent: a.b</focus>   # inherits from a.b.<ext>, from a.<ext>
    - type: text
      content: |
        bkl will check for all supported endings of a manually-specified parent file and will still evaluate layers under the parent in the normal order.
    - type: example
      example:
        type: grid
        rows:
          - items:
              - label: Parent List
                code: |
                  <focus>$parent:
                  - a
                  - b</focus>
              - label: Parent Wildcard
                code: |
                  <focus>$parent: a.*</focus>
    - type: text
      content: |
        Setting <ifocus>$parent</ifocus> to a list or wildcard allows inheriting from multiple files. All parent files are loaded before the child.
    - type: text
      content: |
        <ifocus>*</ifocus> does not match <ifocus>.</ifocus>. <ifocus>a.*</ifocus> matches <ifocus>a.b.yaml</ifocus> but not <ifocus>a.b.c.yaml</ifocus>.
    - type: example
      example:
        type: grid
        rows:
          - items:
              - label: Set Parent In CLI
                code: |
                  $ bkl <focus>a.b.yaml c.d.yaml</focus>      # a.yaml + a.b.yaml + c.yaml + c.d.yaml
                  $ bkl <focus>-P a.b.yaml c.d.yaml</focus>   # a.b.yaml + c.d.yaml
    - type: text
      content: |
        Layer order can be specified with commandline argument order. The <ifocus>-P</ifocus> flag (or <ifocus>--skip-parent</ifocus>) tells bkl to not load parent layers using filenames or <ifocus>$parent</ifocus>.
    - type: example
      example:
        type: grid
        rows:
          - items:
              - label: No Parent
                code: |
                  <focus>$parent: false</focus>   # no further inheritance
    - type: text
      content: |
        Setting <ifocus>$parent</ifocus> to <ifocus>false</ifocus> or <ifocus>null</ifocus> stops any further inheritance regardless of filename structure.

- id: streams
  title: Streams
  items:
    - type: text
      content: |
        Streams package multiple documents into a single file. YAML/TOML streams are delimited with <ifocus>---</ifocus> or sometimes <ifocus>+++</ifocus>. JSON streams are concatenated or delimited with newlines (see <a href="https://jsonlines.org/">JSON Lines</a> and <a href="http://ndjson.org/">ndjson</a>).
    - type: text
      content: |
        To layer streams, bkl has to match documents between layers. By default, child documents are applied to all parent documents. <ifocus>$match</ifocus> allows applying to specific parent documents.
    - type: example
      example:
        type: grid
        rows:
          - items:
              - code: |
                  a: 1
                  ---
                  b: 2
              - code: |
                  c: 3
              - code: |
                  a: 1
                  <focus>c: 3</focus>
                  ---
                  b: 2
                  <focus>c: 3</focus>
            operator: "+"
          - items:
              - code: |
                  a: 1
                  ---
                  b: 2
              - code: |
                  <focus>$match:
                    b: 2</focus>
                  c: 3
              - code: |
                  a: 1
                  ---
                  b: 2
                  <focus>c: 3</focus>
            operator: "+"
    - type: text
      content: |
        The supplied pattern can match multiple documents and the updates will be applied to all of them. <ifocus>$match: {}</ifocus> matches any documents with a map as their root element, regardless of parent.
    - type: example
      example:
        type: grid
        rows:
          - items:
              - code: |
                  a: 1
                  ---
                  b: 2
                  ---
                  a: 1
              - code: |
                  <focus>$match:
                    a: 1</focus>
                  c: 3
              - code: |
                  a: 1
                  <focus>c: 3</focus>
                  ---
                  b: 2
                  ---
                  a: 1
                  <focus>c: 3</focus>
            operator: "+"
    - type: text
      content: |
        <ifocus>$invert: true</ifocus> inside a <ifocus>$match</ifocus> block inverts the match, causing it to apply to any documents that do not contain the match criteria.
    - type: example
      example:
        type: grid
        rows:
          - items:
              - code: |
                  a: 1
                  ---
                  b: 2
              - code: |
                  $match:
                    a: 1
                    <focus>$invert: true</focus>
                  c: 3
              - code: |
                  a: 1
                  ---
                  b: 2
                  <focus>c: 3</focus>
            operator: "+"
    - type: text
      content: |
        <ifocus>$match: null</ifocus> forces the updates to apply to a new document.
    - type: example
      example:
        type: grid
        rows:
          - items:
              - code: |
                  a: 1
              - code: |
                  <focus>$match: null</focus>
                  b: 2
              - code: |
                  a: 1
                  ---
                  <focus>b: 2</focus>
            operator: "+"

- id: maps
  title: Maps
  items:
    - type: text
      content: |
        Maps are merged by default. To change that, use <ifocus>$replace: true</ifocus> or remove individual entries with <ifocus>$delete</ifocus>.
    - type: example
      example:
        type: grid
        rows:
          - items:
              - code: |
                  a: 1
              - code: |
                  b: 2
              - code: |
                  a: 1
                  b: 2
            operator: "+"
          - items:
              - code: |
                  a: 1
              - code: |
                  b: 2
                  <focus>$replace: true</focus>
              - code: |
                  b: 2
            operator: "+"
          - items:
              - code: |
                  a: 1
                  b: 2
              - code: |
                  c: 3
                  <focus>b: $delete</focus>
              - code: |
                  a: 1
                  c: 3
            operator: "+"
    - type: text
      content: |
        bkl returns an error if you use <ifocus>$delete</ifocus>, <ifocus>$replace: true</ifocus>, or a <ifocus>key: value</ifocus> pair when they don't override a value from a lower layer. This helps keep upper layers minimal.

- id: lists
  title: Lists
  items:
    - type: text
      content: |
        Lists are merged by default. To change that, use <ifocus>$replace: true</ifocus> or remove individual entries with <ifocus>$delete</ifocus>.
    - type: example
      example:
        type: grid
        rows:
          - items:
              - code: |
                  - 1
              - code: |
                  - 2
              - code: |
                  - 1
                  - 2
            operator: "+"
          - items:
              - code: |
                  - 1
              - code: |
                  - 2
                  - <focus>$replace: true</focus>
              - code: |
                  - 2
            operator: "+"
          - items:
              - code: |
                  - x: 1
                  - x: 2
              - code: |
                  - x: 3
                  - <focus>$delete:
                      x: 2</focus>
              - code: |
                  - x: 1
                  - x: 3
            operator: "+"
    - type: text
      content: |
        bkl returns an error if you use <ifocus>$replace: true</ifocus> or <ifocus>$delete</ifocus> when they don't override a value from a lower layer. This helps keep upper layers minimal.
    - type: text
      content: |
        To update a specific list item from a parent layer, use <ifocus>$match</ifocus>. Combine it with <ifocus>$value</ifocus> for scalars.
    - type: example
      example:
        type: grid
        rows:
          - items:
              - code: |
                  - a: 1
                  - b: 2
              - code: |
                  - <focus>$match:
                      b: 2</focus>
                    b: 10
              - code: |
                  - a: 1
                  - b: 10
            operator: "+"
          - items:
              - code: |
                  - 1
                  - 2
              - code: |
                  - <focus>$match: 2
                    $value: 10</focus>
              - code: |
                  - 1
                  - 10
            operator: "+"

- id: interp
  title: $""
  items:
    - type: text
      content: |
        Use <ifocus>$""</ifocus> to interpolate format strings with <a href="#merge"><ifocus>$merge</ifocus></a>-style references.
    - type: example
      example:
        type: grid
        rows:
          - items:
              - code: |
                  a: 1
                  b:
                    c: foo
                  d: <focus>$"{b.c} bar {a} 2"</focus>
              - code: |
                  a: 1
                  b:
                    c: foo
                  d: <focus>foo bar 1 2</focus>
            operator: "="

- id: decode
  title: $decode
  items:
    - type: text
      content: |
        <ifocus>$decode</ifocus> transforms a string into a tree by parsing standard formats.
    - type: example
      example:
        type: grid
        rows:
          - items:
              - code: |
                  $value: |
                    <focus>{"a":1}</focus>
                  <focus>$decode: json</focus>
              - code: |
                  <focus>a: 1</focus>
            operator: "="

- id: env
  title: $env
  items:
    - type: text
      content: |
        Use <ifocus>$env:</ifocus> to substitute environment variables. This is supported in keys and values.
    - type: example
      example:
        type: grid
        rows:
          - items:
              - code: |
                  # export FOO=test
                  <focus>"$env:FOO"</focus>: 1
              - code: |
                  <focus>test</focus>: 1
            operator: "="
          - items:
              - code: |
                  # export FOO=test
                  a: <focus>$env:FOO</focus>
              - code: |
                  a: <focus>test</focus>
            operator: "="
    - type: text
      content: |
        Note that all <ifocus>$env:</ifocus> substitutions result in string values even if the substituted value is <ifocus>true</ifocus>, <ifocus>false</ifocus>, <ifocus>null</ifocus>, or all digits.

- id: encode
  title: $encode
  items:
    - type: text
      content: |
        <ifocus>$encode</ifocus> transforms the subtree into the specified format.
    - type: example
      example:
        type: grid
        rows:
          - items:
              - label: base64
                code: |
                  $value: a
                  <focus>$encode: base64</focus>
              - code: |
                  YQ==
            operator: "="
          - items:
              - label: flags
                code: |
                  a: 1
                  b: 2
                  <focus>$encode: flags</focus>
                  # [tolist:=, prefix:--]
              - code: |
                  - --a=1
                  - --b=2
            operator: "="
          - items:
              - label: flatten
                code: |
                  - - a
                    - b
                  - - c
                    - 4
                  - e
                  - <focus>$encode: flatten</focus>
              - code: |
                  - a
                  - b
                  - c
                  - 4
                  - e
            operator: "="
          - items:
              - label: join
                code: |
                  $value: [a, b]
                  <focus>$encode: join:/</focus>
              - code: |
                  a/b
            operator: "="
          - items:
              - label: json
                code: |
                  a: 1
                  b: 2
                  <focus>$encode: json</focus>
              - code: |
                  |
                    {"a":1,"b":2}
            operator: "="
          - items:
              - label: json (list)
                code: |
                  - a: 1
                  - b: 2
                  - <focus>$encode: json</focus>
              - code: |
                  |
                    [{"a":1},{"b":2}]
            operator: "="
          - items:
              - label: prefix
                code: |
                  - a
                  - 2
                  - <focus>$encode: prefix:X</focus>
              - code: |
                  - Xa
                  - X2
            operator: "="
          - items:
              - label: tolist
                code: |
                  a: 1
                  b: 2
                  <focus>$encode: tolist:=</focus>
              - code: |
                  - a=1
                  - b=2
            operator: "="
          - items:
              - label: Stacking
                code: |
                  a: 1
                  b: 2
                  <focus>$encode: [tolist:=, "join:,"]</focus>
              - code: |
                  a=1,b=2
            operator: "="

- id: required
  title: $required
  items:
    - type: text
      content: |
        Use <ifocus>$required</ifocus> in lower layers to force upper layers to replace the value.
    - type: example
      example:
        type: grid
        rows:
          - items:
              - code: |
                  a: 1
                  <focus>b: $required</focus>
              - code: |
                  c: 3
              - code: |
                  Error
            operator: "+"
          - items:
              - code: |
                  a: 1
                  <focus>b: $required</focus>
              - code: |
                  <focus>b: 2</focus>
                  c: 3
              - code: |
                  a: 1
                  b: 2
                  c: 3
            operator: "+"
          - items:
              - code: |
                  a: 1
                  <focus>b:
                    - $required</focus>
              - code: |
                  c: 3
              - code: |
                  Error
            operator: "+"
          - items:
              - code: |
                  a: 1
                  <focus>b:
                    - $required</focus>
              - code: |
                  <focus>b:
                    - 2</focus>
                  c: 3
              - code: |
                  a: 1
                  b:
                    - 2
                  c: 3
            operator: "+"

- id: merge
  title: $merge
  items:
    - type: text
      content: |
        Use <ifocus>$merge</ifocus> to merge the contents one subtree or scalar value into another.
    - type: example
      example:
        type: grid
        rows:
          - items:
              - code: |
                  foo:
                    bar:
                      a: 1
                  zig:
                    b: 2
                    <focus>$merge: foo.bar</focus>
              - code: |
                  foo:
                    bar:
                      a: 1
                  zig:
                    <focus>a: 1</focus>
                    b: 2
            operator: "="
          - items:
              - code: |
                  foo:
                    bar:
                      - a: 1
                  zig:
                    - b: 2
                    - <focus>$merge: foo.bar</focus>
              - code: |
                  foo:
                    bar:
                      - a: 1
                  zig:
                    - b: 2
                    - <focus>a: 1</focus>
            operator: "="
          - items:
              - code: |
                  foo:
                    bar:
                      a: 1
                  zig:
                    b: 2
                    c: <focus>$merge:foo.bar.a</focus>
              - code: |
                  foo:
                    bar:
                      a: 1
                  zig:
                    b: 2
                    c: <focus>1</focus>
            operator: "="
    - type: text
      content: |
        You can also merge across documents using <ifocus>$match</ifocus> and optionally <ifocus>$path</ifocus>:
    - type: example
      example:
        type: grid
        rows:
          - items:
              - code: |
                  a: 1
                  b: 2
                  ---
                  c: 3
                  <focus>$merge:
                    $match:
                      a: 1</focus>
              - code: |
                  a: 1
                  b: 2
                  ---
                  <focus>a: 1
                  b: 2</focus>
                  c: 3
            operator: "="
          - items:
              - code: |
                  a: 1
                  b:
                    c: 3
                  ---
                  d: 4
                  <focus>$merge:
                    $match:
                      a: 1
                    $path: b</focus>
              - code: |
                  a: 1
                  b:
                    c: 3
                  ---
                  <focus>c: 3</focus>
                  d: 4
            operator: "="
    - type: text
      content: |
        <ifocus>$merge</ifocus> also supports a shorthand syntax equivalent to <ifocus>$match</ifocus> and <ifocus>$path</ifocus>:
    - type: example
      example:
        type: grid
        rows:
          - items:
              - code: |
                  a: 1
                  b: 2
                  ---
                  c: 3
                  <focus>$merge: <value>[{a: 1}]</value></focus>
              - code: |
                  a: 1
                  b: 2
                  ---
                  <focus>a: 1
                  b: 2</focus>
                  c: 3
            operator: "="
          - items:
              - code: |
                  a: 1
                  b:
                    c: 3
                  ---
                  d: 4
                  <focus>$merge: <value>[{a: 1}, b]</value></focus>
              - code: |
                  a: 1
                  b:
                    c: 3
                  ---
                  <focus>c: 3</focus>
                  d: 4
            operator: "="

- id: replace
  title: $replace
  items:
    - type: text
      content: |
        Use <ifocus>$replace</ifocus> to merge the contents of one subtree or scalar value with another.
    - type: example
      example:
        type: grid
        rows:
          - items:
              - code: |
                  foo:
                    bar:
                      a: 1
                  zig:
                    b: 2
                    <focus>$replace: foo.bar</focus>
              - code: |
                  foo:
                    bar:
                      a: 1
                  zig:
                    <focus>a: 1</focus>
            operator: "="
          - items:
              - code: |
                  foo:
                    bar:
                      - a: 1
                  zig:
                    - b: 2
                    - <focus>$replace: foo.bar</focus>
              - code: |
                  foo:
                    bar:
                      - a: 1
                  zig:
                    - <focus>a: 1</focus>
            operator: "="
          - items:
              - code: |
                  foo:
                    bar:
                      a: 1
                  zig:
                    b: 2
                    c: <focus>$replace:foo.bar.a</focus>
              - code: |
                  foo:
                    bar:
                      a: 1
                  zig:
                    b: 2
                    c: <focus>1</focus>
            operator: "="
    - type: text
      content: |
        Note that <ifocus>$merge</ifocus> and <ifocus>$replace</ifocus> are equivalent for scalar values.
    - type: text
      content: |
        You can also replace across documents using <ifocus>$match</ifocus> and optionally <ifocus>$path</ifocus>:
    - type: example
      example:
        type: grid
        rows:
          - items:
              - code: |
                  a: 1
                  b: 2
                  ---
                  c: 3
                  <focus>$replace:
                    $match:
                      a: 1</focus>
              - code: |
                  a: 1
                  b: 2
                  ---
                  <focus>a: 1
                  b: 2</focus>
            operator: "="
          - items:
              - code: |
                  a: 1
                  b:
                    c: 3
                  ---
                  d: 4
                  <focus>$replace:
                    $match:
                      a: 1
                    $path: b</focus>
              - code: |
                  a: 1
                  b:
                    c: 3
                  ---
                  <focus>c: 3</focus>
                  d: 4
            operator: "="
    - type: text
      content: |
        <ifocus>$replace</ifocus> also supports a shorthand syntax equivalent to <ifocus>$match</ifocus> and <ifocus>$path</ifocus>:
    - type: example
      example:
        type: grid
        rows:
          - items:
              - code: |
                  a: 1
                  b: 2
                  ---
                  c: 3
                  <focus>$replace: <value>[{a: 1}]</value></focus>
              - code: |
                  a: 1
                  b: 2
                  ---
                  <focus>a: 1
                  b: 2</focus>
            operator: "="
          - items:
              - code: |
                  a: 1
                  b:
                    c: 3
                  ---
                  d: 4
                  <focus>$replace: <value>[{a: 1}, b]</value></focus>
              - code: |
                  a: 1
                  b:
                    c: 3
                  ---
                  <focus>c: 3</focus>
                  d: 4
            operator: "="

- id: output
  title: $output
  items:
    - type: text
      content: |
        Use <ifocus>$output: true</ifocus> to select a subtree for output instead of the document root.
    - type: example
      example:
        type: grid
        rows:
          - items:
              - code: |
                  foo:
                    bar:
                      <focus>$output: true</focus>
                      a: 1
                      b: 2
              - code: |
                  a: 1
                  b: 2
            operator: "="
          - items:
              - code: |
                  foo:
                    bar:
                      - <focus>$output: true</focus>
                      - a: 1
                      - b: 2
              - code: |
                  - a: 1
                  - b: 2
            operator: "="
    - type: text
      content: |
        Multiple instances of <ifocus>$output: true</ifocus> in a document will generate multiple output documents (delimited with <ifocus>---</ifocus>).
    - type: text
      content: |
        Use <ifocus>$output: false</ifocus> to omit a subtree or entire document from the output.
    - type: example
      example:
        type: grid
        rows:
          - items:
              - code: |
                  a:
                    b: 1
                    <focus>$output: false</focus>
                  c:
                    d: 2
              - code: |
                  c:
                    d: 2
            operator: "="
          - items:
              - code: |
                  a:
                    - b: 1
                    - <focus>$output: false</focus>
                  c:
                    - d: 2
              - code: |
                  c:
                    - d: 2
            operator: "="
          - items:
              - code: |
                  a: 1
                  <focus>$output: false</focus>
                  ---
                  b: 2
              - code: |
                  b: 2
            operator: "="
    - type: text
      content: |
        Combine <ifocus>$output</ifocus> with <ifocus>$replace</ifocus> or <ifocus>$merge</ifocus> to have hidden "template" subtrees that don't appear in the output but can be copied in as needed.
