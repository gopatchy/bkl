#!/bin/bash

set -eo pipefail

ROOT=$(pwd)
GOCMD=${GOCMD:=go}
BKLTMP=$(mktemp -d)
BINS="bkl bkld bkli bklr"

function cleanup {
	rm -Rf $BKLTMP $TESTTMP
}

# Build binaries (with coverage if COVERAGE env var is set)
if [[ -n "$COVERAGE" ]]; then
	export GOCOVERDIR=$BKLTMP/coverdata
	mkdir -p $GOCOVERDIR
	
	for BIN in $BINS; do
		$GOCMD build -cover -o $BKLTMP/$BIN ./cmd/$BIN
	done
else
	for BIN in $BINS; do
		$GOCMD build -o $BKLTMP/$BIN ./cmd/$BIN
	done
fi

export PATH=$BKLTMP:$PATH

FOUND=n

for TEST in tests/*; do
	if [[ "$1" != "" && "tests/$1" != "$TEST" ]]; then
		continue
	fi

	FOUND=y

	echo TEST $TEST
	cd $TEST

	TESTTMP=$(mktemp -d)

  set +e
  if ! source cmd >/dev/null 2>&1; then
    printf "	\e[31mFAIL\e[0m\n"
    source cmd
    cleanup
    exit 1
  fi
  set -e

	diff -ud expected <(source cmd 2>/dev/null)

	cd ~-
	printf "	\e[32mPASS\e[0m\n"

	rm -Rf $TESTTMP
done

# Generate coverage report if coverage was enabled
if [[ -n "$COVERAGE" ]]; then
	echo "Aggregating coverage data..."
	$GOCMD tool covdata textfmt -i=$GOCOVERDIR -o=$ROOT/integration-coverage.out
	
	if [ -f "$ROOT/integration-coverage.out" ]; then
		$GOCMD tool cover -html=$ROOT/integration-coverage.out -o=$ROOT/integration-coverage.html
		echo "Coverage report generated: integration-coverage.html"
	fi
fi

cleanup

if [[ "$1" != "" && $FOUND == n ]]; then
	echo "No test matching '$1' found"
	exit 1
fi